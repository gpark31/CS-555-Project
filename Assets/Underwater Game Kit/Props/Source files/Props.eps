%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Props.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Olga Bikmullina
%%CreationDate: 10/22/2018
%%BoundingBox: 0 0 720 672
%%HiResBoundingBox: 0 0 719.7033 671.7000
%%CropBox: 0 0 719.7033 671.7000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.0 x243 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-10-22T21:41:58+03:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FWBeQ&#xA;POeva3rV7YahAVNospvF9L01tpln9OOFWqefJQ+/+TXvmv0moyTySEhsHb9oaLFixxlE/V9ormz3&#xA;Ng6h2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi+s+ZZfUeG0cRxJs03c060J6DNhh0oq5Og1vaZsxga&#xA;A6qOiW2o6nG1yl9JHErFRJyZiWHXao8clnlHHtwteixZc4MhMgfFNbTUrq1vxp2oMHZwDDcDblXo&#xA;CPwzHniEo8Ufk7DDqZ48nhZd75FOcxXZuxV2KuxVxIAJJoBuScVajkjkQPGwdG3VlNQfkRireKux&#xA;V2KuxV2KuxV2KsM1D8x7ey85/wCG3t/j9W1gQ1b1JGugDzRAtOEYb4jXs3hvg5NYY5hj4efV2mPs&#xA;0y0/i33/AGfrTvzIksVul9AOUsLKjoTQMkjBaHr0Yg1+eXamPpsGqdfjO9NWtjYwc7iCFLeScBrh&#xA;4v3Zc7mrlePLdj18c1kZEcjzb5yJ2O9I7TZWeF1LF/SkKK5NSRsRU9+tM2mnmZQBLj5BRReXsHYq&#xA;7FXYq7FXYq7FXYq7FXYq7FVC/dksbl12ZYnKn3CnJ4xch72nUEjHIjuP3PKtVmYyCIGigVI8Sc6D&#xA;FHa3gdTM3Se+VPNlnptm9neI/AMXjkQV69QRtmJq9JKcuKLtuyu1YYIGEwauxSlfeYf0pqzSRKY4&#xA;Y0AgB+18JrU07knJY9P4cKPNq1HaHj5rGwA2ehoSUUnqQCc0xeyibDeBLsVdir5q836/5m/MHzwv&#xA;l/SkjnSaSYWFrcsws4La2YqbqdAG5u/HlUqSOSqo6k3ACItrO5VT5S89eQvMWnJE9ol3qbMun6jp&#xA;ytDBLPEvM217AeKsroDStdgSCrAHGxJaIfQHl7V01nQtP1ZIzCL63juPRbdozIoYofdSaHKiGxMM&#xA;CuxVDalqen6ZaPeX86W1tH9qSQ0FT0A7knsBvgMgBZbMWKWSXDEWWK3X5m6cbOS406zuLlEIKSsq&#xA;Ro8YYeoVDOJK8K8aqN8plnFbB2kOxsl1IxH426V9rMYZUmiSVDVJFDqfZhUZe6gijShqU11DZyTW&#xA;qq8sQ5mNgTyVd2UUI3p0yMya2UVe6QSaJHe+YrDzN6yme2h9OJBH8LIyyAb8qj++Oak5CcoyHmBT&#xA;nxzmOGWLpI3936kxv7mzv7V7CWZ4JnILemrM1I5K1UgEb8fozPOaMob7W4YiQdkh0a0vp7zU4NdS&#xA;ZtNVwmmgBhzj5yAlvSo1SgjPxUzCwcHFLi5Xt7nM1HBwx4D6q9XvZZp5shEYbUFViO6sHDfFvU8/&#xA;iNfHNlilEj08nBlfVE5YxdirsVdiqV+ZvMWn+XNFn1jUBIbS2KCT0gGb95Isa0BKj7TjvleXIIR4&#xA;i24cRySERzLF9L/O38v7+URNeSWTtsv1qJkU/wCzXmo+k5jw12I9acufZmaPS/czi2ura6gS4tZk&#xA;nt5BWOaJg6MPFWWoOZYIO4cCUSDRVMKHYq7FXYq0yqylWFVYUI9jiCgixRYFqflN/r7h5CkVP3Tg&#xA;V5Cu33d83GLV+l5HU9lEZDZodGM3lq9rdSW7kMyGlR3qKjM6EuIW6XLjMJGJ6Mg8o6BcXVyLiVCt&#xA;utORPcA1oPnmHrNQIihzdt2ToJZJcRHpeiZpXs3Yq7FXYq+ZfMGm+Zfy6/MSPWNPjjLJJOlkLklL&#xA;e9srhi/oiXtNGOIYfaqgbiVbLhUg18ijtS89+c/OnmfSCmlwWlxprvNpmhwTfW5ZbmRDF61zKEj9&#xA;OGNWO/EAV3J2xEQOa3b3ry1o50by9p2kmT1nsbeKB5jtzdFAZ6duTVOVEtgTLArsVeea95O1fzf5&#xA;qlk1Cd7TQNLmSG2t1FGmHpB5pBWtOUjqgbwBzHnjM5b8g7zS6+Glw+gXkmLJ7t9h8t0H5u038urX&#xA;y7dW+mXVtFeRPHH6MN6xk3lVJQyeqeXwFq8gcxtVPHGB4SOLbr5t2iz6uWUGYkYm+cduRrp3s5Xz&#xA;Z5TACrrNhTooFzD9w+LMr8zi/nR+YdN+TzfzJf6UqsevaHeCWKz1K0nlVfiVJo341G3IKTtk45YS&#xA;5EH4tc8E4fVEj3hiq3ep2HmTT/LgvEe2uIuZuUQVQBJaItSw/wB0j781ssYGYQ7xdubHCJYJZesT&#xA;VfL9ad63pot9Nt5Y5pDLazq7T1HNllcK42AFPiB6dsy82IDHQ6OFCVyTFG5IreIB+/NazKXT+YdB&#xA;03WPRv8AUrWzkkg5Mk88UTHi44GjsD3bMvS5IxJsgM/y+ScbjEy9wJV/8a+Tf+r9p3/SXB/zXmZ+&#xA;Yx/zo/MMfyWf+ZP/AEpTGw1LTtRt/rGn3UN5b1K+tbyLKnIdRyQkVGWRkJCwbaZ45QNSBB80RkmD&#xA;sVeV/m7b+pqtjDr95cjybeQut1aWhKsJYKzc5FUFnQBQ3elNsyIQhLHISHLf5OBny5ceaBjKgTW1&#xA;czt1269Xlmq/lvoDypJ5S80x31tKKpby8ZHSlNmZaf8AEMw8XY0M+8JAfb936nPz+0uTSkDJAnz3&#xA;H2Efpeq/kQbOw0zUNAeZ5dXtpfXvG5VhYOOK+iBsAoA5VFa/QBYNAdMOEm2A7WjrTxAVT1LFm7FX&#xA;Yq7FXYq06I6lXUMp6giowg0iUQRRQX6C0j1fV+qRlzuSRX8DlvjzqrcX8hhu+EWjVRUUKgCqNgoF&#xA;AMpJcoAAUG8UuxV2KuxV5p/zkRcJH+WV1bsAwvLuzhoQD9m4WY9faLJw5sZckt/IOC0tZ/MdpbQr&#xA;AimxlKIoVPjikXYD/jHvksqIPXcqZuxV2KtMoZSrdGFD8jiofPvmDylHo115itbDVbmO10SKF7SF&#xA;vScgTeh8LsUqQPXNPkM5rUaWAnPb6eH7XtdLrZThjJAufFfwv9SY2vlm9XSPLt4nmC6RtRv/AKqV&#xA;pBxUNOYT6dU+0VHevywR0kPDxyr65U1T1f7zLHhHohfv2vdO/KuhyR6tr+pXOo3F7daQ5tIDIUVB&#xA;CJ29TkkaqCxWLMrTaaI8Sh9Jp1/aGf8Ad4wAAJDieixUeJWIBJG+AOolzS/W7aeS29GzjLTT0Qqn&#xA;EHiGDV+Ihfh498vwWbA6hB7yl2g6nqWs3d/p0cn1Q6WVinkcCR2YtJGePHgooYTjgwicpD+aacjU&#xA;YjjjGR/jFvMPzA0mS3/MxdP0rUj9au7GOTUbifhKVkQMFDV48f3aJt7175hdp4oRPe9B2RlP5e5D&#xA;YS2/HvtuPS/Okbl08wwBiApPpQ9F6ftZquKPd9rmGWIijE/IvUPys0NNO8t/W3lafUNUle5v5mK8&#xA;WlBMfwBQFC0XOr0GMRxAjru8r2rnM8xHSOwZjma612KvMNc1K28z+bAIQJ9I0iOaASHdJp5aLMV/&#xA;mRQoSvfem2bbS4eGBJ/i2eZ7U1YnlEYn6N/iwRvyw0HyzY3l7FXUL6Y+lY/WFUrF6h4rRdwWqftH&#xA;6KZRpOzseImfMj7G7X9tZtTGOP6Qauuv7PJ7t5d8uaVoGnRWWn26RBEVZZFUBpWUULuepJ98w5zM&#xA;jZd3iwxxigE0yDa7FUu1nzFomixLJqd5HbCTaNGJLuR/JGtXb6BjTdh088pqAtjkn5weRIpvSlvJ&#xA;UetKNbzA79DxKcvww8Jc3+SNR3faFLWfzR0+sFn5dQanql0CyLLzgiiX+eXmqv8A7ECvywiLPB2V&#xA;MknJ6Yj8bMQ078yPzLvr9jpkFtqVojFZJDAYLeoO4jkaQM1P8xh4XYZOzNNEbkxPv3+5klj+dGhx&#xA;Xbaf5ht30q+jPGUowuYAf9aP4x8im3jg4XBydjZK4sZ4x8ink35oeQYoPWbWoClCeKcnfb/IVS34&#xA;YKcUdm6gmuAslt5454I54jWOVVdD0qrCowOFIEGivxQ8U/5yV1DztaWekfouS6tvLTGb9N3NkXVg&#xA;9F9FZ5I/jSI/F3oT9rtlmOmMngcN3EGEsM4LA1EivVq+PKtcuprZOuqeULuyjh1BnmIoWSdpJPjA&#xA;+0PiI7npjsqdaJr3kbTLW8WCOWK5ugo+sQzXULfADw5emfi4liRXARaQUwtfN3kcQKt3LqMsyihl&#xA;XUdSQMf9VXUDAYrbMPyi87arqvnG70uwnutQ8tpbNNK97JJcvazhlCKLmX963qAt8Dk9KrShrXOI&#xA;DKJezZWzaZeSlakVFKjqPliofPfmP8s28q6kjT6mmorqYlkWe6snnkDRstVJWUkkiQEt3zm+0dP4&#xA;dGyb+D2nZ/aPjggRrhrqlTWenrOsBuLMTOCyx/oyapA6n+8zWdL3/wBM7Dil3fap6TI/lPW11aK8&#xA;ll025EsWq28NtLAnpSIQKITxNGO1TsczdLqqNeXe4utwHPjMa9W1PYdI85DUdS03TrGa3uIdQjM0&#xA;d5CxkVF4yuEdCEYOBFRgaUrmfEA5IwB+oW83k0co45TkKMTVfJl9vYJayyXlxctIwQ1LkLHGooWI&#xA;Hb7O9Tm0xYYw3dYZGWz5v1LXNY1LzprTaFrNzp2mm4mJu7NpuMoM0joaQkcq+oeNe2aDNqDjnIxP&#xA;1S73uMOmj4MBOIlIRHOtvm3aaNoVi0s1zPLqV7MeUsk0B5GpJLfvSOp6nkTlmi7M1WvJOIemPM3s&#xA;4XaXbmDRADJsTyA3NfqRVrpXlq3+sOw+JnZ5RJbMfTPXjsGUcfY5ha7S5tPk8PJtIefPz83L0XaM&#xA;NVjGTFvH9PcXvHkmxex8o6PauvGRLSIyL0o7qHYfQzHOp08OHHEeTyGtyceaZ/pFO8ucV5prGp6t&#xA;5g0fUtYF29p5dt6pFbwu0bTRVAMjulHPNW5U5Uptvuc2I8HAAcvMi/c6HJPU6oy8E1EGvf3pNoPm&#xA;TytBbx2lpJwCjiAoD9B4RGQgfPIHtjBM1de8FoPYWpgL4eL3EKvm1Tf6JzsJFm5AmB42BUupDLRg&#xA;adVzZ4anE1vYdTlBxzFiqL1LRtVttV0yC+gPwyqC6d0cfbRh2ZW2OaGcDEkF7fDljkiJR5FG5BsS&#xA;fzb5ij8v6HPqBT1pwVitIP8Afk8h4xp8q7n2rhAcnSac5sgj8/c8Xlh1nWdWktref19ZnUSaxq7i&#xA;q28b7rFEO232VHT51InyerBhhjsKiOQ72U6Z5c8ueV7GS8YLziUvcahP8Uh8SD2r4L+JxcHJmnlN&#xA;fYwpxrvn3Uy1pGun6Nbv8M5UVqO5I3d/8kGg/WufxR08dzckfq2sS+SoRpltqK3lYSsVtIP3kRKn&#xA;i/JRRRU14t1xYwxxz+oiv0pz+XXlbynLbQ3LOl/dTkG8uphVkdhyKhX+x/rdT1rTEuJrtRljdbVy&#xA;Snz7ZaNe+a7byz5dgRGaVI7mWL4gJJhw4V32RC7t/Zjezdo82QYTkyno94ijSKNI0FEQBVHgAKDK&#xA;3kibNsL8n/mINb87eavK9zGkNzok6mx41rNalVR2NSfiSYGvTZlyRGzEFm2RShjpemGtbSE161jT&#xA;+mKvAv8AnI7TtHg1rynYWljb24kF7PP6USJyAa3jSvECv22y3GwmqfldoXl+6/Mu8sr3TLO5gk0Y&#xA;TJDNDHIA8V0FLKjKR0moThyIg9l/wF5G/wCpd0z/AKQ7f/mjKrLOk2sdPsLC3W2sbaK0tk+zBAix&#xA;oPkqgDAlJPOfnbTPKkOmPeq0kmrahbabbRJ15XEgVpDsfhjSrH6B3wgWglkWBLG/Pvl59Z0UegCb&#xA;yykFxbhRUsACsiAVFeUbNxFftUzD1+n8XEY9ejsOzdX4OWz9J2Lxy6l0XgLiK5k9dR6Ucr28iKok&#xA;ZQ1Wb4QBSpr4ZznZ+nxzzxx5TwwMt/x9nk9Lr9RnhgnPHEGYjY3v+3vrq3Hps9vbPc384WB5EjEd&#xA;fVMgeobjGKtsN6Z23b3Y+hhpzLHHw5RGx3+Rvnfz+Dw3YHbWvyakRkfEjLmNvmK5V8vilEuiaFZX&#xA;gvdI1q80e9UFleGCZKVBB40ZWUEEg75xukhqJ2ccZT4esQdviHvNTrMcKjm8McXSUo7/AD5qF0l7&#xA;qUi6drfnC+uoX/eLaOl1KXAqQ3CRuPQHehxlqpyG9n4t0MUYeqGOIPwH6E60uLytZ262tldS8QOR&#xA;pbSMzdixp1yjU6TNCpZIyiDysUPhbVi10csiIGEiOYEwa+TV/epbyJJawHVYD9u1mhmgZWH7Svxf&#xA;YjqNumbjsXt2WihKFXEm+db/AG9zqe1/Z6OvmJyPBKIr+cCOffGuadeWNMm816usdzRCzpLqFskT&#xA;rFDaKdovUYJyaSnDp3JH2cGXNLX6kTIqEB7/AD+ZTjwR7N05hHeUuvKzy5dAB5n7XuObt5tJvOWo&#xA;PYeWNQnjbjO0Rht28JZyIoz9DuMtwQ4pgOPq8vh4pS7gxR20keS7PQgFmjveUdzEa/YUFiD03FFG&#xA;U+0BkL6CwGr2clAwABuW5LBtX/KC/EcUtleLJBbAtFDPUSID+zzAIYCm1RX3zmxOnpOME0stoNV0&#xA;dYoLyT1/2r+RCZFSL4hHLMeK0ao4ht/hryOwI3HYeu8LNRNY5d/e6Xt/s8ZsBlGN5I93d+l6N+WD&#xA;SGTWAv8AvN6kDKR09Uxnn9PAR50HalcYrudL2BfhG+Vs6zWO9ef/AJx84tK0q9c/6FaXwe52qAWh&#xA;kVGPyY0+nJRdz2IR4kh1Mf0sJ8m+adFsdKWEsHupWM93KKjlLJueRYAfD0+jJ07rU6WU5Xbtf1CL&#xA;zVqNro8c3oaRFSfUZ1IbkdxHGCKjtXf59sFIxYDiBlzl0T/zBrFj5Y8voLCFObUg061jFQzt02G5&#xA;p1Pj8zi4eLGcs/V8Un8n/l831gav5hpc6pcN6iwyUZY2bfk/Yt+AxbtTrNuGG0QjvzbW18u/UbnT&#xA;rh4NWumMUrxEKXhAJbkOhozLxr0rgBauy8ks1iQ9IZP+Xn5f6NpSQa5HP9euLmIS205rRVnUMz1O&#xA;7O4O7bbbADeoJdd2j2hPJeOuGIP3M6yLqXyl5p1zUPJ/536rrkKtJLp+oepPAvWa0uoI5JYvCrRy&#xA;VX/KAy4C4tZNF9R6Xqdhqum22pafMtxY3kSzW06dGjcclP3ZS2IrFXzf/wA5AXIm/NjRrQfELbTY&#xA;WYCho0924oe9aRDbLsfJrmmX5aTiD84rIVAN3o17DQ9+M9vLt/wGHJyWHN79lDY7FXzt5r1mTzt+&#xA;avl+4tm9TQ7DV7ax0royTm2mS5v5wNwVb0QgPQqoOWgVFgTZfROVM3Yqw/zN+XtjqFxNf2ccYuZw&#xA;frNpKWWCZiPtEpUo57mhB7iu+azWdmxynijtN22i7VniHAT6ftDx4XOkaTqU9tP5f+pXtmxilSe5&#xA;mIjrvsx5xqGG4odxmj1Pi/RMk8PR6XDisccJD172Ijf3/tWwaxov171r22mXi/qQ/VD66SAGqryU&#xA;Majp2zsOw+3sGDS+FL0EX05319/veM7c9mdTn1Piw/eCVdQCK9/T3K0rW8sRnGiKkxHFZPWPqiEy&#xA;c+AT7IJQ0pXOfPaeL8/49ejjuv8Afe+/V7/m7+PZGYaD8t4nq4SPL3Xzr+H3dOimmqeW7aGkQlnu&#xA;zKjcbgNbJGE+0ObBalgxWgzp+2u3tPn08oA8fEOVHn37jo8x2L7MazBqIzkPDEetxPwoE8/PZlXl&#xA;PS73zOvrWmjpbaaSVGpTTSGMlTQ+nHRHkofCi7U5Zxmm7Mll35Rew1muGDYzuXdQ+3uep+XvLmm6&#xA;DY/VbJSS7c5533klf+Zz+AHQDYZ0uDBHFHhi8vqdVPNLikmmXOOwP81NSEUOmWH+/ZmuZAO6QAKA&#xA;f9nKGH+rmz7LxcWS+4Oj7ezcOIR/nFjVrq2kpqmhW11dRwO8k7QiQhQ5CdATQVJkFB3zD9pRUYjv&#xA;P3L7LAkzI6R+8/2sy1q8Sz0u4nYFuK8VQdWZjxVR7sxAGciXroc3nw083FsLnUCJRcSGaO3/AGG2&#xA;p6rqftV2EYb7KAftVzr+w+yogeJkFnpfT9ryPb/bEifCxGh1I6/sek/lzZC38rw3FKNqEj3Z90kP&#xA;GE/8iUTDrJ8WQlzezMXBgiOp3+bJ8xnPeYfnBPLPe6fp7Dla29vcag8R3WSWPikXId+NWOTi7/sS&#xA;AAlPrsEi/K7TrY+WPrMsSSy3M8js7gM2xCdSP8nC52uyyGSgeSA0LQE82ec9Ruvit9Os3NrbeiTH&#xA;ycbcuS79uR+Yxtnm1JwYh1lzRPmC1i8meZLG41S4bVbMB4bVmAD27HizuFAoxoQPHG7Y4cv5nGeE&#xA;cJ+9m9tq2ltpsl6JI5LVo+a3PKioo3LfdgdfPFPiA5HueSXt5J5t8yS6k/KPRNNFVZthxXdR/rSN&#xA;uR/L8sLu8UPCiI/xF7D+UN1ez+SbRblSEhJjtmPeKgYD341pXMTDkMjK+QkQHmO1YxGc11Zrl7rX&#xA;zn/zkb5alsvNNl5ijQ/U9WhFrO4Gy3VtUpU+MkJ2/wCMZy7GejCQSv8ALv8AMbV/y8EMV3E+peSr&#xA;8iZkiHKexlk3kaIftIW3aP8A2S71BM4WiMqfR+geYtD8w6ZFqmi3sV/YTD4J4WqK91YfaVh3VgCO&#xA;+UkNj5r/ADXujdfnpfx1r9SXTbcddh6frkf8lcux8muXNOPJ0/o/nL5SFeP1mDUoeleVLf1aV/55&#xA;1xyckR5vom5uba1t5Lm6lSC3hUvLNKwREUblmZqAAe+UNryHzH+YWoeeriby35JZ49DasWreZqMo&#xA;dK0eKyOxPIVUy/8AAfzZYI1uWBPcp/l7olje/mGn6NjC6H5KtGtbd1Hwtf3SlHoR1Kw8w3zHjhmd&#xA;liN3s2VM3Yq7FXm3nzyJ5j1XXxrGnmFisQgEYADNGN6ScilSrVoeWaXtDRZMsrABH2u97N7Thhhw&#xA;FIl8q6qkCxap5VS9KbesgSVzU16Mo6f6+a38jmj0P49zny7QxyNxnw/j8dGl8rRlyY/Jkwcnb1Y4&#xA;1T8Gen3YPyebuP2qddHrlCGH5Z+aL0yrBplvpMM1VJQpVVbagI9Mjb/JOWQ7NzSNkfNme2sUBseI&#xA;/j8c3sOg2Eun6NZ2EgjDWsSxUhBWMBBRQoPgKZ0mGMowAlzeVz5OOZl3lH5a1OxVgoii1n8y7n1l&#xA;ElppNssTI4DRsxXkdjt1np/sc2UCcemJHOcvudJkiM2tAO8ccfv/ALXzv+bV7c33mCSWK2eHSYZH&#xA;W1YJSHlIeZVCBxBC8QR7Zqu28xOUYyfoiPmebu/ZnBEYpZRt4kj8ANgPvQnkvVdc1LWbPTbzVr1t&#xA;LiJlktTcTGIiIclXhypQtTMTszSDPnESNuZ+Dmduav8ALaaU4/Wdh7z+x61d30t6fq8DFrq6K28L&#xA;noJJSI02/wBZhneZAMcCe4Pl2GJyZAOpL260tobS1htYBxhgRYol8FQBVH3DOSJt9EjEAUFXAlhP&#xA;5m6ei2tnrpAZNNZortT3t7kqrf8AAuqfRXDxAc3bdk5qkcf8/wC8PNtF812vljQnsZhzaC4lWHuz&#xA;o1JFIUEdQ/WtMsp3+XS+JPiJQXk78y7DQbF7FrMsskjyNcUHKrvXl12IUAbYF1Og8U3aI1G4h85+&#xA;YbW5ZjFoWnj4nYMWlkJDOEFK/FRVqcaXHiOGBA3kUr1D6rNfX1m969rpKzB2gjVjzdgGdAwr9lt6&#xA;U6nAZxBolyQaA70w0qzbUriy0iytHh0lpkE0bVWScchyWleSqwHxMd6Zg5u0IgiEPVIuLqNQIRJB&#xA;9VPoaKGKGJYoUWOJAFSNAFVQOgAGwzKAp4wkk2V2FCVeaPLWleZdDutG1SMyWl0tCVNHR1PJJI27&#xA;OjAMD/DCDSkPnvWvKmt+RhJYa9CbzQSx+q63FGWt+DH7Nwo5ei3+t8JP2Se18ZgtRjSU6foi2d5+&#xA;l/KmrT6PdyULT2UlY3A3AkQ1Rx7ODhIBQCgb/wAl6rrGt3msa1rUtzeXzq908SJCZCiCNf7sJx+B&#xA;QPh2wgUtorQfKGv6Z5k0e90LWTDPp8rrpyXKetHF9ZQwOKHfjwelK0HYYJDZQWe6l5MudQK3f5je&#xA;aZdVhjIkXTyyW1kCvQ+hGI1aniVJ98gPJkfNrSNT1fXbZ/LnkG2T0EkkiufMJUrZ28ZY0Kmg9SUJ&#xA;QBV3+Q3CSBzUPXfJ/lPTPKugwaRp4LJHV7i4f+8nnf8AvJpD3Zj9woBsBlRNswE6wJdirsVdirsV&#xA;dirsVdirsVad1RGdzRVBLE9gNzirzPy9c3Ufk7XdejQm/wBYlZbeM9nnY8em4VHnNfAL7ZsNfnjh&#xA;EAeUI38e50nZmGWcZJDnklXuHf8Ab9iZ6Dodla6DFp8kaXETAmYSqGEjMaszKaj4jvnF5MsskjOX&#xA;1SNvVxxjGBCOwiKDCvOWkaNYa3afo+xt7MvFPzMESRciDD14AVzoPZc3qJf1P0h0XtQT+Vj/AFx9&#xA;0kT5CsPrvmyyUiqWoe7kFNiIwFX7pJEP0Z1PauThxV3vMdh4ePPf80W9mzmntHYqhtT0621Gwmsr&#xA;leUE68XA69agj3BFcry4xOJieRZ48hhISHMPCPOf5OeZbWYzaYpv7Rdo446llFa0CdR8unvlOPJk&#xA;xjhmOIfzh+kc3qNJ2vjkKnsWE/4M81+p6X6KuedacfTbL/zMO/7C7L85iq+IM48nflJ5umjkkui+&#xA;nRPSsTyPETTxCDlX/OuY+TLlntjHCO+X6B+t1uq7Xxx2ju9Csfyl0yC3ije7kBWvqCJVVTXfblyP&#xA;0nrmKeyxI3ORMurp59pyJumT6N5Y0bSPis4P3xFGnc8pCPmen0ZmYNJjxfSN3Dy6ieTmU1zJaHYq&#xA;7FWnRXUo4DKwIZSKgg9QRirz3zD+R/lDUHe70YSeXNTapFxp9FgZv+LLU/uWHjxCk+OTEyGJiHlW&#xA;qwaz5a18eX/Mixi5lUvp+owhlt7uMGlV5fYcftpXY+xUm6MrYEU3oJ8weY/MX6I8pxo1zZlZL7Vp&#xA;wTa2grVS3H7chI+BB1/1anGUgFAt6hpn5HeXDMLzzPeXXme/JDMbxvTtQ3+TaxEJx/yZC+UmZZ8L&#xA;0K1tbW0t47a1hS3t4lCRQxKERFHQKqgAD5ZBkq4q7FXYq7FXYqx+b8wPJMF0bWXWrRZ1biw9QcQf&#xA;AsPhH35HiDYMUu5P0dJEWSNg6OAyOpqCDuCCMk1t4q7FXYqo31ql5ZXFo7MiXEbxM6GjAOpUlT4i&#xA;u2EGjbGUbBDx250Dz15RvHM8c2veXiSUa0FHhJ6yG3WlWKihO9B0bcgw7ThPVAEHcdP2uP2bEaO4&#xA;kXEn6hv8x+pkemedvLE2nLJHqMAeNaPDI4jkUjb40fiy/SM5yWOUNpAgu8iRPeJsMJ826/pF3qWn&#xA;CC9t7ibnMJPTdXK80ruVJpUrTN57N3HUWRsQXS+0wB01DmJAs6/KbTyE1LUmH22S1ir4Rj1HI/1j&#xA;Io/2Ob7tbJeQR7nUdgYaxmf84/c9BzVO/dirsVdirsVdirsVdirsVdirsVdirsVY15/8h6R510P9&#xA;GagzQSxOJrK+iA9WCVduSV2IIJVlPUYQaQRav5J8l6N5O0CHRdKQ+khMk9xJQyzzP9uaVgBVmp9A&#xA;oBsMSbUBPsCXYq7FXYq7FWIfmB5r1fSfqGmaFCk2s6oziF5amOKKIAySN8uQp/Hoa8mThDfgxCXP&#xA;kGAeaPMX5h21paaPrd7BJY6xOlvPe2iGOZIyyh0Boi/Grfy9sxxnMgXKjhgDY6Mzg/Lby9HYi1Gn&#xA;2vDjQq0YZj85D8VffKKlzth4+7E/LvmPzNpt9q/lDy4sUsOnzk293es7rbJsHhULUtSSvCp8a5eM&#xA;xjHdlPFGXqKaWHnrzroWs2dt5rFve6VqEqwJqFsvAwyOaLyAC7ePw9Oh2pk8efiLCenjVxep5kuE&#xA;7FXYq7FUr1byr5b1c11PTLa7f/fkkSlx8npyH35ITIa54oS5hIX/ACe/Lp25HSaGtSFnuADt0oJP&#xA;1Zb+Yn3uOdBh/m/aWT6VpOn6TYR2GnwiC0hr6cYLNTkSxqzFmNSe5yqUjI2XJx44wHDEUEXkWbsV&#xA;dirsVdirsVdirsVdirsVdirTuiKXdgqjcsTQD6TiqUz+cPKduxSXWLJXGxT14yw+agk5YMUjyBaZ&#xA;anGOch80OfP3k8Ej9JxbeAcj7wuS/L5O4tX57D/OCrH528oSEAazZqxoAHmRDU9qOV39sicMx0LO&#xA;OqxHlKPzTW2u7W6j9S2mSeM9HjYOv3qTkCKbxIHkq4EuxV2KsE/M3zXrOnPpug6CRHq+sMwFywB9&#xA;GJKcmAIO5r1oaAHvTKss+EORp8QlueQYVq2g+cfLl1aeaze3Ov21qvG/juXZnELEGTgCX4xnrt9n&#xA;ruMxRLjG7lCUfpGzKPzASy80flxJqemN6qwKt/aOOo9KvqAjsVTmCPHCNi047jOiywaxbroP6Zfa&#xA;3Fr9can8np+ofwwNXDvTHPyr0Oax8vNqd4v+5LW5DfXLHrxkJaNfuPL5scJbM0rNdAlP5v61oVna&#xA;21hckvd3MsMjwwgNIsUcqs0lCVFSoZVqdzkYx9VtmCyCzbyp558u+aYpW0qZjLBT1raVeEqg9DTc&#xA;Ee4OZwkC4mTFKPNP8k1uxV2KuxV2KpJ5m826foMcSSI91qF0SLOwhoZZCOp32VB3Y/idsWzHjMvc&#xA;wq6/MbVUuOF7q+l6VJX/AHjVTcSJ/kyuZEFf9iMNd5cgYB3EpvZ+etRtoY7nUBbajpjEBr6w5KyL&#xA;05mMtKJBXrxYewPTEimBwg8tinsvnfyshot+s4pUtbJJcKK7/E0KuAd+hwNQxS7kdpWu6Pq0bSab&#xA;dx3IQ0kVD8aHwdDRl+kYsZQMeaOxYuxV2KuxV2KuxVh3mrzhdwXj6VpPFbhKLc3jANwZgCEjU/CX&#xA;oQSW2HSh3psdHovEHFL6XSdpdq+CeCG8/uY7caRaSj6zrVw9643L3UhdFP8AkhjRf9iBmfARG0Iu&#xA;iy5Zz3ySJ+5QOreW7ccIog6jske3/DUzIGLKfJxjkxjpa3/Emi/8sr/8BH/zVh/L5O/718aHc4a9&#xA;oEnwvblQepMa/wDGpOPgZB1R4uPuVLfTdBunNxpzCC5XcTW5aKUe9V4uPvymYI2mLbsc63hIgpzo&#xA;Xm3UtPvk0/VpjdWjuIlunp6sRYgIWYAc0NRudx1JPbC1Whjw8cPk7js/teXH4eX5s/zUvSOxV4t+&#xA;aPmu2g8/adLp9rJe3WhRSLfqteFJ1AChgGoVD7mnU0zGz0dnP00Dw79WZ+WfzG8p6+qW8FyLe8YB&#xA;TY3NI5CadFr8L/7E5VVNU8UggZNNi8r6rLb6XGk+kaurtc6MzFVhkIoZYzRgscn2WX/gdhQRlOmy&#xA;ETkG/TqibTy5rN35Tg0OaeEWCwxW5+BxJJDEVqnMOQOaLx5cfoycIyO6JyhGV72jdW1rWABpei2N&#xA;dYIo7TVFrbJ0ErSAfGp/YVRU9wKHBVHdgIDmTsgtB/L3RtJaXU9UlOpazLWS51S5NOLHqYwdkA+/&#xA;6NsEt9knMTy5Jf5L0uyn/MXUda0mWOSwSz9C8lgIMb3UkoNAVNCeEYZqd6eOW6YHqy1EvSA9LzKc&#xA;J2KuxV2KqF/e29hY3F7ctxt7WN5pW8ERSx/AYpAs0+c/OHm3UI3lu2bhrusKJZpFO9raH+5gjPYl&#xA;ep8N+rYLp2mPGOXQPPSSTU9cg5D0vylpV1o3le7vL5mjbUQrQ2rV2jj+IyMni3b2+eTqg485cUtu&#xA;j1/y95ftrLy7YW90tJ4reMTNyPwvxHIDtQHLRycGcyZGkm1XRI3MV/Y3AttWjqba7h2kSn7L9mVu&#xA;6tUYyjbbGXQ8kX5a/Mea8idNWsDA9q/oXVxA3qKHArzaKnNUb/J5U+jKwwyaeuRZvHJHLGksTh43&#xA;AZHUgqykVBBHUHFxl2KuxV2KuxV4/JrHl6PzZqa37TyaSbiT09SiHwCVjykBND8Mbll5dNvv3uCe&#xA;QYQIij5vIaqGE6qRmSYnu5g/pZPfeVNK8wWsT6Xq4kCAsgPGQGtPtceBH3ZVj1s8R9cObkz7KxZh&#xA;+6yfP8Aj5MM1fyrqulTiK5VaNUxyKSVYDrQ0zb4NVDKLi6PVaPJglUx+1LvqN1X7H01H9cv4g4q5&#xA;dOuD1Kj6cHEqMsrdrSZZ1kPqJWnYbim+Qn6hRZRJBsKN/qcJCtKXa1lkVLu8VeaxRO1Hk/yuK16Z&#xA;j5pVA8IvZydNAHIOI1u90R0kRXRg6OAyspqCDuCCM5V9BBbxVgFrokmiec9X1K8irZ6pKk8N8BVF&#xA;CoQY5T+wVc1BOx8a7DDzwPFfRzIzBhXVM7/SvI2vA/W4bC+ZtjKDGZPokQ8x9+QtgDKPex61tLSy&#xA;1O5tbZ3eCI8Lf1JHmKoApCB3LNQVNBXMeRuTnQ+gMx0/V7MWkaSv6bxqFIIO4G1RTMzHmjW7hZMM&#xA;r2SHV725uddt/wBH3q6e8qvC106LJSPiXrwcqtSyClfuymWQGbcMdY9xaDvvy10rUj6uva7f6lT4&#xA;uEk8ccA91jRQF+jJ8TWMpHIJV5P8snTPzIjfy3FKmgR2zpqkxZ2iZjz9NQzGjPy4EgdMswEndlnk&#xA;ODfm9bzKcF2KuxV2KsV/Mi5VdASyZuC6hcJDM46rDGDcTH5enCVPzxbsA9V9z5u+q6x5p124lsrd&#xA;5pZ5C9BssadFDMfhVVWgFcjRJdpYiN2e6F5I0by9xu9Udb/VF+JIB/cxHx36n3P3ZOhFolkMuXJO&#xA;NMWfXtU+tTfFY2rAlv2XkU1VF/yUO7e+3jjEWbYy9Irqy8u5XiWPHwrtlrQtJCgkmgG5OKsc8lal&#xA;BB5s1RJE5Q3kAlK0BIMb7dfETHKoc23NG4hMdJ8w6tpl/rKWaC50bTStzJYn7aRzcmk9BvFShbgQ&#xA;Qenw9cSObCeMEC+Zeh2Go2Go2qXdhcR3VtJ9mWJg6n2qO/tgcQxI2KIxQ7FWO+e9Yl03QXW2cx3t&#xA;84tLVx1UuCXce6RqzD3pmRpcPiZAHB7R1Pg4TLr0S3yR5XsBo7S3MCtFMvpQxsNliXao8CSOuZ+v&#xA;1RjMRga4XVdkaCM8ZyZBfH9zDb/QrD9ITnSVnjhDn05YiULf5RC/A3zIzZY/pHFQk6LNQmRjsw6W&#xA;sfSfM70K3bTU+z9ajDH71aLESjHkR8v1MSJS5g/P9a39EebK0pa08SGH4czj4/mPtXwfI/Y79B+Z&#xA;m/vJ40HhDGoP3vJJ+rHxR3/Yjwv6P2t/4fmU1uEluW8ZTzH/AAC0T/hcmJQ72JEu6l8kJ4lJE+Fh&#xA;Qqw6g9qHLbBatwzP8sdSc6fcaJKxZtMKm1Lbk2stfTWp6+mysny45zmvwcE7HIvZ9j6rxcVHnFmm&#xA;YLt0k826xdaXpgmtVLSvIivwHORIa/vZY46EuUXfoadaGlMhkkQNubbigCd+TzLVPOflwXBEeoCR&#xA;piBKVWR3d+n7x+Jr7VPTNaYzO5dlCNBWMjWztOv2NjJuAQRtyFfbrlVNgKNGunjShLf8Y3r91MNl&#xA;eEIQvNPMZ5djSiL1oD1JptipQ9p5m0JdTk0y4maSRdmtVhln5tStAI1fcZOOOXMNc+T0HyTqmpXK&#xA;3drqEckJhKS2UNzUXItpOSqZgSWBMkT05fFxpXNjiJqjzddmiLsMny1pdirsVdirzP8ANLXNNh1q&#xA;10++I9AWM5lUycKm6ZYwBTeoSJ+njkOPdzNPA8NjvYfH5iS3tBaaLZGG3X7KQJ6an3MklOR965Tk&#xA;1uOHOQcsYJHcpZY3MuqTn645jjRqPZoSCxU/Ervs3/A/flkJCQscllHhel6ZLYvaRpZqscMYCiFQ&#xA;F4e1BmVEguJIG90XhYpB5h1yGOB4InqDtK4/4iPnlc5dG2EEj8rXkUAvNWk+Ka4pFap24Kas5Pgz&#xA;bf7H3yMTTZkF7KC+YILHTtY1B35XF4whiWtOXAH4q+7SEfRgEqCTCyB3Mp/LvXLV9V0rTrMhUhsB&#xA;bXUwBCTtCihKHozjiSD4V8crOohxCN+pqz4ZcJke96llrgOxVgfnx4rnzNpFjMxEUVvPNQd5JHSN&#xA;K/Qrffmz7OBHFIPP9uSB4IHqynUilhowgh+EBVgjp4UofwGYuH95ks+9ztZIYdPwx/qsWzaPMuxV&#xA;2KuxVTle7QxyW3AshJaOSvFqigrSn2euDhB5pE5Roxr49VzlQn70ggAc2PQnud8Mb6IkR1U/LVzZ&#xA;x+bbf6sKC4imt3pspNBKCB7ekfvyvX45eGDLoXN7GyxGcxHUPQs0z1bFPzEsrxtNttUsam60mYXC&#xA;gGlU6ONuxGx9q5ha0EATH8P3OXpCLMT/ABJTq2pab5kt9JeO5kt/WlKx3cTATWt0EJCsjBlKsvNX&#xA;Vup45GOUSG+4ZDHKBKA8xeQ4Bo7y69ql1qw9SGKMKkVskZuJlh9bhEPiaISchyantkhwR5BMc0ia&#xA;GzofJfnVIVsRcaS1qkYhS8KXIn4BQoYxj4OdP8vB4MSbtP5gdxW6B5GSxnu9N0rUXM9iIluG1CEX&#xA;FvI7qXDRKkkTxHehFWHTvhlCElOeQ3I5on9F6V5d8wwX2ozxXOpXSSGe7SFLaKC2hUSM/EGR2ZnC&#xA;Jyd+h2p3bjEUGNymPJM/y/vLjV9U1rXXjMVtdNFDahhRvTiDUr7nly+nI6SXFKR6cviuqjwxjHqz&#xA;bM9wnYq7FXYqxrVfIWk6rq8mp3skrSuFRUTioVVAHGvEt79cwc2hjkkZSJ93Ry8erlCPCAERb+R/&#xA;K8KFRYq5IILSM7Hf5nY/LJR7Pwj+FjLWZT1eceePy7v9KnOq6QrXFsP76MfbCjff/V7N9B8cojjl&#xA;pz34/wDc/sc3FqBlFHaX3sdsdfQ7cmWVdmC/C4/1lNCMz4zBFhMsaKuPMAMZMs0jqOvNjT6anJWx&#xA;EGPya1YX1wRcXKx2kf2kDgFz/KKkHj4nvgZ8NJ1p9vrPmCQWeh2r+jQK1yVpGq/M0H8PftmPPP0i&#xA;OKX45notCO8jTKvLn5NXMcqTatdEensiqQ7ivXjQcFJ/m+I5RLT5c20zwx7g1y1sI/SLLPNH8m6H&#xA;pNwLm3jZ7hQQksrcitRQ0AoOntl2DQ48ZsDdxMuqnMUeSeZmOM7FXnvnRFTz5pMr/YltQu/T91cA&#xA;t/ydza9nn0THk892zH97jJ5X+lNfP93NBHYrE5Qs0jEDvxCj/jbD2XjEjK/JHtBkMRADz/QxWPWr&#xA;ldnVX9+h/DNodNHo86NRJGNrKKrhkRhyLRyKwqUNAq8eoI3JrmNHTyJcmWoFEUPf5dAs/Tlv/vt/&#xA;w/rln5Y97V+YHc2uqyyAmC1eQL1IqafOgOJwAcykZTLlElCSazdtsoWP5Cp/HLRp4tRzyQcs80pr&#xA;I5b5nLoxA5NJkTzTHyhV/Ndgq7mP1ZH9l9F0/W2YPaf9z8XbdhgnUDyBep5zr2jTKrKVYAqRQg7g&#xA;g4kKwTWPyl0m5umu9PnaznqHUAEgMp5LRlKtQEbVrmuloCP7uXD5cw58NbtUhaC1CD8wYrCbTryy&#xA;TU7aRDH6sTcHI7NyUP8AEDuPgGUnxo8437t/2tg8Emwa966z/MN7Ky+q6vZzR6rAoRoljajsB1FQ&#xA;AtfByv8AHI/mYjnt7+anSkmxyQGman5+iN08OhEXF/MZ3uXMpFCAka0MSiioB+34nvh8WR5Rn8ky&#xA;xY+sht5phZ/lrf6rdjVPMt2TctT/AEePcKoNQo3ZFof9Y++WR0mSf1nhHcP1sJauENoC/N6BZWVr&#xA;ZWsdraxiKCIURB/nuc2OPGICo7BwJzMjZ5q2TYuxV2KuxV2KuxV2KpPqfk7yrqbcr/Srad/5zGA3&#xA;/BLQ5V4Me6vdt9zbHPMcihbX8uvI9rKJYtGtuY3BdfUp8g5YYfCj+CUnUTPVMm8ueXmfm2l2jP15&#xA;GCMnb344PAx/zR8mPjT/AJx+aOiiiiQRxIsaDoigAD6BlgAGwYEk812FDsVdirsVYR+adk4sNP1m&#xA;MEnTZ+M5HaC5pG7f7FwjfRmd2fk4cld7qO2cHHhsc4u84XC6hoOmalGQUc0anQM67j6ChGZnZ8fD&#xA;yzgXXdrz8XBjyD8X/Yw7Nw847FXYqn9nqtlY6vwvIfUsYVKLGoDUPY0NAf8AM5qsmKU4WD6i7TDq&#xA;oYs1TFwHRL9WlguJRdQp6azM5VD1CBvhr9G2ZelBA4T0cXVTjM8URV38uiVXNykK77ufsrmWBbis&#xA;l/Kqxkn1DUNWevCJRaRt2Z3Ikl/4ELH95zSdrZrIgOj1Hs/p6Esh67PSc070bsVdirsVU3t7d3WR&#xA;4kaRfsuVBI+RORMQTdJEiqZJDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUby0t720m&#xA;tLlBJb3CNFNGejI44sPuOEGjaJRBFF5fAt7o0eoeT9RJkNPrOjXLdJQpqAP8pwOLDs/+sM3eHIMh&#xA;jkH1DaXu7/g8rqMJxRngl9MvVA+fd8fv96SxX8D/AGjwPgen35tzF59XV0b7LA/I1wK3iqq+rKtu&#xA;sE/pyohqoavIbU/ZIP35SdOCbGzd454eEgEJddas8h+AbgUBIAAA8FGXwxgNUpE80HBb32oXsNlZ&#xA;r61/dtxhVugpuzv4Ig3b+tMhqM4xQst+l00s0xEPcPL+i22iaPbabbkssC/HIftSSMeTyN7sxJzk&#xA;skzORJ6vfYMIxwERyCYZBtdirGNc84zW872ekWq3lzGeMtxKxjto2HVagM0jDuFFB0LA4qwbVvzk&#xA;utPuZbS7voY7mAgSx2unNOASASBJLewg9d/hxVJbn892+PhqVyDyqlLO0ioPA8pZ8iZxHVmMcjyB&#xA;S+6/PuSr/wCn6gyGnFUl0+Kn+yFlMfxyBzQ72Y0+Q9Cltx+fsnLks96xAAAe8UiniRFbQ1OR/MQ7&#xA;2Q0mTuS28/P+7hi5ETMrdA97f1P/ACKuIT91BgGpieVsjo5jnSbeQfzG80edNcsLCxV7dZbjj6r3&#xA;F7K0caDnLIPWupQeK1pU9dsthLiaMkOE0+mAAAAOg23NT95ybB2KuxV2KuxV2KpNqPm/QbC9NhLc&#xA;epfCnO2iHN15dOQHSvh1zD1GvxYjUju5mHQ5ckeID095Y35n/NrStKu4rK2jeSWRQ8k0sbqkYJpT&#xA;geDt0PTbMTUdqAD92OL3/j9Tm6XseUwTM17kY/nLVJdCnvtMt4dSn9MvbiLmqmnitZCaeFR4ZXDt&#xA;OZifTZ8v1MToIDIIyJiPP8BhXlv80b7Ur5FvL2SGSQUjKemYyflx4/hmvOuzxlZlt7h+p2ubszEI&#xA;emIPz/WiPzQ8w+btOWxnaUJpM/7hkUFQ0pqR6pB/aA26CvbpmRq8uacQJekeW1tHZuLBZ29fn+h3&#xA;kPXE1JDHaSzWuoIauqOeLeBKn4GHzGYWmlkjKoyPF7+fwb9fiAFyAMfczW589QadMLTU7aRbpQCz&#xA;R8ODA9GQFgd/Dx2zbz7XGM8OSJ4vLk6iHZZyDihIcPmmuk+ZtH1RvTtpqT0r6Eg4v9HY/QczNN2h&#xA;izbRO/cebi6jQ5cW8ht3ppma4iVeY/LWm69ZC3vFKyRkvbXKbSRPSnJD+sHY98txZpY5XFo1Omhm&#xA;jwyDx/zJoWoeXJ0TVCggmYrb3qmkUhArQ1NUanZvoJzo9Lr4ZBR2Lxut7MyYD3xS8Gu4zPdY3Unr&#xA;irWKojRtPvdbvmsdJRbi4jAM7FgscSk05SNv37AE+2Ymo1sMQ7y52k0GTOaA2eu+UvJtj5egdw31&#xA;nUZwBc3jChIH7Ea78Iwe1fmTnN6jUyyysvZaPRQwRqPPvZBmO5jsVY5+YPmq28seVb7VpyQIYzxC&#xA;GjEnYKp7MxIUe5yMpULZRiSaD5s8seYdb80eaDqusT+lpekKbwWSsyW0bKeNvGKbFvUYHk25oe22&#xA;YWOZyT8g7DNjjix0PqLDPOFw765eRTXPKaKaQSyBW+N+Z5MO2598hqZ3Ku5u0eMRhfUpCfS/akdh&#xA;7cf4tlG7lbNH6t25H5mn6g2O6NmuVv8AyEe5Yn+C40VsJLNJLd3IoKs5CxoPfYAZkxjQpw5ys2+x&#xA;P+cd/LVtYeWoL14kFwIWggkAIYxmZjK1a/EGkQdtqZnRFCnWTlZt6/kmLsVdirsVSHXPNttp9/Dp&#xA;VrF9c1acArbhuCRqejzSUbgvyBPtmJqNZHGRHnIuZp9FLJEzO0B1/UxTz/B5qNgdTlvbd7W0AZ9M&#xA;SN0RhXc82dubjoPhHyzWdojJONk0O4fjd2fZs8IlwiJs9fxyYZ+YWh6dp+naPrmnVtb67k43MKse&#xA;8ZcOo6goyge9cwjCHhxN7l2OjzTlklA7xCafmZFBffldZ3zgLrNolvPC9KOJSoEqnxDgmo+ntmRK&#xA;ePw4gc3D00Zx1Eq5b/sTD8npGtdBupLolIJZi8BbpxVQGI9q/qwaPLGF8Se1o8UwI83mUdrLceeb&#xA;xbBKxXOoGa2j7Lycs/yG1TmJOQkLdtAcGP1Hp+h6l+dF7Yz+Qbu0JDS3LIIh3DIedfmOObHUaiJE&#xA;QOduh7OwS8Q9wBYp+Tdrcx6o1/MD6MMQilfsZGHb5dcwsMxHKD0Ds+0zeLh/iKXf85C60HvrT6jK&#xA;VktECySL39Qk8TXw2zIyZI5Mm24pp0GOWPCTysvMtC/MPzBpdxHIJjIiMDToRTwpQZXPTRO42Lk+&#xA;MTtLcPr/AMj+ZYvMvlXT9Zj63Mf7weEiEq/4jOg02Qzxgnn1eV1eEY8hiOXT3J7l7jJL5r8p6X5m&#xA;036lfhlMbCS3uIyBJFIOjLWoPuDlmLKYGw0ajTxyx4ZPOr/8rdetCRBbxX6dVls5fqkjHxeF2WKp&#xA;/wBc5tsXaMP4gR7nnc/YmUH0ESHmljeTfMYk4fo3Ugx6CtuV/wCCFR+OZX57F/OLhfyXqP5gRVp+&#xA;V3mW+f8AfWq2cR+017P6u3/GKEyKfkeOU5O0sQ5XL3uTh7Fzn6qj970byf5I0zyzFM0LG4vrrj9Z&#xA;u2AWoT7KIg2RB4bnxJzUZ9RLIbL0Wk0ccEaG572RZQ5bsVdirxv/AJyZmk/whDADSNp4S48Rz5f8&#xA;SjGY+pPoLk6MfvA8fgrofkmBPs3usSfXpxQhhbwkpboQeoZ+Tj6MrwDgxmRbtSTkyiI9362Ledon&#xA;fzNeTklFueFwnrGNXpMivuFNBu3z8d8xZndzsQ9I5JGYkBo0qj5Bj+oZG/Js4fNorADu7N/qqP4k&#xA;Y2VoOZYmBRFZmYEAkgUJHsDjug10Rn5a+V7zzD5rtLC3WsjSKikioVmNOR9kALH5ZnYo2XW55VGn&#xA;3VpmnWukmz060XjawWohiWlTSIgAlveu/vmU4KYTXVtBT1pUir05sFr9+V5M0IfUQPeaZxhKXIEr&#xA;1ZWUMpDKdwRuDkwQRYYkU3hQ7FXnXn7yrrsmtfpzSFLMY0SVYlqxKVpyQUZvZhv26Zo+09HOcuMC&#xA;/dzd12drowhwS5Mbj1LWby/srDWuNvYvKDcO9VBCAsoaqLReYHfNQIyupHbzdleMAyxj1VsgoHfz&#xA;V58htphTTrMyG3jaoRxEd2368mp9GThHjkAOrbIjBgJH1dfig/O2uHWNbh0K2cLbxyiNmB+1JUKT&#xA;8lrkCevc26TD4cOI8yyDzpq0fl3RIdLs19OeVPSiXukaChY+5yc4n6XE0ePxZmZQH5YaREtpda1K&#xA;OUlSiueiIN2avucYi7PQNvaOU2IDqxnzZ5gl8wauscP+8kbelap/NyNOZ/1sjfUuZpsAxx8+r0Ga&#xA;W18o+U4WCb+mDEp6ySuKk/59skQREd8nVgHPmPcHgXnzVpboj1353FzIZZD7DYfr/DL9NCnY6ggR&#xA;EQkGl+X9V1OZY7aBiD1kYEKB41OXzyRjzcUQPM7B9iflR5fk0HyLp2nyijqHkaooTzYtU/Pr8s2+&#xA;iB8ME9XnNfkEsprlyZJq2qWWlaZdalfSelZ2cbTTyUJIRBU0A3J8AMypEAWXEjEk0GDf8r6/Lb/l&#xA;tuP+kS4/5ozH/N4+9yfyWXuZj5e8xaP5h0uPVNIuBcWchZQ1CrKymjK6MAysPAjL4TEhYaJwMTR5&#xA;plkmDsVdirsVdirsVYZ+aXla18w+X3s7lmSGSivKtOSMrCSN9/Bl3yGSPEKZ45mMgQ+YPO96NSv5&#xA;BaR/6EpWG1jH2VggASJd/YVyjUCXCIxDk6SURIykUs8w6W08ek3IeNWlsYkl4kkl4CYan34xgf51&#xA;NJwTNbORHUwF79UsTQiersf9VT/xsFyQ0su8IOtj0BZZoP5P+YdWt47pLf6vZy7xXF3IsIYfzKi+&#xA;pIy+6oRlOeWHD/eTEVhqMk/pj+Psd5l/LTU/LES3N9FFLYlggvrcvPEHPRWIEbIx7B1Fe2TxT084&#xA;8UZcQYmee6qj+O9nX5R+UfNGlcfMOk6ZCt2SZLeG9KQm6gmQLIUDH1EKgBkfYEM3XMjHmxg8INH8&#xA;fFxssJnc7vX285fW4ImktZdJ1WMyA2t1QNxpxLoP2lNRxZgBlPaWeeLBKUB6gPexwQiZgS5Je3xu&#xA;Xcl5G3Z23Y/MnPLcuaeSRlIkku/GwockVp2pXOnyhoTyiJ/eW5Pwt8v5W982XZna+TSy53DqGrNg&#xA;jkG/PvZpa3MN1bpPC3KNxUH9YPuM9KwZ45YCcDcS6LJAwNHmq5awdiqF1PS7HU7U2t7EJYSQ1KkE&#xA;EdCCKEZXlwxyRqQsM8eSUDYY7qH5daRJDH+jXawuoixWcFnJDChBqwP3HMDN2XjkKj6S5mLtCcTv&#xA;uEgn/Jm2Vkvre6Q6rC3qRzGPh8VeVOYZm6+NflmOeySI0JbuUO1yZbjZAax+WnmfzLqBuNWKQkJ6&#xA;fMSAAr7enzYfhlEez88pEyr4/sb49p48cOGCmvk/zXoGkXGg2kL3NncAqJ4iXPEilDQA/eMpzaLP&#xA;AkDlLubIa/DMicvqillt+S2uLBFqPOl5D8SWxkCsdwd1px7d3y3+Tsxgdh7urKXbMOPyb1/QvNOv&#xA;LZ2TWlwrWx4BWjcKFAp1IA+k5hw0+cmiCaFBvx6zBjsjqn9j+SNn6EL3VyizhR6i+l6hB8OZcV+7&#xA;NpDsmRG8q+H7XW5O2ZWaDKNE/Lny9pbLJ6ZuZV3X1ABGD4hFAH31zLw9m44Gz6j5uDm1+SfkynNg&#xA;4Tz788tQNv5HNippJq13BaLTrxDes/0cYSD88xNdk4cRLm9n4+LKHiWoR20FhNIsSKQhAIUbV+H+&#xA;OcrjJMhu9dMARL0L/nGO0u/0br+oPI31Se5ihiir8IljQvI1PErKgzqNEPSXlO0JAyD2zM117sVd&#xA;irsVdiq2WSOKNpJGCogLMx6ADIzmIgyJoBMYkmg8986as+oabdiQutiEKrAhozBvhJah3J8O2cX/&#xA;ACzPU6yEYbYxL5+92x08ceI9ZV+KeO6r5N8tXrerok8VpPI0nC0uXMka8ZGQI8rf3UnwioYle/Je&#xA;mdrd8nU1R3RvlzyTdziytPMgNtDp809bZWCrMsoR4wpHxBCQxZga+B3qun7T12TTY+OrN15Ow0+D&#xA;HkNDu+LNb/yJ5Qdobr9ExRvakTR+lJKInC7ASozyJIvIjbqTsTSozQR7c1MgeKIG1g71+kH9fNzM&#xA;ekhdD9H4DI5I2htY7mdl/ehakGu5G34ZyUtSc2WV2ZebfEgy4Yjkll/f2YjIco0LDjOJVVomjPVH&#xA;V/hYexzYaLJlxTuJo/P7G8YbHq5KumeftFtJSLVjdXB3l9ENcySEnv6Qen6/fN7ohq4T4seORvmZ&#xA;fxfPYD3b+br9THGdpTHw6Ma/MKz8wamzTadbzWt4CDDe3npWkclvKOTRym5eLs3SmzAju2bzR4NX&#xA;DIeIjgPfz+zb3/i8fLl05gNjxeSF8nDzRaT21rd6zp1zbTP6S24kluWDAAkRyW0UqDiCOrUAwa/s&#xA;HDqPUPRPvH6R/Y4+LVyhtzi9EmubeS3RUj4vsTt02zy+GGUZmzYdpCMrso3y5qP1a8+rOf3FyaL4&#xA;LL2/4Lp86Z2Hs12j4eTwZH0y5e/9rTrcPFHiHOP3fsZbneumdirsVdirsVQ8d/bSXstmrVmhVXce&#xA;zV/pkzAiNtYyAyMeqIyDY7FXYq7FXYqp3Nzb2tvLc3Miw28CNJNK5CqqKKszE9ABiSkC3zX5z/MC&#xA;985ebbdY0MGhWKyS6fAwo78vh9d+4L9l7D6c5/tHU8cSByt6Ps3SeHIE8yEg80zenpbDu7AZrdKL&#xA;m7TUmovQf+cZ9UMJ1XRpTQ3EceoWwPcBjFKfxjzotDku4vN9o4q4ZKX5iebfNd75z1LTrbU7nSrL&#xA;SnSKCG1keFnJQOZJGQqW5ctgTSlPeuH2hrZwnQczs7Q454+I7lCN+ffnLTtPj0kWltdapbgiXVLo&#xA;sRIhPwH0o/T+IL1PLfwy3H2iTAHq1ZOyxxnfZJpfzt/M+Ryy6jbwg/sR20RUf8GGP44Dr5sx2bBM&#xA;NL/5yC892UifpGCy1OCoDjg0Ex7fC6EoPpQ5OGvPUNc+zI9C9+8ua7aa9oVjrFpUW97Esqo32lJ2&#xA;ZG91YFTmzhISFh084GJIKVeaNRZ7qLS4TUmkkwHUmvwJ9+/3ZyntJrJGtPDcy519g/Hk7PQYaich&#xA;+H6SxbzVG9rolzKlyqXEQVgsdWIYOtPjHwgj2JzU9kaSENVASmOO/pG/TqeXyJbdRkvGaGzw7zT+&#xA;jbDUE1by9qzXS6i8kl7bTEGWK4BBkWVduSszHg9P6nrcuTglxQPNlhw+JDhnGq5FO/KvnuwuU/Rm&#xA;t1FsyP6EDElfWp8HozAq8BZupB+YbMrHqYZBwyDg59FPEeKO4Z9quuaf5f09dPnv5rmAw/WjAUge&#xA;QkzPACLn1FDsnp7Ui6bnqRmNLsjAYmO4gTddL7+/7UDXZLvnLvYZqn5l6DHL6dtHNfxoFKST3kvG&#xA;pAJHCzS06HbrlePs/RY9xGN+e7bx6qff9yRT/mZMpL2mnWVsw6SLaRSuPlJdevIPnWuZUdTihtEf&#xA;IUj8jmnvI/MpbN+afma/UwR6rM0SdYY52WMDp/dxcVwT1pH8LZj7OB/i+SUzavqMzcnl+LxpU/ex&#xA;bKJa6Z5bOTHs3GOdln3lTylr+mX2ia1qk8Ztbm5hSKyMkgmR53XhIyKgQUAqVLV7HMzAMn1SPR1+&#xA;qOEemA3t69nkrt19zBJbqDIeHdXB6Eb1+YwYM9yuHMMYSEuTM9P1KG50uG+d1RGSsjE0VWGzbn3z&#xA;13Q6jx8UZjqPt6uh1GPw5mJ6IuOWKVA8bq6HoykEH6RmURTSDa7Al2KqF9dC2t2k6t0QeLHpk8cO&#xA;I015cnDG2FaVcznzXeotWlWMOvu0dCwPzDNmfkA4B3OuxXxHvZzBMk0SypuriozXSjRp2cZCQsL8&#xA;DJ2KrZZookLyusaDqzEKPvOEC0Egc21ZXUOhDKwqrDcEHoQcCQXk355+YmK2fliOThBOn17VjWlb&#xA;eNqRRn2eRST/AKuaztPUGEeEc5O27K0wnPiPKLxrRryO+1y8uI1KxrEkcVe61O//AAuaPNAxxgHv&#xA;d/hmJTJHcp+dJONtAviWJ+imHRDco1h2DIPLWpyeXL7R9ctwZBpwVbmNP92WzrwmUeJoeS++WaTU&#xA;8GazyJatZpvEw0OYCj+Y35laHrHm06to1tLFbNAkFzJOApleNjxk4Akj4SFqTXboMztdGOY7ODoD&#xA;LDGpMD8yatefW0uEovqgio3G1Nsq0+IVTfqcsrsJN+mb+v8AeZkeDFxvHkjtL1S4ubpIZqMNyCBT&#xA;cA5XlxACw3YspkaL6n/IC8M/kIwVqtlezwqK9OYWcj75jmy0RvGHT9oRrKUz16FbLWpGWX1Li9+L&#xA;kdjFHQgqP9alPl885Htsfl8kiDc8n+xHL7eXu97sdJLxMQ2qMftP4+1I9cs3vdNktEJV52jQEI8h&#xA;H7xSfhQMx2HYZrfZ4XrIf53+5LDWf3R/HV4T578l3nlK8tlMkl5YXsfrQCWJoLqId43WTqVr3P8A&#xA;TOx1GERPvb9JqTOO+9fj4u8i6voNnezG/wBPTUxdJ6Fs7ryNvMTVXKsVKmtN+o+nHSyEZ1Ic0a6M&#xA;pY7idhzZf5xMWqatY2EMEVu15a20FuauRB6sjMO5JH7zv2zcyFh0ETRBY1508hW3lWxtZTq8d3PM&#xA;3A2/pmJqAfaSrOWHjUDNPn03ALt3+l1niGqqnn+vm4bTW9FWK8h6pAP2N67/ADpleCuLdt1N8GyU&#xA;+X4JBdC5LCKBAQ0jsFU1HSpy/ORVdXG0sTxXyDIzeWg29ZWP/FQeT/iIpmJwHuc/xI9/6WYeQdZ1&#xA;K+8yadZzXF3PaQSIyQSs3pDgagqhZqcQOtNsy8EyIyMjcRE7W6zXxhtQok9z6CnZZ4+EMa20w/um&#xA;Ulgx7I/Mt17N49fbhYywZ/SIDHL+GiaPkb+w/PyyoAxNk8Q/HKvuSO4u7qeizyM/DYA9sxYYYwuh&#xA;TnwxxjyDL/Id0stpdWMm4Q81U91cUYfh+Odp7Nai4Sh/NNj4uk7XxeoS79lGXy08eoSrYTC2uftR&#xA;qSypIo3pyQq6H/VztfGBiCRYeWGEiRiDRbXWNUsJBDfyzWTk0Q3AWe3Y+0oAb72weHGW43ZeLOGx&#xA;TeLWNRChnghuUO4eFyhI9lYMv/D5ScI720ag9QpS3bX06ycGjiiHwxtSvI9a8Sw+45bGHAPMtM8n&#xA;HLyCW6Db087ahJTYW4I69W9P+hxzn92Pey04/eH3J5PdNpkzqIXmimPOFI+NQx+0PiKimVCPGPMN&#xA;pn4cq6FCz65q3AyCC3s4l6yXEhcj5qnFf+HwjBHvtjLUnoKQMMuvasf9Gu5WgPW5VRbwf7HZpX+g&#xA;098mRCHMb/NjE5J8jsiofL1it7HExa6uE/eXFxMS5A7KvItSvzr74PFPDfLuT4IMhHn3sjzEc18z&#xA;/nBLd3/5nanpdGWKlqrv/wAUJbpIQNuheVvpzRdomp8R6DZ6HswXjER1O7H7BIovMF5FFQIIIQFX&#xA;ooWopmqyEnGCe8u3gAMhA7glvnQlpLaIdWG30mmX6LkS06zoFPQ9aexkNhfgrHWgLdUJ8fY4c+Hj&#xA;HFFjhzcPpklnm3yzLBIb+yBktJPidVNeBPcf5OX6TUg+mXNo1emI9UeSXA/XtFI6zW2/0D+zLvpn&#xA;72r68fmElzJcRNdDhKu924pHGpCnxY5RmPRycEf4n1N/zjraPB5CnlcEG61CaWp70jiiNP8AZRHN&#xA;hox6HVa8/vPgtv7u9v8AU2mcEXLuFEfTiRsF3ziO0oZMuYyI+rb9FO50koRx8Pcjkv2d2toGpBGt&#xA;JZF2Mrdyf8nwH09c1+fN4UfDxGh1PWX7O4fE7qcVeo8/u/ap39hY6jYyafqEIubGYUkgbpWlOaH9&#xA;hx+yw3Hy2yOi7SyYJc+KHWP45HzYSje42Pe8aj8gaHputatDqOotHqWmPDLpCJwX61C55qXBIJ+G&#xA;lVWvFq1zvNFwTqQNjYhxtXnlwbDmCCo+fZpRduVIVorG0CGlf+PSNt9/8rNpm+g+51Wn+uPvYFw1&#xA;Bvie5MfMcqRoi1B71ILfjmiNdz0w4u/5Kc1sPSZ5HlnKgkIzsQT4UrTfCJb7UEShtvZS/QrW7hEi&#xA;3MX7tiGWtDRunTLc8geRaNNCQuxsnS8AwB2FdwOtPbKALcokB695YuvKF9rOmW+g6a9kbQNJPcvC&#xA;eUtYyoDyFmbrX/JrSnXM3U8MdNkMQY+iX3OhmZnJHikJb9HpRAIIPQ9c8vDtkuNpdX1yxtY2nkI5&#xA;SBByNa0LGnid/pzf4dHk1Pqj8ff1/WznqY4hRZT5O0LUbK5lurpPSV4/TSMkFjVga7dPs51HY/Zk&#xA;sEjKXUU6jXazxQAE61iB/TS6i2lgNaj+X+zOlwy3o8i6XUwNcQ5hEwvb31oOaLJHIKSRsAw9wQcr&#xA;lExLbCQnG0luvKXpF5dGuWsnapNu1XgYn/JO6/MZdHUfzhbRPSj+E0lv6Su9LIg1a0aBa0F1H8cL&#xA;H/W7fI5kUJ7xLjEShsQrWGqaba6reahJMvoyW8QRwQank9QP+ByOTHKUQPNliyxjIk9ylP5g1LXJ&#xA;fq+j2nNEapuZPhjU+JJ/VjHHHHvIplkll2ATSy8rQh1udXn+v3I3CPtAh/yY+h+Z+7KJ5ydo7Bvh&#xA;pwN5blNri9treFm5KeI+FAep7DbK44yS2zyxiFumQPHCZZd5pzzc/PoMOWVmhyCMECBZ5lF5U3Pn&#xA;v89OGjedJNSVKyajYQ+kadZI3eNq/JQhzS9p4TKce533ZWYRxy73nGhJLaal6tyxMl1atO9ev2uX&#xA;6s12ciUaHQ07PADGVnqLUfNMzTT2ckYqzRoVA33JrsMlpY0CGOpNkK6XGna9EsV0RbaiopHKOjf1&#xA;+X3ZExliNjeLISjlFHaSEP6e0UlGUtbd9ucRH8Ppyz93l9/2sP3mP3IBJ7Rrr1IoRCZjxlRfsEno&#xA;R9OWmJqibpqEo3YFWg30zToZW9QO5rUJUBaHp4HLBkkRs1nFEHdMLeGWZ41EXFQQILdRuzHoAPnl&#xA;fWhuS2dLOwD7F8k+XV8u+VdN0YUMlrCPXYdGmcmSZh7GRmIzf44cMQHmsuTjkZd6TeeUWG6t5Y4l&#xA;RpI5AZQoBYmgNT3opzn+3gRG4jcg/t+xz+zqMvUx/TGAkdfEV+7OFzDZ3ecbJjmO4zDfN2hQXuva&#xA;VqluSdaspkgtIOIZJkarhWLHiOLsTv453PszkE8fCecOXuP7fvcHX3CO3KX3j9jF9Y1O6sPMv6Yj&#xA;t3udTtmUNbRrwiJgtkVuLAGhU1JAXbOqmSBs6uABNE0GP+b/ADRr/m2W3e9gjgS3BEas3N/i/wAs&#xA;8mp7bDMHLhyZTvQdlg1GLCDRMiUssvKmpXVDHHLKD3ijNP8AgjUZUdNjh9cmR7RmfpiyDT/yv1a4&#xA;ZVNuFY9BI5Yn/Yx8v1ZHxtPHkDItUs2eXM0yax/KGSKRUupfQLUqioIqV8S1T/wuY2btvHinwUIS&#xA;8/00GA00piyTJnNn+VFzpiQXFq4nuIFKxD1Wqqmp2rwQ7se2X6vT6nLjI4hR6Du+LHDkxQlZHzRZ&#xA;8ueZpTwa3ah61dAP+JZz0fZ3JfL7v1ux/lHGOQZH5Y8sTabK11cuDOylFjTcKCQTU9ztnRdl9l/l&#xA;rJO5ddq9Z4vRkebhwnEAggioOxGKpB6bWl3Jb1IH2oj7HM2+KNutMeCRCKS8uF/bqPffIGALaMsg&#xA;q/Xw6FJog6MKMOxB8Qa5Dwu4sxn7wkGp+UdEuyZLNzYzVrwK8oif9X9n6D9GXQzTjz3aZ4scuWzU&#xA;eo6lpkawX9rwtk+FLmzq8FPdRuv3ZLhjLcc/NiZSjseXlyTC3ure5jEsEiyof2lNfvyJFKDa63h+&#xA;t3qod4ofik9z4Yzlwx8ynHDjnXQJ9mE7F2KvHv8AnJDQlutH0XVaV+p3f1aan++roA8ifZogB/rZ&#xA;g68ei3Y9my9fD3vIPMkbR3NrcJtVXhNPAitM57TGwQ9JnFEFJLmcJPZyyfYhkWtOvEMDmVGNggdX&#xA;HnKiCnV9o2nauhutPlVJzu1Pssf8odQffMWGaWPaQ2cieGOTePNLTdeZ9N/dyc2jGw5ASLT2Jqcv&#xA;4cU+TTxZYc0JNePdMFezRJH2EoThQ9a7AZZGHD1azPi6MjXyxbPGryyOtxT7SGgHtTvmEdUQduTm&#xA;flwefNPfyi8oSXf5iW63LK8emf6azORVwh/dcVPg9Cae2bPRHjmKdT2heOBB6vp7N888g9V0q11K&#xA;1NvcD3Rx9pW8RlOfBHLGizhMxNhhF55V1qwm9SGP6zGv2Xi3JHun2vuzldZ2ETdD5fqdri7QsUft&#xA;Q3p62x4rZyBjttE9fxzXR7C334j8Gw6qPl80fZ+RLnUInbUz6Ctuiihk5dm2Pw0+/Oi7P7Lli3Ho&#xA;+/4uFqNUJbc0tX8mazvJNfNIrM7BObqo5gK1FQL1UUO+bOcM55GIcYHGOhTSw/KbR7UggxrTukI5&#xA;f8GxY5SdDOX1TLPx4jlFMbvybDAkZsUM7g/H6rAn2oDxSn0ZrO0uzc4jH8vuet1f27N2HUxJPGnm&#xA;j2s1vZqk0UcUtTURqq7dq8QBX5ZtOy4Zo4QMwAn5V9tbfJxs8omXp5IqS2tpHDyRI7r9lmUEj5E5&#xA;lZNNimRKUYyI6kAtYnICgVTL2LsVdirsVafnwb06c6Hhy6V7VpgPkkPP7zUvOdq7/pPTXuirkxz2&#xA;4oqqR9mqK+3+tvmtx63U4b44cX48nLy6LBmrhlwkJZP51ug3BreW3bvVwT9zIMI7ernj+39jA9iX&#xA;yn9n7UM/miaX7d9dRjvwjjP6nTLo+0GPrD7Ws9hz6T+xSGuANy/Sl9X/AFAf+Z+S/wBEOL+YfsY/&#xA;yHk/nq6eaZI9hfXMo7h4ox+PqMcifaDH0gfmkdhz6zbh8yRySVi0+SSf/fsUnBz8wqNX6ch/ogJ2&#xA;GP7f2M/5CA5z+z9qf6Veecp7m3+o6e1nbA1uWu6UkBPUkrG2w6cRkZavU5pgxjwx82zHpcGGJBlx&#xA;Es7zYuI7FUk86+XI/MXlm+0l+s6VjPSjqeS0PbcZRqcZnAgc27T5OCYL5i1nT9dghfTr+wme4t3H&#xA;CeJC4YoafEqgspI61zmowEZ2DXkXqfzAlGix2+srk+kHt5QvL4iY3H8MyIFqmQaQyx3drJztpCGH&#xA;vwYfQaZM1LmGIJjyKLi8z6yKpzD8dmBUH7zlR0sGwaqTT3uoXXF5bdREh5O6R0NKEVJUdBXeuEY4&#xA;x5FByk86ZlZXcd1AsikcqfGvcHNZOBiadlCVhX8veZU0Pz5pV+GpEji2vKf76nPBgf8AVqGzP0Mz&#xA;A8Xm6/tHGJxIfUAIIqNwehzqXknYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0yI4oyhh4EVw&#xA;EWtod9L0xxR7SFh1oY0P8MgcUD0HyZjJLvKz9DaP/wAsNv8A8ik/pg8DH/NHyT4s+8/NUTTdOjpw&#xA;tYUpuOMain3DCMUByAQckj1Kuqqo4qAoHQDYZYAwbxV2KuxV2Koa70vTLw1u7SGdqUDSRqxHyJGV&#xA;zwwl9QBZxySjyJCCfyn5beldOgFPBeP6qZUdHiP8IbBqcn84rD5O8sEg/o+Ko/1qfrwfkcP80J/N&#xA;ZO9evlLy0pqNOh+la/rwjRYf5oQdTk/nFbqflPQ73SrvTxZQRJdRNGWSNVI5CgNQAcZ6WBiQAB8F&#xA;hqJiQJJL5wufyp/MCyvXtV0uaYIxVLqL4kZezEr+OaeeCYNGJ+Vu+hrMZF2y/wAm/kVqj3kF7rzi&#xA;CKJhIIF3JZTUHxO/jSngctxaKc+fpj9ri5+0IgVHcvd1UKoUbACgHsM3gdI//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>293.640108</stDim:w>
            <stDim:h>277.960316</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -671.7 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 671.7 li
719.703 671.7 li
719.703 0 li
cp
clp
625.929 58.3132 mo
638.058 58.5403 li
647.574 198.32 li
611.184 197.638 li
625.929 58.3132 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0431373 .0901961 .156863 rgb
f
627.979 58.3513 mo
636.009 58.5022 li
642.547 198.226 li
616.212 197.733 li
627.979 58.3513 li
cp
.32549 .364706 .423529 rgb
f
631.721 58.4216 mo
635.261 58.488 li
641.177 198.2 li
625.814 197.912 li
631.721 58.4216 li
cp
.576471 .615686 .67451 rgb
f
546.393 120.569 mo
543.598 120.341 539.946 161.795 558.209 183.955 cv
576.471 206.116 602.288 206.503 613.129 217.357 cv
623.969 228.212 624.841 234.502 628.807 234.501 cv
632.158 234.501 634.258 228.405 645.497 217.964 cv
656.736 207.523 680.798 208.582 699.877 187.12 cv
718.956 165.659 718.178 124.002 715.787 124.509 cv
712.93 125.115 704.968 150.906 692.599 163.573 cv
680.23 176.241 661.46 186.021 650.832 187.246 cv
640.204 188.47 630.757 180.315 630.757 180.315 cv
630.698 180.472 621.01 188.111 610.435 186.489 cv
599.861 184.867 581.47 174.391 569.584 161.269 cv
557.698 148.147 548.021 120.701 546.393 120.569 cv
cp
.0431373 .0901961 .156863 rgb
f
590.373 91.1384 mo
672.36 92.6746 li
681.957 92.8543 689.646 97.8582 689.534 103.851 cv
689.422 109.844 681.551 114.556 671.953 114.376 cv
589.967 112.841 li
580.369 112.66 572.681 107.657 572.792 101.664 cv
572.904 95.6712 580.776 90.9587 590.373 91.1384 cv
cp
f
632.588 34.5613 mo
633.679 34.5593 634.784 34.7151 635.881 35.054 cv
641.728 36.8611 645.001 43.0691 643.194 48.9172 cv
641.388 54.7654 635.188 58.0378 629.341 56.2312 cv
623.493 54.4241 620.211 48.2156 622.017 42.3679 cv
623.485 37.6165 627.863 34.5701 632.588 34.5613 cv
cp
632.18 22.2263 mo
622.194 22.2454 612.953 28.7014 609.85 38.7444 cv
606.031 51.1043 612.961 64.2161 625.321 68.0354 cv
637.681 71.8543 650.793 64.9246 654.612 52.5647 cv
658.431 40.2043 651.512 27.0925 639.152 23.2737 cv
636.835 22.5579 634.484 22.2224 632.18 22.2263 cv
cp
f
610.501 189.754 mo
600.611 188.927 583.061 180.391 571.419 168.982 cv
559.777 157.573 546.679 128.424 546.679 128.424 cv
546.679 128.424 544.428 165.637 562.408 185.021 cv
580.39 204.404 602.376 204.164 612.942 213.537 cv
623.478 222.884 628.653 231.232 628.653 231.232 cv
628.653 231.232 634.135 223.113 645.045 214.143 cv
655.954 205.172 677.909 206.239 696.603 187.543 cv
715.298 168.846 714.446 131.563 714.446 131.563 cv
714.446 131.563 701.768 160.229 689.707 171.194 cv
677.645 182.158 659.772 190.037 649.859 190.493 cv
639.946 190.949 630.565 184.472 630.565 184.472 cv
630.565 184.472 620.39 190.581 610.501 189.754 cv
cp
.32549 .364706 .423529 rgb
f
594.662 93.0901 mo
670.994 94.5203 li
679.93 94.6878 687.099 98.844 687.006 103.803 cv
686.912 108.763 679.594 112.648 670.658 112.481 cv
594.325 111.051 li
585.39 110.883 578.222 106.727 578.314 101.767 cv
578.407 96.8079 585.726 92.9226 594.662 93.0901 cv
cp
f
620.122 94.8264 mo
673.177 95.8206 li
679.387 95.9368 684.376 98.4832 684.319 101.508 cv
684.263 104.532 679.182 106.889 672.971 106.773 cv
619.917 105.779 li
613.706 105.663 608.718 103.116 608.774 100.092 cv
608.831 97.0676 613.911 94.7102 620.122 94.8264 cv
cp
.576471 .615686 .67451 rgb
f
632.207 31.3538 mo
633.619 31.3508 635.051 31.553 636.47 31.9915 cv
644.04 34.3308 648.277 42.3679 645.937 49.9382 cv
643.599 57.509 635.574 61.7459 628.004 59.4065 cv
620.433 57.0676 616.183 49.03 618.523 41.4597 cv
620.424 35.3084 626.092 31.365 632.207 31.3538 cv
cp
632.185 24.344 mo
623.12 24.3611 614.731 30.2224 611.914 39.3391 cv
608.447 50.5598 614.738 62.4627 625.959 65.9299 cv
637.18 69.3967 649.083 63.1057 652.55 51.8855 cv
656.016 40.6648 649.735 28.7615 638.515 25.2947 cv
636.411 24.6448 634.277 24.3401 632.185 24.344 cv
cp
.32549 .364706 .423529 rgb
f
630.917 28.1716 mo
632.641 28.1682 634.391 28.4153 636.126 28.9514 cv
645.379 31.8098 650.557 41.6331 647.697 50.8855 cv
644.839 60.1379 635.031 65.3162 625.779 62.4573 cv
616.526 59.5984 611.333 49.7756 614.191 40.5227 cv
616.515 33.0051 623.441 28.1858 630.917 28.1716 cv
cp
632.186 24.9275 mo
623.375 24.9436 615.221 30.6409 612.482 39.5027 cv
609.113 50.4094 615.227 61.9797 626.135 65.3499 cv
637.041 68.7195 648.611 62.6047 651.981 51.698 cv
655.351 40.7913 649.246 29.2214 638.34 25.8513 cv
636.294 25.2195 634.221 24.9236 632.186 24.927 cv
632.186 24.9275 li
cp
.576471 .615686 .67451 rgb
f
668.154 95.7678 mo
674.828 95.9202 680.207 97.4329 680.168 99.1467 cv
680.129 100.861 674.686 102.127 668.013 101.974 cv
661.339 101.822 655.96 100.309 655.999 98.595 cv
656.038 96.8811 661.48 95.615 668.154 95.7678 cv
cp
.858824 .870588 .890196 rgb
f
644.404 95.2249 mo
647.371 95.2927 649.745 96.7371 649.706 98.4509 cv
649.667 100.165 647.229 101.499 644.263 101.431 cv
641.295 101.364 638.922 99.9197 638.961 98.2058 cv
639 96.492 641.436 95.1575 644.404 95.2249 cv
cp
f
650.534 38.8225 mo
651.746 38.8503 652.657 41.9934 652.569 45.843 cv
652.481 49.6921 651.428 52.7908 650.216 52.7629 cv
649.004 52.7351 648.093 49.592 648.181 45.7424 cv
648.268 41.8928 649.322 38.7947 650.534 38.8225 cv
cp
f
711.818 143.026 mo
703.866 161.471 684.429 180.636 664.46 188.868 cv
652.358 193.858 640.06 194.832 630.007 189.196 cv
614.019 195.507 604.555 192.254 594.542 188.899 cv
576.893 182.986 564.907 167.085 564.907 167.085 cv
564.907 167.085 566.601 189.257 578.654 194.74 cv
590.016 199.908 602.518 205.07 612.267 210.405 cv
621.075 215.224 625 220.124 629.179 225.421 cv
635.206 215.432 648.141 209.788 662.321 204.237 cv
672.623 200.203 682.753 196.295 688.773 191.052 cv
706.789 175.362 711.024 151.69 711.818 143.026 cv
cp
.576471 .615686 .67451 rgb
f
708.271 151.464 mo
703.583 164.596 691.182 176.452 679.889 184.135 cv
680.005 185.994 682.102 190.489 682.012 192.966 cv
686.961 191.114 693.63 185.216 697.556 179.631 cv
703.332 171.413 707.33 161.29 708.271 151.464 cv
cp
.858824 .870588 .890196 rgb
f
649.707 193.777 mo
656.811 196.327 670.596 188.17 675.453 186.1 cv
675.879 188.932 678.111 196.261 678.111 196.261 cv
678.111 196.261 669.164 198.388 663.241 200.544 cv
658.467 202.281 652.42 206.783 650.169 207.477 cv
649.722 203.744 649.13 198.071 649.707 193.778 cv
649.707 193.777 li
cp
f
691.708 611.316 mo
667.417 623.518 642.945 642.826 609.175 642.826 cv
578.376 642.826 556.016 632.648 532.813 622.321 cv
531.971 633.061 535.407 641.991 542.241 649.852 cv
550.033 655.775 562.424 655.048 572.835 655.659 cv
601.873 657.364 623.543 656.219 646.832 653.302 cv
651.348 663.784 li
655.503 673.45 669.777 673.001 680.675 669.107 cv
691.572 665.214 700.894 659.22 696.719 649.561 cv
696.719 649.561 689.155 627.347 687.999 625.178 cv
689.312 623.192 694.599 618.403 691.708 611.316 cv
cp
.858824 .623529 .313726 rgb
f
559.824 489.003 mo
552.326 521.82 li
552.326 521.82 545.633 527.393 539.237 536.438 cv
527.666 550.639 520.996 569.134 524.331 587.473 cv
527.788 606.753 530.628 627.586 542.825 643.56 cv
550.217 649.958 561.973 649.176 571.849 649.836 cv
604.162 651.996 636.212 652.958 659.813 647.472 cv
681.961 637.546 691.319 616.53 700.631 592.135 cv
709.941 567.74 702.698 533.927 697.616 529.989 cv
692.534 526.052 673.279 522.45 661.065 524.182 cv
649.761 525.786 637.635 526.083 630.064 538.752 cv
621.941 548.995 614.373 555.18 606.672 555.945 cv
600.711 547.035 593.645 526.192 592.939 514.589 cv
593.154 511.591 596.542 500.053 596.542 500.053 cv
588.089 489.003 li
559.824 489.003 li
cp
.466667 .231373 .0901961 rgb
f
599.449 560.672 mo
617.033 558.274 li
643.409 543.487 li
690.967 541.888 li
694.164 561.072 li
681.774 594.242 li
637.415 597.039 li
600.248 571.862 li
599.449 560.672 li
cp
.384314 .188235 .0745098 rgb
f
556.501 521.59 mo
543.276 535.236 534.029 546.918 528.852 560.121 cv
525.786 567.942 524.914 579.305 527.441 592.585 cv
529.968 605.864 533.062 623.137 541.787 637.462 cv
546.975 645.98 557.389 647.35 569.376 647.394 cv
569.688 644.579 565.686 628.952 564.962 626.058 cv
562.87 617.714 553.998 564.014 555.766 549.914 cv
556.833 541.393 555.696 525.403 556.501 521.59 cv
cp
.658824 .329412 .12549 rgb
f
554.645 547.511 mo
545.16 554.117 532.297 570.317 525.986 586.583 cv
526.223 589.335 526.615 592.201 527.177 595.161 cv
532.556 576.523 543.825 560.847 554.581 548.147 cv
554.602 547.934 554.625 547.727 554.645 547.511 cv
cp
.466667 .231373 .0901961 rgb
f
554.645 545.14 mo
545.16 551.746 532.297 567.946 525.986 584.212 cv
526.223 586.964 526.615 589.83 527.177 592.79 cv
532.556 574.152 543.825 558.476 554.581 545.776 cv
554.602 545.563 554.625 545.356 554.645 545.14 cv
cp
.529412 .262745 .101961 rgb
f
555.764 577.3 mo
546.033 584.98 535.683 597.961 531.137 612.773 cv
531.613 619.596 533.384 622.777 535.028 626.111 cv
537.269 608.496 545.915 592.594 555.764 577.3 cv
cp
.466667 .231373 .0901961 rgb
f
555.764 574.928 mo
546.033 582.609 535.683 595.59 531.137 610.402 cv
531.613 617.225 533.384 620.406 535.028 623.74 cv
537.269 606.125 545.915 590.222 555.764 574.928 cv
cp
.529412 .262745 .101961 rgb
f
643.985 547.34 mo
657.849 548.128 672.325 543.013 692.909 551.017 cv
695.086 546.7 694.931 539.989 696.22 534.833 cv
688.741 521.534 650.121 527.107 638.835 532.258 cv
630.286 543.592 617.381 560.694 599.844 559.478 cv
602.349 564.361 603.918 563.184 605.361 563.892 cv
621.607 564.98 636.214 555.11 643.985 547.34 cv
cp
f
690.397 550.65 mo
697.91 584.457 666.413 603.35 637.428 590.01 cv
632.824 587.89 623.036 580.92 618.3 575.664 cv
598.42 553.6 591.273 528.581 589.239 509.819 cv
581.798 522.941 569.628 544.469 567.204 572.052 cv
565.172 595.184 572.107 635.425 577.1 646.658 cv
611.943 651.865 649.735 647.896 659.131 644.819 cv
668.526 641.742 680.613 630.594 689.058 613.799 cv
703.417 585.244 708.559 550.052 694.444 532.258 cv
693.772 542.469 690.575 546.279 690.397 550.65 cv
cp
.658824 .329412 .12549 rgb
f
662.441 608.645 mo
627.373 613.344 590.886 596.191 570.847 555.003 cv
572.632 550.589 567.857 569.535 574.604 547.756 cv
594.766 584.517 631.701 607.852 665.275 601.635 cv
689.031 597.236 695.067 581.993 701.523 562.728 cv
701.523 562.728 699.442 603.687 662.441 608.645 cv
cp
.466667 .231373 .0901961 rgb
f
662.441 606.867 mo
627.373 611.566 590.886 594.413 570.847 553.224 cv
572.632 548.81 567.857 567.757 574.604 545.976 cv
594.766 582.739 631.701 606.074 665.275 599.857 cv
689.031 595.458 695.067 580.215 701.523 560.95 cv
701.523 560.95 699.442 601.909 662.441 606.867 cv
cp
.529412 .262745 .101961 rgb
f
574.893 594.73 mo
573.32 591.87 573.054 585.016 573.054 581.856 cv
581.651 592.937 601.385 612.475 628.231 619.009 cv
654.476 625.396 681.214 613.891 690.822 606.255 cv
667.304 634.119 607.726 636.723 574.893 594.73 cv
cp
.466667 .231373 .0901961 rgb
f
574.893 592.952 mo
573.32 590.092 573.054 583.238 573.054 580.078 cv
581.651 591.159 601.385 610.697 628.231 617.23 cv
654.476 623.618 681.214 612.113 690.822 604.476 cv
667.304 632.341 607.726 634.945 574.893 592.952 cv
cp
.529412 .262745 .101961 rgb
f
654.717 638.873 mo
624.806 643.757 597.398 644.004 574.525 616.066 cv
575.162 620.527 574.441 625.152 575.629 629.308 cv
584.506 639.562 603.365 648.086 617.387 648.373 cv
631.408 648.661 647.053 644.04 654.717 638.873 cv
cp
.466667 .231373 .0901961 rgb
f
654.717 637.094 mo
624.806 641.978 597.398 642.225 574.525 614.288 cv
575.162 618.749 574.441 623.374 575.629 627.53 cv
584.506 637.784 603.365 646.307 617.387 646.594 cv
631.408 646.883 647.053 642.261 654.717 637.094 cv
cp
.529412 .262745 .101961 rgb
f
556.498 521.589 mo
554.571 523.576 552.743 525.523 550.986 527.438 cv
550.768 528.901 550.578 530.343 550.423 531.735 cv
548.594 548.124 546.682 563.613 549.256 591.112 cv
551.665 616.85 560.419 643.718 561.543 647.093 cv
564.047 647.304 566.666 647.381 569.373 647.39 cv
569.685 644.575 565.688 628.952 564.963 626.058 cv
562.872 617.714 553.998 564.013 555.766 549.913 cv
556.834 541.392 555.693 525.402 556.498 521.589 cv
cp
.466667 .231373 .0901961 rgb
f
570.336 492.934 mo
589.654 492.934 li
594.633 502.818 li
594.633 502.818 586.93 536.628 585.937 547.591 cv
584.946 558.554 581.307 576.309 581.004 596.844 cv
580.598 624.418 580.236 646.758 580.236 646.758 cv
580.236 646.758 573.927 649.619 572.85 647.649 cv
568.474 639.64 562.838 613.22 560.771 591.149 cv
558.706 569.079 560.109 548.162 561.938 531.773 cv
563.767 515.385 570.336 492.934 570.336 492.934 cv
cp
f
568.262 492.637 mo
587.579 492.637 li
592.557 502.521 li
592.557 502.521 584.854 536.332 583.863 547.295 cv
582.872 558.258 579.231 576.012 578.93 596.547 cv
578.522 624.121 578.161 646.461 578.161 646.461 cv
578.161 646.461 571.851 649.322 570.775 647.352 cv
566.399 639.344 560.764 612.924 558.697 590.853 cv
556.631 568.782 558.035 547.865 559.864 531.477 cv
561.692 515.089 568.262 492.637 568.262 492.637 cv
cp
.529412 .262745 .101961 rgb
f
583.047 605.362 mo
582.481 606.775 582.764 620.905 582.764 620.905 cv
582.764 620.905 601.122 631.538 611.306 633.904 cv
623.881 636.825 650.019 635.034 650.019 635.034 cv
650.019 635.034 623.182 631.03 611.022 625.426 cv
600.6 620.623 583.047 605.362 583.047 605.362 cv
cp
.886275 .478431 .152941 rgb
f
619.904 521.525 mo
613.403 524.17 610.293 531.529 612.937 538.03 cv
617.954 550.36 li
619.826 554.963 622.867 557.861 627.49 558.224 cv
629.773 561.536 633.291 569.108 639.236 585.057 cv
645.267 601.239 648.994 608.3 651.601 615.878 cv
644.439 621.234 642.537 632.803 645.85 641.58 cv
653.115 660.816 li
657.057 671.257 668.073 669.007 678.411 664.802 cv
688.749 660.595 697.599 656.465 693.637 646.032 cv
685.573 624.797 li
682.245 616.03 672.004 609.646 663.14 610.806 cv
659.72 603.567 657.168 598.595 650.813 582.526 cv
644.268 565.977 642.527 562.643 639.235 553.135 cv
642.292 549.648 643.295 545.416 641.423 540.813 cv
636.406 528.483 li
633.762 521.982 626.405 518.881 619.904 521.525 cv
cp
.466667 .231373 .0901961 rgb
f
620.999 523.484 mo
615.43 525.75 612.766 532.053 615.031 537.622 cv
619.328 548.183 li
620.932 552.126 624.563 554.608 628.523 554.92 cv
632.19 562.719 638.351 576.003 641.674 584.17 cv
645.385 593.292 651.045 609.543 653.592 616.945 cv
646.596 622.177 643.74 631.613 647.193 640.101 cv
654.68 658.505 li
658.789 668.603 667.731 667.287 677.83 663.178 cv
687.929 659.069 695.251 653.769 691.142 643.671 cv
683.656 625.268 li
680.203 616.782 671.571 612.029 662.912 613.162 cv
659.57 606.09 652.274 590.496 648.56 581.368 cv
645.238 573.201 640.377 559.389 637.557 551.244 cv
640.175 548.258 641.034 543.948 639.43 540.006 cv
635.134 529.444 li
632.868 523.875 626.567 521.219 620.999 523.484 cv
cp
.658824 .329412 .12549 rgb
f
562.018 492.897 mo
588.136 492.897 li
588.136 492.897 578.092 537.112 577.1 548.075 cv
576.108 559.038 573.769 576.793 573.987 593.685 cv
574.343 621.26 574.355 647.761 574.355 647.761 cv
561.852 647.761 li
561.852 647.761 555.029 618.612 552.455 591.113 cv
549.88 563.614 551.792 548.125 553.621 531.737 cv
555.45 515.349 562.018 492.897 562.018 492.897 cv
cp
f
563.83 497.131 mo
582.481 496.848 li
582.481 496.848 575.147 529.991 573.372 549.617 cv
571.597 569.243 568.848 615.115 568.848 615.115 cv
562.982 590.95 li
557.358 612.654 li
554.987 600.206 551.805 571.819 553.092 551.387 cv
554.252 532.988 563.83 497.131 563.83 497.131 cv
cp
.886275 .478431 .152941 rgb
f
545.813 561.838 mo
544.215 567.233 546.593 579.929 546.593 579.929 cv
546.593 579.929 537.767 591.219 533.399 598.029 cv
529.031 604.84 528.184 592.336 531.197 585.696 cv
534.21 579.057 539.841 567.005 545.813 561.838 cv
cp
f
530.071 561.906 mo
527.886 568.295 527.883 573.882 528.707 572.388 cv
533.087 564.444 539.146 555.097 544.994 550.712 cv
546.958 535.163 li
546.763 534.093 534.638 548.556 530.071 561.906 cv
cp
f
538.397 620.905 mo
538.63 627.393 541.46 634.26 546.11 638.791 cv
548.929 641.536 557.068 643.18 557.068 643.18 cv
551.216 628.266 547.088 611.771 546.875 596.596 cv
546.875 596.596 538.091 612.329 538.397 620.905 cv
cp
f
590.677 535.28 mo
588.98 541.215 586.437 557.605 586.437 557.605 cv
586.437 557.605 600.66 576.409 610.175 583.038 cv
617.97 588.468 636.456 594.058 636.456 594.058 cv
636.456 594.058 617.408 579.716 610.265 570.355 cv
599.554 556.321 590.677 535.28 590.677 535.28 cv
cp
f
586.155 580.777 mo
584.742 589.82 li
584.742 589.82 602.023 605.721 612.718 609.884 cv
622.974 613.875 645.498 613.84 645.498 613.84 cv
645.498 613.84 623.469 607.745 613.566 602.254 cv
603.415 596.625 586.155 580.777 586.155 580.777 cv
cp
f
660.255 616.72 mo
667.807 613.333 677.48 618.506 681.861 628.272 cv
686.242 638.04 683.671 648.704 676.119 652.091 cv
668.567 655.478 658.893 650.305 654.513 640.539 cv
650.132 630.771 652.703 620.107 660.255 616.72 cv
cp
f
622.17 527.67 mo
626.219 525.912 631.585 529.287 634.156 535.21 cv
636.726 541.132 635.528 547.357 631.479 549.115 cv
627.43 550.873 622.063 547.497 619.492 541.575 cv
616.922 535.653 618.12 529.427 622.17 527.67 cv
cp
f
691.347 532.951 mo
691.911 534.364 688.004 546.555 688.004 546.555 cv
672.617 541.36 649.963 542.393 643.969 544.991 cv
642.569 540.595 641.859 533.882 641.859 533.882 cv
651.961 530.375 671.27 527.295 691.347 532.951 cv
cp
.658824 .329412 .12549 rgb
f
614.475 393.08 mo
639.125 393.08 659.107 399.74 659.107 407.957 cv
659.107 416.174 639.125 422.834 614.475 422.834 cv
589.826 422.834 569.844 416.174 569.844 407.957 cv
569.844 399.74 589.826 393.08 614.475 393.08 cv
cp
.862745 .745098 .447059 rgb
f
696.496 298.587 mo
696.496 308.765 662.272 327.431 620.056 327.431 cv
577.839 327.431 543.615 308.765 543.615 298.587 cv
543.615 276.821 577.839 266.167 620.056 266.167 cv
662.272 266.167 696.496 274.89 696.496 298.587 cv
cp
.0313726 .529412 .603922 rgb
f
664.31 450.737 mo
664.31 456.651 644.432 467.498 619.913 467.498 cv
595.393 467.498 575.516 456.651 575.516 450.737 cv
575.516 438.089 595.393 431.897 619.913 431.897 cv
644.432 431.897 664.31 436.967 664.31 450.737 cv
cp
f
658.03 451.956 mo
658.03 456.569 641.281 465.03 620.62 465.03 cv
599.959 465.03 583.21 456.569 583.21 451.956 cv
583.21 447.343 599.959 442.512 620.62 442.512 cv
641.281 442.512 658.03 447.343 658.03 451.956 cv
cp
0 .756863 .956863 rgb
f
643.879 452.458 mo
643.909 456.069 630.855 462.801 614.685 462.936 cv
598.515 463.072 585.35 456.56 585.32 452.949 cv
585.29 449.339 598.367 445.449 614.537 445.313 cv
630.708 445.177 643.849 448.847 643.879 452.458 cv
cp
.227451 .839216 1 rgb
f
683.159 295.77 mo
701.59 312.776 713.133 337.135 713.133 364.19 cv
713.133 415.595 671.461 457.267 620.056 457.267 cv
568.65 457.267 526.978 415.595 526.978 364.19 cv
526.978 337.184 538.479 312.865 556.851 295.863 cv
.0313726 .529412 .603922 rgb
f
688.034 309.159 mo
705.734 324.253 717.041 357.982 709.436 382.179 cv
697.978 418.641 669.415 453.985 620.046 453.985 cv
570.677 453.985 541.893 419.725 532.716 383.635 cv
526.441 358.961 532.715 324.436 550.005 310.052 cv
550.005 310.052 618.807 350.467 688.034 309.159 cv
cp
.227451 .839216 1 rgb
f
708.515 346.695 mo
708.944 353.271 670.014 371.783 621.265 372.7 cv
572.515 373.618 532.406 356.594 531.975 350.018 cv
531.546 343.441 570.413 332.707 619.162 331.789 cv
667.912 330.872 708.084 340.119 708.515 346.695 cv
cp
.52549 .937255 1 rgb
f
711.64 369.777 mo
694.581 404.283 656.932 428.258 613.225 428.258 cv
584.065 428.258 557.601 417.583 538.149 400.23 cv
552.163 429.479 578.578 453.988 620.046 453.988 cv
669.415 453.988 698.122 418.684 709.436 382.177 cv
710.651 378.258 711.362 374.087 711.64 369.777 cv
cp
0 .756863 .956863 rgb
f
646.008 380.731 mo
654.878 380.731 662.069 387.798 662.069 396.514 cv
662.069 405.232 654.878 412.299 646.008 412.299 cv
637.138 412.299 629.947 405.232 629.947 396.514 cv
629.947 387.798 637.138 380.731 646.008 380.731 cv
cp
1 1 1 rgb
f
646.008 381.727 mo
654.432 381.727 661.261 388.438 661.261 396.717 cv
661.261 404.996 654.432 411.707 646.008 411.707 cv
637.584 411.707 630.755 404.996 630.755 396.717 cv
630.755 388.438 637.584 381.727 646.008 381.727 cv
cp
.501961 .905882 .964706 rgb
f
646.196 388.358 mo
652.389 388.358 657.408 393.291 657.408 399.376 cv
657.408 405.461 652.389 410.394 646.196 410.394 cv
640.004 410.394 634.984 405.461 634.984 399.376 cv
634.984 393.291 640.004 388.358 646.196 388.358 cv
cp
.188235 .847059 .945098 rgb
f
637.307 405.634 mo
638.1 404.392 640.123 404.267 641.823 405.355 cv
643.523 406.443 644.258 408.332 643.463 409.573 cv
642.669 410.814 640.647 410.938 638.947 409.85 cv
637.247 408.762 636.512 406.875 637.307 405.634 cv
cp
.729412 .94902 .980392 rgb
f
649.813 385.749 mo
652.665 385.749 654.976 388.252 654.976 391.339 cv
654.976 394.427 652.665 396.929 649.813 396.929 cv
646.962 396.929 644.65 394.427 644.65 391.339 cv
644.65 388.252 646.962 385.749 649.813 385.749 cv
cp
1 1 1 rgb
f
593.362 363.221 mo
597.817 363.221 601.429 366.771 601.429 371.149 cv
601.429 375.527 597.817 379.077 593.362 379.077 cv
588.907 379.077 585.296 375.527 585.296 371.149 cv
585.296 366.771 588.907 363.221 593.362 363.221 cv
cp
f
593.362 363.721 mo
597.594 363.721 601.023 367.093 601.023 371.251 cv
601.023 375.409 597.594 378.779 593.362 378.779 cv
589.132 378.779 585.701 375.409 585.701 371.251 cv
585.701 367.093 589.132 363.721 593.362 363.721 cv
cp
.501961 .905882 .964706 rgb
f
593.457 367.052 mo
596.567 367.052 599.088 369.53 599.088 372.586 cv
599.088 375.642 596.567 378.12 593.457 378.12 cv
590.347 378.12 587.825 375.642 587.825 372.586 cv
587.825 369.53 590.347 367.052 593.457 367.052 cv
cp
.188235 .847059 .945098 rgb
f
588.992 375.729 mo
589.391 375.105 590.406 375.043 591.26 375.59 cv
592.114 376.135 592.483 377.084 592.084 377.708 cv
591.685 378.331 590.67 378.393 589.815 377.847 cv
588.962 377.301 588.593 376.352 588.992 375.729 cv
cp
.729412 .94902 .980392 rgb
f
595.273 365.742 mo
596.706 365.742 597.867 366.999 597.867 368.55 cv
597.867 370.1 596.706 371.357 595.273 371.357 cv
593.841 371.357 592.681 370.1 592.681 368.55 cv
592.681 366.999 593.841 365.742 595.273 365.742 cv
cp
1 1 1 rgb
f
670.067 337.944 mo
674.522 337.944 678.135 341.493 678.135 345.872 cv
678.135 350.25 674.522 353.8 670.067 353.8 cv
665.612 353.8 662.001 350.25 662.001 345.872 cv
662.001 341.493 665.612 337.944 670.067 337.944 cv
cp
f
670.067 338.444 mo
674.299 338.444 677.728 341.815 677.728 345.972 cv
677.728 350.131 674.299 353.502 670.067 353.502 cv
665.837 353.502 662.406 350.131 662.406 345.972 cv
662.406 341.815 665.837 338.444 670.067 338.444 cv
cp
.501961 .905882 .964706 rgb
f
670.162 341.774 mo
673.272 341.774 675.794 344.252 675.794 347.308 cv
675.794 350.365 673.272 352.843 670.162 352.843 cv
667.052 352.843 664.531 350.365 664.531 347.308 cv
664.531 344.252 667.052 341.774 670.162 341.774 cv
cp
.188235 .847059 .945098 rgb
f
665.697 350.451 mo
666.096 349.828 667.111 349.765 667.966 350.311 cv
668.819 350.858 669.188 351.806 668.789 352.429 cv
668.391 353.053 667.375 353.116 666.52 352.569 cv
665.667 352.023 665.298 351.075 665.697 350.451 cv
cp
.729412 .94902 .980392 rgb
f
671.978 340.464 mo
673.411 340.464 674.572 341.721 674.572 343.271 cv
674.572 344.822 673.411 346.08 671.978 346.08 cv
670.547 346.08 669.386 344.822 669.386 343.271 cv
669.386 341.721 670.547 340.464 671.978 340.464 cv
cp
1 1 1 rgb
f
555.245 316.607 mo
567.924 325.918 li
567.924 325.918 533.711 364.897 562.463 428.817 cv
512.331 372.868 555.245 316.607 555.245 316.607 cv
cp
f
694.496 297.897 mo
694.496 306.991 661.168 323.67 620.056 323.67 cv
578.943 323.67 545.615 306.991 545.615 297.897 cv
545.615 278.448 578.943 268.928 620.056 268.928 cv
661.168 268.928 694.496 276.722 694.496 297.897 cv
cp
.227451 .839216 1 rgb
f
679.651 291.703 mo
679.651 297.732 652.97 308.788 620.056 308.788 cv
587.141 308.788 560.46 297.732 560.46 291.703 cv
560.46 278.811 587.141 272.5 620.056 272.5 cv
652.97 272.5 679.651 277.667 679.651 291.703 cv
cp
.52549 .937255 1 rgb
f
621.554 283.998 mo
594.989 283.998 573.454 289.092 573.454 299.497 cv
573.454 300.023 573.706 300.595 574.188 301.199 cv
585.12 305.314 601.608 308.787 620.057 308.787 cv
640.736 308.787 658.955 304.426 669.642 299.686 cv
669.653 299.497 li
669.653 288.168 648.118 283.998 621.554 283.998 cv
cp
0 .756863 .956863 rgb
f
576.187 303.365 mo
587.752 306.936 596.459 311.943 595.637 314.55 cv
594.813 317.156 584.772 316.375 573.208 312.804 cv
561.644 309.234 552.936 304.227 553.76 301.62 cv
554.582 299.014 564.624 299.795 576.187 303.365 cv
cp
1 1 1 rgb
f
392.45 628.291 mo
435.986 628.291 471.279 634.044 471.279 641.14 cv
471.279 648.236 435.986 653.989 392.45 653.989 cv
348.914 653.989 313.621 648.236 313.621 641.14 cv
313.621 634.044 348.914 628.291 392.45 628.291 cv
cp
.858824 .623529 .313726 rgb
f
391.951 524.988 mo
363.538 575.376 li
284.535 556.375 li
326.405 640.257 li
345.355 640.282 li
345.363 640.282 li
375.855 643.057 406.228 644.431 438.042 640.426 cv
458.29 640.451 li
500.365 556.704 li
497.227 557.557 420.221 575.486 420.221 575.486 cv
391.951 524.988 li
cp
1 1 1 rgb
f
328.482 598.547 mo
400.386 638.484 li
496.428 560.071 li
328.482 598.547 li
cp
.52549 .729412 .85098 rgb
f
342.381 598.65 mo
402.317 631.941 li
484.704 566.494 li
342.381 598.65 li
cp
.839216 .952941 .996078 rgb
f
455.337 598.735 mo
383.315 638.459 li
288.375 559.66 li
455.337 598.735 li
cp
.52549 .729412 .85098 rgb
f
443.755 598.788 mo
381.722 633.002 li
299.949 565.132 li
443.755 598.788 li
cp
.839216 .952941 .996078 rgb
f
352.917 597.609 mo
391.971 530.2 li
430.822 597.725 li
391.848 612.06 li
352.917 597.609 li
cp
.72549 .905882 .980392 rgb
f
329.427 638.379 mo
455.947 638.567 li
496.564 559.97 li
329.427 638.379 li
cp
f
365.057 592.289 mo
391.952 541.536 li
418.696 592.369 li
391.86 603.165 li
365.057 592.289 li
cp
.839216 .952941 .996078 rgb
f
396.871 600.401 mo
392.642 539.816 li
419.035 589.605 li
396.871 600.401 li
cp
1 1 1 rgb
f
387.106 557.895 mo
391.652 532.648 li
397.4 557.911 li
391.848 612.06 li
387.106 557.895 li
cp
.52549 .729412 .85098 rgb
f
363 630.448 mo
451.182 630.58 li
479.492 575.8 li
363 630.448 li
cp
.839216 .952941 .996078 rgb
f
329.427 638.379 mo
433.564 600.245 li
496.564 559.97 li
329.427 638.379 li
cp
.52549 .729412 .85098 rgb
f
455.277 638.566 mo
328.757 638.378 li
288.375 559.66 li
455.277 638.566 li
cp
.72549 .905882 .980392 rgb
f
455.277 638.566 mo
348.427 601.752 li
288.375 559.66 li
455.277 638.566 li
cp
.52549 .729412 .85098 rgb
f
427.569 632.266 mo
333.705 632.809 li
308.22 575.843 li
427.569 632.266 li
cp
.839216 .952941 .996078 rgb
f
346.723 638.377 mo
376.3 641.006 405.754 642.312 436.617 638.51 cv
391.436 632.466 li
346.723 638.377 li
cp
.52549 .729412 .85098 rgb
f
421.855 629.809 mo
323.189 605.615 li
303.081 572.195 li
421.855 629.809 li
cp
1 1 1 rgb
f
406.502 610.905 mo
466.435 602.458 li
487.538 565.803 li
406.502 610.905 li
cp
f
296.716 250.63 mo
295.896 253.692 278.154 254.473 257.971 249.072 cv
237.787 243.67 222.806 234.133 223.626 231.07 cv
224.446 228.008 241.472 229.904 261.655 235.305 cv
281.838 240.707 297.535 247.568 296.716 250.63 cv
cp
.0313726 .529412 .603922 rgb
f
273.952 116.511 mo
309.951 126.145 li
321.065 129.119 327.517 140.841 324.416 152.426 cv
302.972 232.558 li
301.064 239.687 297.471 251.06 297.471 251.06 cv
297.471 251.06 286.785 250.636 281.514 249.225 cv
237.116 237.344 li
230.262 235.51 222.965 231.121 222.965 231.121 cv
222.965 231.121 225.3 217.979 226.85 212.186 cv
248.294 132.055 li
251.395 120.469 262.838 113.537 273.952 116.511 cv
cp
f
282.771 79.3005 mo
320.896 89.5037 li
320.896 89.5037 315.709 95.3049 313.634 106.994 cv
311.617 118.358 320.319 140.967 320.319 140.967 cv
257.568 124.174 li
257.568 124.174 276.514 108.974 280.327 98.0808 cv
284.802 85.2952 282.771 79.3005 282.771 79.3005 cv
cp
f
287.109 80.4583 mo
287.109 80.4583 288.372 86.2468 284.121 99.092 cv
281.987 105.542 275.988 112.414 271.125 118.079 cv
262.932 118.629 254.442 119.624 250.322 135.019 cv
229.786 211.758 li
228.301 217.304 226.037 229.883 226.037 229.883 cv
226.037 229.883 247.334 226.211 263.044 230.437 cv
278.755 234.664 295.39 248.443 295.39 248.443 cv
295.39 248.443 298.817 237.547 300.644 230.72 cv
321.181 153.981 li
325.226 138.863 317.884 131.981 311.642 128.931 cv
310.274 121.596 308.525 112.642 309.843 105.976 cv
312.141 94.3464 316.561 88.3401 316.561 88.3401 cv
287.109 80.4583 li
cp
.227451 .839216 1 rgb
f
289.948 81.218 mo
289.948 81.218 290.342 89.6853 287.263 99.3635 cv
284.183 109.041 284.633 111.838 274.816 121.488 cv
265 131.137 232.541 173.697 274.014 185.012 cv
315.486 196.327 308.607 142.296 305.046 129.577 cv
301.484 116.859 305.154 112.644 307.081 103.528 cv
309.008 94.4119 313.533 87.5295 313.533 87.5295 cv
289.948 81.218 li
cp
.52549 .937255 1 rgb
f
242.287 165.033 mo
229.783 211.76 li
228.298 217.306 226.035 229.885 226.035 229.885 cv
226.035 229.885 247.331 226.213 263.041 230.439 cv
278.752 234.666 295.387 248.445 295.387 248.445 cv
295.387 248.445 298.814 237.549 300.641 230.722 cv
311.326 190.797 li
299.884 196.83 287.437 198.836 275.458 195.63 cv
260.562 191.644 249.068 180.327 242.287 165.033 cv
cp
0 .756863 .956863 rgb
f
284.411 70.4675 mo
284.411 70.4675 297.141 75.4851 303.721 77.2459 cv
310.3 79.0066 323.888 81.032 323.888 81.032 cv
326.659 81.7737 328.293 84.6018 327.552 87.3728 cv
326.973 89.5359 li
326.231 92.3074 323.403 93.9412 320.632 93.1995 cv
320.632 93.1995 307.044 91.1741 300.465 89.4133 cv
293.885 87.6526 281.155 82.635 281.155 82.635 cv
278.383 81.8933 276.749 79.0652 277.491 76.2942 cv
278.07 74.1306 li
278.811 71.3596 281.639 69.7258 284.411 70.4675 cv
cp
.0313726 .529412 .603922 rgb
f
323.997 70.6951 mo
323.509 70.7337 323.005 70.7698 322.387 70.7581 cv
321.606 70.7429 320.724 70.6917 319.76 70.5989 cv
318.796 70.5061 317.754 70.3738 316.636 70.2063 cv
315.518 70.0383 314.332 69.8318 313.089 69.5916 cv
311.846 69.3513 310.551 69.073 309.212 68.7629 cv
307.872 68.4534 306.486 68.1091 305.078 67.7322 cv
303.671 67.3557 302.306 66.9641 300.991 66.5632 cv
299.676 66.1624 298.407 65.7546 297.21 65.342 cv
296.014 64.9295 294.882 64.5159 293.83 64.1028 cv
292.778 63.6902 291.809 63.2839 290.928 62.8826 cv
290.046 62.4817 289.257 62.0862 288.572 61.7087 cv
288.084 61.4392 287.718 61.1877 287.341 60.9358 cv
286.092 63.9993 287.227 68.1624 287.563 72.1072 cv
288.424 82.1961 292.357 98.9524 296.56 100.077 cv
300.764 101.202 312.896 88.8777 318.325 80.3391 cv
320.638 76.7019 323.474 73.8479 323.997 70.6951 cv
323.997 70.6951 li
cp
.494118 .215686 .0509804 rgb
f
289.63 73.7766 mo
289.63 73.7766 297.811 77.5769 302.492 78.8294 cv
307.172 80.0818 317.714 81.2922 317.714 81.2922 cv
319.685 81.8201 320.851 83.8211 320.327 85.7795 cv
319.918 87.3079 li
319.393 89.2664 317.385 90.4182 315.413 89.8904 cv
315.413 89.8904 304.495 88.5794 299.815 87.3269 cv
295.134 86.0745 287.328 82.3748 287.328 82.3748 cv
285.357 81.8469 284.192 79.846 284.716 77.8875 cv
285.125 76.3591 li
285.649 74.4006 287.658 73.2488 289.63 73.7766 cv
cp
.227451 .839216 1 rgb
f
306.141 147.732 mo
309.325 152.013 312.844 155.042 316.452 157.741 cv
316.452 157.741 309.246 158.242 301.5 167.333 cv
293.754 176.424 283.369 195.497 283.369 195.497 cv
278.373 196.184 li
278.373 196.184 282.588 182.319 285.647 175.777 cv
289.495 167.547 293.282 158.934 299.483 152.294 cv
301.32 150.328 306.141 147.732 306.141 147.732 cv
cp
.478431 .329412 .180392 rgb
f
301.994 147.91 mo
305.335 151.787 308.911 154.443 312.548 156.777 cv
312.548 156.777 305.689 157.752 298.904 166.983 cv
292.118 176.215 284.264 194.385 284.264 194.385 cv
278.764 196.18 li
278.764 196.18 281.842 182.624 284.318 176.155 cv
287.433 168.015 290.462 159.513 295.938 152.734 cv
297.56 150.726 301.994 147.91 301.994 147.91 cv
cp
.94902 .796078 .541176 rgb
f
258.463 132.496 mo
258.463 132.496 263.512 164.53 259.587 181.063 cv
258.384 186.131 256.915 193.06 253.939 199.25 cv
245.741 216.304 232.698 233.362 232.698 233.362 cv
232.698 233.362 247.872 244.493 257.162 246.908 cv
266.452 249.323 285.777 244.942 285.777 244.942 cv
285.777 244.942 282.744 216.311 283.505 205.254 cv
284.265 194.197 285.387 187.247 288.705 178.94 cv
293.486 166.97 309.454 146.142 309.454 146.142 cv
309.454 146.142 302.638 137.525 297.903 134.86 cv
290.613 130.758 282.435 128.21 273.539 128.51 cv
264.418 128.819 258.463 132.496 258.463 132.496 cv
cp
.478431 .329412 .180392 rgb
f
261.127 133.709 mo
261.127 133.709 265.194 165.542 261.323 181.635 cv
260.136 186.568 258.668 193.308 255.896 199.372 cv
248.26 216.08 236.371 232.915 236.371 232.915 cv
236.371 232.915 249.986 242.641 258.078 244.737 cv
266.17 246.833 282.663 242.746 282.663 242.746 cv
282.663 242.746 280.74 215.131 281.693 204.417 cv
282.645 193.702 283.742 186.93 286.936 178.83 cv
291.638 166.906 307.019 145.99 307.019 145.99 cv
307.019 145.99 300.488 138.323 296.147 135.956 cv
289.736 132.46 282.742 129.923 274.925 130.443 cv
266.911 130.977 261.127 133.709 261.127 133.709 cv
cp
.94902 .796078 .541176 rgb
f
270.809 192.693 mo
276.673 194.262 278.398 206.849 274.662 220.806 cv
270.928 234.763 263.146 244.806 257.284 243.237 cv
251.42 241.668 249.695 229.081 253.431 215.124 cv
257.166 201.167 264.947 191.124 270.809 192.693 cv
cp
.988235 .917647 .694118 rgb
f
283.055 145.431 mo
288.918 147 290.643 159.587 286.908 173.544 cv
283.173 187.501 275.392 197.544 269.529 195.975 cv
263.665 194.406 261.941 181.819 265.676 167.862 cv
269.411 153.905 277.192 143.862 283.055 145.431 cv
cp
f
262.43 134.603 mo
262.43 134.603 273.2 145.757 283.22 148.597 cv
293.101 151.397 300.484 148.556 305.547 146.292 cv
303.505 144.167 294.288 135.082 284.147 132.463 cv
274.072 129.862 262.43 134.603 262.43 134.603 cv
cp
.776471 .6 .337255 rgb
f
301.952 147.207 mo
293.544 148.921 272.617 145.275 268.139 137.906 cv
263.431 130.16 284.08 132.972 291.541 137.457 cv
308.361 147.567 286.303 143.865 283.187 141.694 cv
277.839 137.966 281.645 135.828 289.288 139.131 cv
282.102 137.438 284.78 141.808 292.334 142.584 cv
299.889 143.359 291.214 138.116 283.921 136.257 cv
276.628 134.397 268.323 133.305 273.142 138.766 cv
279.563 146.042 294.293 146.596 301.952 147.207 cv
cp
.478431 .329412 .180392 rgb
f
259.666 174.329 mo
259.666 174.329 268.829 180.911 274.127 182.414 cv
279.406 183.912 290.64 183.131 290.64 183.131 cv
285.65 189.809 283.836 196.73 284.592 203.845 cv
284.592 203.845 275.913 205.452 268.389 203.831 cv
261.116 202.263 253.408 196.453 253.408 196.453 cv
256.276 190.848 259.215 185.403 259.666 174.329 cv
cp
.494118 .215686 .0509804 rgb
f
306.595 62.0613 mo
316.973 64.8386 324.826 69.1873 324.134 71.7742 cv
323.441 74.3606 314.467 74.2058 304.088 71.4285 cv
293.709 68.6511 285.857 64.3025 286.55 61.7161 cv
287.242 59.1292 296.216 59.2839 306.595 62.0613 cv
cp
.694118 .301961 .0705882 rgb
f
296.093 77.5442 mo
300.749 79.3538 303.94 82.322 303.22 84.1746 cv
302.5 86.0271 298.142 86.0618 293.486 84.2522 cv
288.83 82.4426 285.639 79.4744 286.36 77.6218 cv
287.079 75.7698 291.437 75.7346 296.093 77.5442 cv
cp
.929412 .972549 .988235 rgb
f
243.068 181.691 mo
231.851 223.607 li
231.214 225.989 232.493 228.386 234.717 228.981 cv
234.797 229.003 li
237.021 229.598 239.327 228.16 239.964 225.778 cv
251.181 183.862 li
243.068 181.691 li
cp
262.598 124.798 mo
260.374 124.203 258.068 125.64 257.431 128.023 cv
251.096 151.695 li
259.209 153.866 li
265.544 130.194 li
266.181 127.812 264.902 125.414 262.678 124.819 cv
262.598 124.798 li
cp
1 1 1 rgb
f
128.781 464.813 mo
107.815 467.041 86.5306 467.459 65.8045 471.302 cv
56.8202 475.14 38.3182 484.409 48.4735 495.842 cv
54.8499 504.497 66.0477 517.302 54.6039 526.878 cv
43.2049 532.796 39.0853 541.363 29.8846 548.996 cv
18.0091 560.408 13.805 572.48 9.67612 588.411 cv
-.86587 591.318 -6.36538 606.993 12.2376 610.87 cv
7.3187 623.501 11.7904 630.48 18.2269 636.39 cv
32.5096 649.506 57.4803 654.825 75.7865 644.813 cv
82.4437 640.427 83.7972 636.152 88.6805 640.212 cv
93.5638 644.27 104.317 642.348 112.127 641.758 cv
131.056 640.325 147.792 635.404 165.58 630.711 cv
180.345 626.814 195.833 623.396 213.901 619.333 cv
219.946 626.386 242.667 625.412 250.742 621.76 cv
258.815 618.106 267.397 611.583 257.636 603.403 cv
265.479 603.45 282.775 603.77 283.638 592.865 cv
280.878 571.678 272.157 554.094 260.001 536.759 cv
250.878 525.308 239.589 512.371 224.033 511.037 cv
215.411 506.604 198.197 499.317 194.679 513.329 cv
194.942 525.688 182.539 531.269 172.9 523.866 cv
161.692 523.655 146.568 518.01 150.183 503.894 cv
148.893 490.728 148.046 474.34 136.062 466.192 cv
133.841 465.019 131.272 464.585 128.781 464.813 cv
cp
.862745 .745098 .447059 rgb
f
48.0887 508.611 mo
26.8265 519.621 8.09409 546.132 4.03354 569.639 cv
13.0082 579.818 28.9935 577.969 43.3617 578.725 cv
55.7259 575.405 58.3514 554.669 61.8465 542.103 cv
61.0267 530.697 54.8558 519.561 48.0887 508.611 cv
cp
1 1 1 rgb
f
189.304 512.427 mo
193.422 503.851 206.334 488.08 222.27 488.983 cv
238.206 489.887 256.982 514.141 266.916 535.612 cv
276.849 557.084 282.168 572.393 281.816 588.01 cv
271.618 596.275 252.163 596.792 236.297 595.956 cv
221.893 596.922 202.784 590.996 191.238 587.03 cv
185.914 574.634 184.105 531.564 189.304 512.427 cv
cp
f
66.5023 437.295 mo
71.2859 436.113 105.427 434.344 127.523 433.094 cv
149.619 431.842 199.082 429.856 199.082 429.856 cv
202.493 432.195 li
170.742 497.228 li
41.8612 516.343 li
41.8612 516.343 35.9754 472.34 41.8495 458.633 cv
47.7231 444.927 61.7191 438.477 66.5023 437.295 cv
.407843 .407843 .407843 rgb
f
189.086 516.552 mo
193.205 507.976 206.117 492.205 222.053 493.109 cv
237.989 494.012 256.765 518.266 266.699 539.738 cv
276.632 561.21 280.012 575.137 283.221 589.112 cv
273.023 597.379 251.946 600.917 236.08 600.082 cv
221.677 601.047 202.567 595.122 191.021 591.155 cv
185.697 578.759 183.889 535.69 189.086 516.552 cv
cp
1 .713726 .168627 rgb
f
221.637 495.8 mo
211.806 495.242 203.191 501.396 197.307 507.993 cv
195.351 512.438 194.156 517.278 193.888 522.373 cv
192.637 546.125 211.948 566.446 237.024 567.766 cv
249.995 568.45 261.968 563.918 270.677 556.093 cv
268.836 551.188 266.616 545.852 263.864 539.904 cv
254.467 519.594 236.711 496.655 221.637 495.8 cv
221.637 495.8 li
cp
1 .85098 .168627 rgb
f
47.8446 513.253 mo
26.5819 524.262 9.73032 549.775 3.45347 570.24 cv
12.4276 580.42 28.7494 582.61 43.1175 583.366 cv
55.4813 580.046 58.1068 559.31 61.6019 546.744 cv
60.7821 535.338 54.6117 524.202 47.8446 513.253 cv
cp
1 .713726 .168627 rgb
f
38.7884 523.743 mo
22.6493 532.398 15.5262 546.973 13.5829 560.501 cv
40.1336 558.254 50.4081 524.804 38.7884 523.743 cv
cp
1 .85098 .168627 rgb
f
42.0941 552.605 mo
23.7333 549.526 5.37485 571.952 5.20542 595.998 cv
22.9144 610.728 23.1556 602.595 33.8792 602.819 cv
42.5511 604.58 52.5892 599.161 58.6649 595.967 cv
52.2069 582.345 60.4549 555.684 42.0941 552.605 cv
cp
1 1 1 rgb
f
41.891 556.458 mo
23.5301 553.379 6.12192 578.597 5.1561 596.933 cv
22.8651 611.664 22.9525 606.448 33.6761 606.671 cv
42.348 608.432 52.3861 603.013 58.4623 599.819 cv
52.0042 586.198 60.2518 559.537 41.891 556.458 cv
cp
1 .713726 .168627 rgb
f
41.891 556.458 mo
23.5301 553.379 13.9969 574.392 18.2899 584.203 cv
22.5833 594.013 35.2181 596.634 41.8915 591.764 cv
51.3983 584.827 51.8514 558.71 41.891 556.458 cv
cp
1 .85098 .168627 rgb
f
219.516 574.032 mo
221.812 572.569 227.128 565.882 233.637 567.878 cv
246.241 574.429 255.827 598.048 255.883 611.964 cv
246.535 616.501 224.446 616.051 215.894 610.057 cv
216.787 598.111 216.335 584.402 219.516 574.032 cv
cp
1 1 1 rgb
f
219.299 578.158 mo
221.595 576.695 226.911 570.008 233.419 572.004 cv
246.023 578.554 254.123 599.17 257.441 613.624 cv
248.094 618.16 224.229 620.176 215.677 614.183 cv
216.57 602.237 216.118 588.528 219.299 578.158 cv
cp
1 .713726 .168627 rgb
f
97.7992 553.651 mo
99.1629 527.757 95.576 609.52 94.079 637.954 cv
92.3504 638.635 li
38.8265 592.798 li
41.9427 520.53 li
97.7992 553.651 li
cp
.556863 .560784 .556863 rgb
f
218.471 582.485 mo
221.068 577.443 228.224 572.392 233.164 573.907 cv
242.731 578.88 251.364 597.395 249.045 603.1 cv
246.725 608.805 228.73 615.22 220.943 609.584 cv
213.595 604.265 214.317 590.549 218.471 582.485 cv
cp
1 .85098 .168627 rgb
f
96.973 552.085 mo
92.4129 638.671 li
220.826 611.294 li
225.212 530.282 li
224.207 530.007 li
96.973 552.085 li
cp
.447059 .447059 .447059 rgb
f
87.2406 560.696 mo
84.2518 617.45 li
45.8197 587.488 li
48.4461 537.613 li
87.2406 560.696 li
cp
.494118 .215686 .0509804 rgb
f
52.2787 542.986 mo
51.5863 560.685 li
80.9979 580.211 li
81.7655 561.077 li
52.2787 542.986 li
cp
.592157 .258824 .0588235 rgb
f
50.265 572.121 mo
49.057 585.959 li
80.7704 607.283 li
82.5575 591.557 li
50.265 572.121 li
cp
f
41.7767 520.518 mo
170.582 501.26 li
225.271 530.354 li
96.6288 553.069 li
41.7767 520.518 li
cp
.407843 .407843 .407843 rgb
f
79.9569 531.452 mo
65.6634 533.52 li
82.0453 543.083 li
96.3285 540.643 li
79.9569 531.452 li
cp
.556863 .560784 .556863 rgb
f
191.241 512.564 mo
176.922 515.113 li
193.334 524.104 li
207.642 521.187 li
191.241 512.564 li
cp
f
63.8456 526.763 mo
170.005 509.596 li
206.075 528.758 li
100.023 548.201 li
63.8456 526.763 li
cp
.494118 .215686 .0509804 rgb
f
46.2196 566.797 mo
46.2196 566.797 li
85.6478 590.947 li
85.8744 586.645 li
46.4461 562.494 li
46.2196 566.797 li
cp
.25098 .0901961 .00784314 rgb
f
46.3456 564.406 mo
46.3456 564.406 li
85.7733 588.557 li
85.9999 584.255 li
46.5721 560.103 li
46.3456 564.406 li
cp
.694118 .301961 .0705882 rgb
f
104.973 554.029 mo
106.598 554.115 107.833 555.724 107.733 557.624 cv
107.634 559.523 106.235 560.994 104.611 560.909 cv
102.986 560.823 101.75 559.214 101.85 557.314 cv
101.951 555.415 103.348 553.944 104.973 554.029 cv
cp
.584314 .588235 .584314 rgb
f
104.018 566.568 mo
105.642 566.654 106.878 568.263 106.778 570.163 cv
106.678 572.062 105.28 573.533 103.656 573.448 cv
102.031 573.362 100.795 571.753 100.895 569.853 cv
100.995 567.954 102.393 566.483 104.018 566.568 cv
cp
f
116.02 551.507 mo
117.644 551.593 118.88 553.202 118.78 555.101 cv
118.68 557.001 117.282 558.471 115.658 558.386 cv
114.033 558.301 112.797 556.691 112.897 554.792 cv
112.997 552.891 114.395 551.422 116.02 551.507 cv
cp
f
216.882 610.268 mo
215.503 610.196 214.454 608.83 214.539 607.217 cv
214.623 605.604 215.81 604.355 217.19 604.428 cv
218.569 604.501 219.618 605.867 219.534 607.48 cv
219.449 609.093 218.262 610.342 216.882 610.268 cv
cp
f
217.257 601.464 mo
215.878 601.391 214.829 600.025 214.914 598.412 cv
214.999 596.8 216.186 595.551 217.565 595.624 cv
218.944 595.696 219.993 597.062 219.909 598.676 cv
219.824 600.288 218.637 601.537 217.257 601.464 cv
cp
f
209.025 612.49 mo
207.645 612.418 206.596 611.052 206.681 609.438 cv
206.766 607.826 207.953 606.577 209.332 606.65 cv
210.711 606.722 211.761 608.089 211.676 609.702 cv
211.591 611.314 210.404 612.563 209.025 612.49 cv
cp
f
100.146 616.639 mo
101.62 616.718 102.735 618.304 102.636 620.185 cv
102.536 622.066 101.262 623.527 99.7875 623.45 cv
98.3138 623.372 97.1991 621.785 97.2982 619.904 cv
97.3973 618.024 98.6722 616.562 100.146 616.639 cv
cp
f
99.7733 627.351 mo
101.247 627.429 102.362 629.016 102.263 630.897 cv
102.163 632.777 100.889 634.239 99.4144 634.162 cv
97.9408 634.084 96.826 632.497 96.9251 630.616 cv
97.0243 628.735 98.2992 627.274 99.7733 627.351 cv
cp
f
108.212 626.82 mo
109.686 626.898 110.8 628.485 110.701 630.366 cv
110.602 632.247 109.327 633.708 107.853 633.631 cv
106.379 633.552 105.265 631.966 105.364 630.085 cv
105.463 628.204 106.738 626.743 108.212 626.82 cv
cp
f
219.751 551.491 mo
218.439 551.423 217.447 550.009 217.535 548.335 cv
217.623 546.66 218.759 545.358 220.071 545.427 cv
221.383 545.497 222.375 546.91 222.287 548.585 cv
222.199 550.259 221.064 551.56 219.751 551.491 cv
cp
f
220.084 541.954 mo
218.771 541.885 217.779 540.471 217.867 538.797 cv
217.955 537.122 219.091 535.821 220.403 535.89 cv
221.715 535.959 222.708 537.373 222.619 539.047 cv
222.532 540.721 221.396 542.023 220.084 541.954 cv
cp
f
212.57 542.427 mo
211.258 542.357 210.265 540.944 210.353 539.269 cv
210.441 537.595 211.577 536.294 212.889 536.363 cv
214.202 536.432 215.194 537.845 215.106 539.52 cv
215.017 541.194 213.882 542.496 212.57 542.427 cv
cp
f
156.652 521.833 mo
148.868 514.967 140.171 507.986 131.461 509.475 cv
122.712 510.972 113.261 517.654 106.508 526.564 cv
102.925 523.483 98.4842 521.691 94.4374 521.952 cv
86.7845 522.445 81.2884 529.758 79.0907 535.421 cv
98.2357 543.377 li
100.219 544.552 li
106.923 543.321 li
161.723 533.274 li
164.771 532.719 li
169.014 531.938 li
195.253 529.896 li
193.032 521.661 180.038 510.663 173.199 510.608 cv
166.359 510.553 157.796 516.51 156.652 521.833 cv
cp
1 1 1 rgb
f
111.675 560.334 mo
108.251 625.343 li
213.486 602.91 li
216.613 543.535 li
111.675 560.334 li
cp
.494118 .215686 .0509804 rgb
f
115.731 562.385 mo
115.379 582.74 li
212.622 570.365 li
213.151 546.664 li
115.731 562.385 li
cp
.592157 .258824 .0588235 rgb
f
114.309 598.503 mo
115.73 621.587 li
211.464 601.462 li
211.049 582.026 li
114.309 598.503 li
cp
f
110.439 575.931 mo
122.3 574.319 li
127.887 578.264 li
122.301 583.842 li
109.941 585.405 li
110.438 575.931 li
110.439 575.931 li
cp
.8 .8 .8 rgb
f
108.404 608.304 mo
119.554 606.844 li
125.191 610.716 li
119.675 616.362 li
107.81 618.102 li
108.404 608.304 li
cp
f
214.275 598.092 mo
205.664 599.917 li
201.321 596.058 li
205.726 590.401 li
215.03 588.635 li
215.03 588.635 214.108 596.394 214.275 598.092 cv
cp
f
216.846 564.481 mo
207.596 565.149 li
203.298 561.239 li
207.765 555.632 li
217.085 553.973 li
217.085 553.973 216.98 561.451 216.846 564.481 cv
cp
f
47.7967 528.771 mo
47.7113 530.385 46.6556 531.643 45.4383 531.579 cv
44.221 531.514 43.3031 530.154 43.388 528.539 cv
43.473 526.925 44.5291 525.668 45.7464 525.731 cv
46.9637 525.796 47.8817 527.156 47.7967 528.771 cv
cp
.811765 .815686 .807843 rgb
f
47.1356 541.326 mo
47.0501 542.94 45.9945 544.197 44.7772 544.134 cv
43.5599 544.069 42.6419 542.709 42.7269 541.094 cv
42.8119 539.479 43.868 538.222 45.0853 538.286 cv
46.3026 538.35 47.2206 539.711 47.1356 541.326 cv
cp
f
54.5628 533.611 mo
54.4774 535.226 53.4217 536.483 52.2044 536.419 cv
50.9872 536.355 50.0692 534.994 50.1541 533.38 cv
50.2391 531.764 51.2953 530.508 52.5125 530.572 cv
53.7298 530.635 54.6478 531.997 54.5628 533.611 cv
cp
f
85.9105 627.545 mo
86.0189 625.483 87.367 623.879 88.9212 623.96 cv
90.4754 624.042 91.6473 625.779 91.5389 627.841 cv
91.43 629.903 90.0824 631.508 88.5282 631.426 cv
86.974 631.344 85.8016 629.606 85.9105 627.545 cv
cp
f
86.7542 611.515 mo
86.8631 609.454 88.2108 607.849 89.7655 607.931 cv
91.3197 608.012 92.4916 609.751 92.3827 611.812 cv
92.2743 613.874 90.9261 615.478 89.3719 615.396 cv
87.8177 615.314 86.6459 613.577 86.7542 611.515 cv
cp
f
77.2718 621.365 mo
77.3802 619.303 78.7284 617.698 80.2826 617.78 cv
81.8368 617.862 83.0086 619.599 82.9002 621.661 cv
82.7914 623.722 81.4437 625.328 79.8895 625.246 cv
78.3353 625.164 77.1629 623.427 77.2718 621.365 cv
cp
f
44.4178 590.074 mo
44.3304 591.737 43.3094 593.034 42.1371 592.972 cv
40.9652 592.911 40.0858 591.513 40.1732 589.851 cv
40.2611 588.188 41.2821 586.891 42.454 586.953 cv
43.6263 587.014 44.5052 588.412 44.4178 590.074 cv
cp
f
49.2669 594.986 mo
49.1795 596.648 48.1581 597.946 46.9862 597.884 cv
45.8138 597.822 44.9349 596.425 45.0223 594.762 cv
45.1097 593.1 46.1307 591.802 47.3031 591.865 cv
48.4749 591.927 49.3543 593.324 49.2669 594.986 cv
cp
f
44.7064 577.673 mo
44.6185 579.335 43.5975 580.633 42.4251 580.57 cv
41.2533 580.509 40.3739 579.111 40.4618 577.449 cv
40.5492 575.787 41.5702 574.489 42.7425 574.552 cv
43.9144 574.613 44.7938 576.01 44.7064 577.673 cv
cp
f
89.1844 558.102 mo
89.1507 556.241 90.1874 554.714 91.4999 554.689 cv
92.8119 554.666 93.9027 556.155 93.9364 558.016 cv
93.9701 559.877 92.9334 561.405 91.6214 561.428 cv
90.3094 561.452 89.2181 559.963 89.1844 558.102 cv
cp
f
82.6903 552.61 mo
82.6566 550.749 83.6932 549.221 85.0052 549.198 cv
86.3172 549.174 87.4085 550.663 87.4422 552.524 cv
87.4759 554.385 86.4393 555.913 85.1268 555.936 cv
83.8148 555.961 82.724 554.47 82.6903 552.61 cv
cp
f
88.8739 569.869 mo
88.8402 568.009 89.8768 566.48 91.1888 566.457 cv
92.5013 566.433 93.5921 567.923 93.6258 569.783 cv
93.6595 571.644 92.6229 573.172 91.3109 573.195 cv
89.9984 573.219 88.9076 571.73 88.8739 569.869 cv
cp
f
46.3465 554.35 mo
53.6263 558.789 li
56.7938 558.749 li
55.2889 553.765 li
46.8373 547.08 li
46.3465 554.35 li
cp
f
15.2259 620.424 mo
20.867 594.631 37.5345 581.1 48.7318 582.016 cv
61.162 583.034 78.221 600.271 78.6708 629.608 cv
51.4935 639.252 28.5707 633.594 15.2259 620.424 cv
cp
1 1 1 rgb
f
45.8436 579.306 mo
52.3275 582.42 li
55.1751 581.822 li
53.889 577.153 li
46.3817 572.021 li
45.8436 579.306 li
cp
.811765 .815686 .807843 rgb
f
87.0248 576.456 mo
80.7108 573.654 li
79.6341 569.879 li
82.6185 565.535 li
87.888 567.465 li
87.0248 576.456 li
cp
f
84.8753 605.689 mo
78.5775 602.583 li
77.5169 598.507 li
80.516 593.88 li
85.7738 596.034 li
84.8753 605.689 li
cp
f
14.8729 620.185 mo
25.5423 596.12 37.3446 584.711 48.5414 585.627 cv
60.972 586.643 72.6092 602.681 80.1219 629.831 cv
51.2591 648.474 27.2303 638.626 14.8729 620.185 cv
cp
1 .713726 .168627 rgb
f
47.9295 587.282 mo
45.0824 587.146 42.1957 587.76 39.307 589.12 cv
35.8055 595.51 34.0951 604.829 35.099 615.011 cv
35.9754 623.899 38.7542 631.802 42.5702 637.48 cv
50.786 638.946 60.0667 638.077 70.0824 633.978 cv
72.3485 627.956 73.3143 620.265 72.4999 612.002 cv
72.3749 610.733 72.2103 609.488 72.0101 608.262 cv
65.2411 595.388 57.0296 588.003 48.4559 587.316 cv
48.2811 587.302 48.1048 587.29 47.9295 587.282 cv
cp
1 .85098 .168627 rgb
f
160.183 646.346 mo
149.832 645.597 li
145.234 640.019 li
150.986 635.19 li
161.337 635.938 li
165.935 641.516 li
160.183 646.346 li
cp
f
198.332 632.296 mo
189.571 631.687 li
185.644 627.623 li
190.479 624.167 li
199.242 624.775 li
203.168 628.84 li
198.332 632.296 li
cp
f
258.168 558.198 mo
252.187 554.92 li
247.071 557.612 li
247.936 563.582 li
253.918 566.861 li
259.034 564.169 li
258.168 558.198 li
cp
1 1 0 rgb
f
238.108 530.975 mo
230.245 531.619 li
225.344 526.094 li
228.305 519.925 li
236.168 519.282 li
241.07 524.806 li
238.108 530.975 li
cp
f
156.46 525.479 mo
148.677 518.612 139.979 511.633 131.269 513.122 cv
122.52 514.619 113.069 521.301 106.316 530.211 cv
102.733 527.13 98.2918 525.338 94.245 525.598 cv
86.5926 526.092 83.0731 530.583 79.0711 535.785 cv
98.0438 547.022 li
100.027 548.199 li
106.731 546.968 li
161.532 536.921 li
164.579 536.365 li
168.823 535.585 li
196.116 530.856 li
192.542 524.011 179.847 514.309 173.007 514.255 cv
166.167 514.2 157.604 520.155 156.46 525.479 cv
cp
1 .713726 .168627 rgb
f
74.3006 439.406 mo
202.566 431.979 li
170.501 501.792 li
42.3783 520.794 li
42.0579 520.569 li
42.0847 519.749 li
74.3006 439.406 li
.407843 .407843 .407843 rgb
f
66.5423 440.673 mo
46.0155 448.101 38.3275 456.17 33.1507 479.281 cv
27.974 502.391 42.0399 520.478 42.0399 520.478 cv
74.8104 439.221 li
74.0404 438.903 69.1888 439.715 66.5423 440.672 cv
66.5423 440.673 li
cp
.811765 .815686 .807843 rgb
f
74.3006 439.406 mo
202.566 431.979 li
201.639 433.924 li
72.8592 442.017 li
74.3006 439.406 li
cp
1 1 1 rgb
f
79.3162 450.454 mo
189.141 440.738 li
165.589 498.382 li
55.4695 513.692 li
79.3162 450.454 li
.494118 .215686 .0509804 rgb
f
165.471 481.677 mo
62.7302 493.992 li
61.936 496.15 li
165.364 483.624 li
165.471 481.677 li
.25098 .0901961 .00784314 rgb
f
177.377 441.779 mo
178.646 441.229 179.979 440.726 181.38 440.268 cv
188.615 438.816 li
187.802 440.856 li
177.377 441.779 li
.407843 .407843 .407843 rgb
f
166.563 494.179 mo
163.882 492.09 160.668 488.887 158.596 484.444 cv
165.364 483.624 li
165.471 481.677 li
157.829 482.593 li
156.687 479.452 156.135 475.769 156.65 471.507 cv
158.339 457.532 164.542 447.334 177.377 441.779 cv
187.802 440.856 li
166.563 494.179 li
.494118 .215686 .0509804 rgb
f
158.596 484.444 mo
158.318 483.849 158.061 483.232 157.829 482.593 cv
165.471 481.677 li
165.364 483.624 li
158.596 484.444 li
.25098 .0901961 .00784314 rgb
f
165.588 480.09 mo
63.3431 492.351 li
62.5409 494.509 li
165.482 482.037 li
165.588 480.09 li
cp
.592157 .258824 .0588235 rgb
f
64.0648 450.532 mo
58.0995 452.513 li
43.6839 459.966 40.0267 466.63 38.4442 479.734 cv
37.2474 489.64 39.1136 501.058 43.2093 504.252 cv
64.0648 450.532 li
cp
.25098 .0901961 .00784314 rgb
f
69.2445 497.242 mo
66.6463 507.952 li
152.647 496.888 li
153.893 486.108 li
69.2445 497.242 li
cp
.403922 .168627 .0352941 rgb
f
171.665 457.427 mo
73.5111 466.223 li
72.5897 468.725 li
171.565 459.183 li
171.665 457.427 li
cp
.25098 .0901961 .00784314 rgb
f
171.783 455.841 mo
74.1122 464.599 li
73.1908 467.101 li
171.682 457.603 li
171.783 455.841 li
cp
.592157 .258824 .0588235 rgb
f
187.803 441.372 mo
174.389 441.367 161.398 452.154 157.188 467.807 cv
154.028 479.56 156.605 491.135 163.075 498.732 cv
165.591 498.384 li
188.872 441.404 li
188.516 441.388 188.158 441.372 187.803 441.372 cv
cp
.25098 .0901961 .00784314 rgb
f
215.186 574.522 mo
109.629 591.161 li
109.415 595.224 li
214.972 578.586 li
215.186 574.522 li
cp
f
215.325 571.893 mo
109.767 588.532 li
109.554 592.594 li
215.11 575.957 li
215.325 571.893 li
cp
.694118 .301961 .0705882 rgb
f
111.023 576.048 mo
122.285 574.606 li
124.918 576.101 li
110.774 577.559 li
111.023 576.048 li
cp
1 1 1 rgb
f
108.87 608.889 mo
119.19 607.623 li
121.83 608.987 li
108.62 610.41 li
108.87 608.889 li
cp
f
216.506 554.754 mo
208.366 555.702 li
206.692 557.713 li
216.871 556.179 li
216.506 554.754 li
cp
f
214.246 589.044 mo
206.521 590.563 li
205.102 592.658 li
214.73 590.416 li
214.246 589.044 li
cp
f
104.935 554.746 mo
105.883 554.797 106.603 555.734 106.545 556.843 cv
106.487 557.95 105.671 558.807 104.724 558.758 cv
103.777 558.708 103.056 557.769 103.115 556.662 cv
103.173 555.553 103.988 554.696 104.935 554.746 cv
cp
.811765 .815686 .807843 rgb
f
104.458 567.31 mo
105.18 567.348 105.728 568.063 105.684 568.907 cv
105.64 569.751 105.018 570.403 104.297 570.366 cv
103.576 570.328 103.027 569.613 103.071 568.769 cv
103.116 567.926 103.737 567.272 104.458 567.31 cv
cp
f
116.235 551.981 mo
117.133 552.028 117.817 552.919 117.761 553.969 cv
117.706 555.019 116.932 555.833 116.034 555.786 cv
115.136 555.738 114.452 554.848 114.507 553.798 cv
114.563 552.747 115.336 551.933 116.235 551.981 cv
cp
f
217.69 607.794 mo
217.058 607.76 216.577 607.134 216.616 606.394 cv
216.655 605.654 217.199 605.082 217.831 605.115 cv
218.464 605.148 218.945 605.775 218.906 606.514 cv
218.868 607.255 218.323 607.827 217.69 607.794 cv
cp
f
217.978 599.041 mo
217.439 599.012 217.029 598.478 217.062 597.847 cv
217.095 597.217 217.559 596.729 218.098 596.758 cv
218.638 596.786 219.048 597.32 219.014 597.95 cv
218.981 598.581 218.517 599.069 217.978 599.041 cv
cp
f
209.901 610.333 mo
209.2 610.297 208.667 609.602 208.71 608.783 cv
208.753 607.964 209.356 607.329 210.057 607.366 cv
210.758 607.403 211.291 608.096 211.248 608.916 cv
211.205 609.736 210.602 610.37 209.901 610.333 cv
cp
f
100.697 617.567 mo
101.576 617.614 102.24 618.56 102.181 619.682 cv
102.122 620.803 101.362 621.676 100.483 621.629 cv
99.6034 621.583 98.9388 620.635 98.9979 619.514 cv
99.057 618.393 99.8172 617.521 100.697 617.567 cv
cp
f
100.085 628.255 mo
100.866 628.296 101.456 629.136 101.404 630.133 cv
101.351 631.129 100.676 631.903 99.8954 631.862 cv
99.1141 631.821 98.5238 630.98 98.5765 629.984 cv
98.6288 628.987 99.3041 628.214 100.085 628.255 cv
cp
f
108.404 627.729 mo
109.205 627.771 109.811 628.635 109.757 629.657 cv
109.703 630.679 109.01 631.474 108.209 631.432 cv
107.407 631.389 106.801 630.527 106.855 629.504 cv
106.909 628.481 107.602 627.687 108.404 627.729 cv
cp
f
220.179 549.816 mo
219.38 549.774 218.776 548.914 218.829 547.894 cv
218.883 546.875 219.574 546.083 220.373 546.125 cv
221.172 546.167 221.776 547.027 221.723 548.047 cv
221.669 549.066 220.978 549.858 220.179 549.816 cv
cp
f
220.769 540.208 mo
219.97 540.165 219.366 539.304 219.419 538.285 cv
219.473 537.266 220.164 536.473 220.963 536.515 cv
221.762 536.557 222.367 537.419 222.313 538.437 cv
222.259 539.457 221.568 540.25 220.769 540.208 cv
cp
f
212.77 540.234 mo
212.043 540.196 211.493 539.413 211.542 538.485 cv
211.591 537.557 212.22 536.837 212.947 536.875 cv
213.674 536.913 214.224 537.696 214.175 538.624 cv
214.126 539.552 213.497 540.272 212.77 540.234 cv
cp
f
81.7875 568.426 mo
83.096 566.338 li
87.4549 567.765 li
87.3163 570.394 li
81.7875 568.426 li
cp
1 1 1 rgb
f
79.2015 597.052 mo
80.9945 594.869 li
85.2337 596.291 li
84.8436 599.146 li
79.2015 597.052 li
cp
f
47.0038 573.545 mo
46.6644 575.444 li
53.4071 579.394 li
53.5077 577.482 li
47.0038 573.545 li
cp
f
47.2499 548.391 mo
46.8724 551.008 li
54.6532 555.732 li
54.0433 553.663 li
47.2499 548.391 li
cp
f
47.1595 528.259 mo
47.1092 529.213 46.4852 529.956 45.7655 529.918 cv
45.0457 529.881 44.5033 529.076 44.5531 528.121 cv
44.6034 527.167 45.2279 526.424 45.9476 526.461 cv
46.6673 526.499 47.2098 527.303 47.1595 528.259 cv
cp
f
46.2044 540.798 mo
46.161 541.624 45.6205 542.267 44.9969 542.235 cv
44.3739 542.202 43.9037 541.506 43.9471 540.678 cv
43.9906 539.851 44.5316 539.208 45.1546 539.241 cv
45.7782 539.274 46.2479 539.97 46.2044 540.798 cv
cp
f
53.7332 533.328 mo
53.6898 534.151 53.1517 534.791 52.5316 534.759 cv
51.9115 534.725 51.4437 534.032 51.4872 533.21 cv
51.5301 532.387 52.0682 531.747 52.6883 531.779 cv
53.3084 531.812 53.7762 532.506 53.7332 533.328 cv
cp
f
87.5975 626.915 mo
87.661 625.711 88.4476 624.774 89.3553 624.822 cv
90.2626 624.87 90.9466 625.884 90.8832 627.088 cv
90.8197 628.291 90.0331 629.228 89.1253 629.18 cv
88.2181 629.133 87.534 628.118 87.5975 626.915 cv
cp
f
88.4652 610.886 mo
88.5184 609.876 89.1795 609.089 89.9417 609.129 cv
90.704 609.169 91.2787 610.021 91.2254 611.032 cv
91.1722 612.043 90.5111 612.83 89.7489 612.79 cv
88.9867 612.75 88.412 611.897 88.4652 610.886 cv
cp
f
79.4608 620.761 mo
79.514 619.75 80.1751 618.963 80.9369 619.004 cv
81.6996 619.044 82.2743 619.895 82.2206 620.906 cv
82.1673 621.918 81.5067 622.705 80.7445 622.665 cv
79.9823 622.624 79.4076 621.772 79.4608 620.761 cv
cp
f
44.036 577.158 mo
43.9916 577.995 43.4779 578.647 42.888 578.617 cv
42.2977 578.586 41.8553 577.882 41.8993 577.046 cv
41.9437 576.209 42.4574 575.555 43.0472 575.587 cv
43.6371 575.618 44.0799 576.321 44.036 577.158 cv
cp
f
90.7093 557.511 mo
90.6898 556.445 91.2835 555.57 92.035 555.556 cv
92.787 555.543 93.4115 556.396 93.431 557.462 cv
93.4501 558.528 92.8563 559.403 92.1048 559.417 cv
91.3534 559.43 90.7284 558.577 90.7093 557.511 cv
cp
f
83.7816 552.369 mo
83.7596 551.166 84.43 550.177 85.2782 550.162 cv
86.1268 550.147 86.8324 551.11 86.8539 552.313 cv
86.8758 553.516 86.2054 554.504 85.3573 554.519 cv
84.5086 554.535 83.8031 553.572 83.7816 552.369 cv
cp
f
90.6585 569.154 mo
90.6429 568.287 91.1258 567.575 91.7372 567.564 cv
92.3485 567.553 92.8573 568.247 92.8729 569.114 cv
92.8885 569.981 92.4056 570.693 91.7938 570.704 cv
91.1825 570.716 90.6742 570.021 90.6585 569.154 cv
cp
f
93.8031 527.481 mo
89.9603 527.556 86.8387 529.139 84.2108 531.389 cv
84.3475 534.42 88.6444 537.048 94.0536 537.333 cv
99.6542 537.628 104.324 535.299 104.491 532.135 cv
104.54 531.185 104.181 530.269 103.5 529.443 cv
101.142 528.219 97.6454 527.406 93.8031 527.481 cv
cp
132.84 515.198 mo
125.52 515.537 119.667 520.139 114.259 524.309 cv
115.706 529.663 123.004 534.017 131.996 534.491 cv
142.264 535.032 150.86 530.309 148.403 524.951 cv
145.945 519.594 140.159 514.858 132.84 515.198 cv
cp
174.539 517.799 mo
174.42 517.792 174.296 517.789 174.178 517.786 cv
169.233 517.66 164.043 520.488 159.922 524.291 cv
160.512 528.177 165.532 531.418 171.798 531.748 cv
178.612 532.107 184.322 528.888 182.675 524.247 cv
181.029 519.606 177.662 517.987 174.539 517.799 cv
cp
1 .85098 .168627 rgb
f
41.9515 520.631 mo
41.93 521.595 li
95.2264 553.516 li
92.2093 638.505 li
92.62 638.625 li
98.076 554.026 li
223.508 533.306 li
220.096 611.916 li
220.843 611.655 li
225.047 532.104 li
225.175 530.342 li
96.7674 551.56 li
41.9515 520.631 li
cp
1 1 1 rgb
f
42.7064 519.952 mo
170.506 500.797 li
172.796 502.835 li
44.5052 522.204 li
42.0218 520.659 li
42.7064 519.952 li
cp
.301961 .301961 .301961 rgb
f
163.41 558.948 mo
171.4 557.732 178.053 562.614 178.27 569.853 cv
178.487 577.092 172.186 583.945 164.196 585.161 cv
156.206 586.377 149.553 581.495 149.336 574.257 cv
149.119 567.017 155.42 560.164 163.41 558.948 cv
cp
.25098 .0901961 .00784314 rgb
f
163.817 572.537 mo
175.741 603.001 li
153.821 606.337 li
163.817 572.537 li
cp
f
169.185 559.729 mo
171.795 561.632 173.471 564.629 173.567 568.222 cv
173.694 572.976 171.342 577.921 167.604 580.194 cv
166.639 580.781 165.22 581.294 163.894 581.76 cv
163.894 581.76 166.267 587.63 165.152 584.802 cv
170.846 600.002 li
155.585 602.445 li
154.723 605.47 li
175.058 602.36 li
167.589 583.583 li
173.121 581.131 177.728 575.827 177.574 570.071 cv
177.434 564.869 173.993 560.929 169.185 559.729 cv
cp
.403922 .168627 .0352941 rgb
f
168.165 558.916 mo
171.486 559.57 178.508 561.601 178.58 570.489 cv
178.654 579.378 168.875 584.12 168.875 584.12 cv
175.912 602.945 li
153.923 606.342 li
154.332 605.404 li
174.277 602.14 li
166.856 583.773 li
166.856 583.773 176.73 579.169 176.549 570.383 cv
176.368 561.595 168.165 558.916 168.165 558.916 cv
cp
.694118 .301961 .0705882 rgb
f
76.0414 471.161 mo
71.0414 488.863 li
152.203 479.579 li
156.42 463.87 li
76.0414 471.161 li
cp
.403922 .168627 .0352941 rgb
f
82.6952 454.224 mo
80.3114 460.879 li
156.865 455.419 li
163.163 445.243 li
82.6952 454.224 li
cp
f
68.2997 463.868 mo
69.0677 463.908 69.6283 465.12 69.5516 466.575 cv
69.475 468.031 68.7904 469.177 68.0223 469.136 cv
67.2542 469.096 66.6937 467.885 66.7704 466.428 cv
66.847 464.973 67.5316 463.827 68.2997 463.868 cv
cp
68.3978 462.006 mo
67.0873 461.936 65.9198 463.894 65.7889 466.377 cv
65.6585 468.86 66.6136 470.929 67.9242 470.999 cv
69.2342 471.067 70.4022 469.109 70.5331 466.627 cv
70.6634 464.144 69.7079 462.075 68.3978 462.006 cv
cp
.811765 .815686 .807843 rgb
f
68.8841 472.777 mo
69.6219 472.759 70.2518 473.878 70.2865 475.275 cv
70.3211 476.673 69.7499 477.824 69.0126 477.843 cv
68.2748 477.861 67.6444 476.741 67.6102 475.344 cv
67.5755 473.946 68.1463 472.795 68.8841 472.777 cv
cp
68.8329 470.806 mo
67.5213 470.839 66.5091 472.882 66.5707 475.367 cv
66.6322 477.852 67.7445 479.838 69.0565 479.804 cv
70.368 479.772 71.3876 477.738 71.326 475.253 cv
71.2645 472.767 70.1449 470.774 68.8329 470.806 cv
cp
f
70.1781 481.01 mo
71.0189 480.99 71.7323 482.26 71.7718 483.852 cv
71.8109 485.445 71.1566 486.754 70.3163 486.774 cv
69.4759 486.795 68.7621 485.525 68.723 483.932 cv
68.6834 482.34 69.3377 481.031 70.1781 481.01 cv
cp
70.1395 479.389 mo
68.828 479.422 67.8084 481.464 67.8695 483.949 cv
67.931 486.434 69.0511 488.421 70.3631 488.388 cv
71.6747 488.355 72.6864 486.321 72.6249 483.836 cv
72.5633 481.35 71.4515 479.357 70.1395 479.389 cv
cp
f
71.4501 490.692 mo
72.1878 490.674 72.8104 491.793 72.8451 493.19 cv
72.8797 494.588 72.3084 495.739 71.5707 495.758 cv
70.8334 495.776 70.2108 494.657 70.1761 493.26 cv
70.1415 491.862 70.7127 490.711 71.4501 490.692 cv
cp
71.3993 488.721 mo
70.0873 488.754 69.0755 490.797 69.1371 493.282 cv
69.1981 495.767 70.3109 497.753 71.6224 497.72 cv
72.9339 497.688 73.9457 495.653 73.8841 493.168 cv
73.8226 490.682 72.7108 488.689 71.3993 488.721 cv
cp
f
72.5184 499.388 mo
73.2518 499.307 73.9671 500.369 74.1205 501.759 cv
74.2738 503.148 73.8031 504.344 73.0697 504.425 cv
72.3363 504.506 71.6209 503.444 71.4671 502.054 cv
71.3138 500.665 71.785 499.469 72.5184 499.388 cv
cp
72.2997 497.429 mo
70.9955 497.573 70.161 499.694 70.4339 502.166 cv
70.7064 504.636 71.9837 506.52 73.2879 506.377 cv
74.5921 506.232 75.4271 504.119 75.1542 501.647 cv
74.8812 499.177 73.6039 497.285 72.2997 497.429 cv
cp
f
73.8749 507.834 mo
74.6039 507.719 75.3666 508.749 75.5829 510.13 cv
75.7992 511.51 75.3827 512.726 74.6542 512.841 cv
73.9251 512.955 73.162 511.927 72.9461 510.545 cv
72.7298 509.164 73.1459 507.948 73.8749 507.834 cv
cp
73.5677 505.886 mo
72.2713 506.09 71.534 508.247 71.9183 510.703 cv
72.3026 513.159 73.6644 514.983 74.9608 514.78 cv
76.2567 514.577 76.995 512.427 76.6107 509.971 cv
76.2259 507.515 74.8641 505.684 73.5677 505.886 cv
cp
f
75.3363 516.438 mo
76.0653 516.324 76.828 517.352 77.0443 518.734 cv
77.2606 520.115 76.8441 521.331 76.1151 521.445 cv
75.3861 521.559 74.6234 520.53 74.4071 519.149 cv
74.1908 517.768 74.6073 516.552 75.3363 516.438 cv
cp
75.0287 514.491 mo
73.7323 514.694 72.995 516.851 73.3797 519.307 cv
73.764 521.763 75.1253 523.587 76.4217 523.385 cv
77.7181 523.181 78.4564 521.032 78.0716 518.576 cv
77.6874 516.12 76.3251 514.288 75.0287 514.491 cv
cp
f
76.7152 524.951 mo
77.4442 524.837 78.2069 525.865 78.4232 527.247 cv
78.6395 528.628 78.223 529.844 77.494 529.958 cv
76.765 530.072 76.0023 529.043 75.786 527.662 cv
75.5697 526.281 75.9862 525.065 76.7152 524.951 cv
cp
76.4081 523.004 mo
75.1117 523.207 74.3739 525.364 74.7586 527.82 cv
75.1429 530.276 76.5042 532.1 77.8006 531.897 cv
79.097 531.694 79.8353 529.545 79.4505 527.089 cv
79.0663 524.633 77.704 522.801 76.4081 523.004 cv
cp
f
78.2674 533.473 mo
78.9964 533.359 79.7596 534.387 79.9754 535.768 cv
80.1917 537.15 79.7757 538.366 79.0467 538.479 cv
78.3177 538.594 77.555 537.565 77.3387 536.184 cv
77.1224 534.802 77.5389 533.588 78.2674 533.473 cv
cp
77.9603 531.526 mo
76.6639 531.729 75.9266 533.885 76.3109 536.342 cv
76.6957 538.799 78.057 540.622 79.3534 540.419 cv
80.6498 540.217 81.3876 538.067 81.0033 535.611 cv
80.6185 533.155 79.2567 531.323 77.9603 531.526 cv
cp
f
188.209 452.556 mo
188.977 452.596 189.538 453.808 189.461 455.264 cv
189.385 456.719 188.7 457.866 187.932 457.825 cv
187.164 457.785 186.603 456.573 186.68 455.118 cv
186.757 453.662 187.441 452.515 188.209 452.556 cv
cp
188.307 450.694 mo
186.997 450.625 185.829 452.583 185.699 455.066 cv
185.568 457.549 186.523 459.618 187.834 459.687 cv
189.144 459.757 190.312 457.799 190.443 455.315 cv
190.573 452.833 189.618 450.763 188.307 450.694 cv
cp
f
188.794 461.466 mo
189.532 461.447 190.161 462.567 190.196 463.965 cv
190.231 465.362 189.66 466.513 188.922 466.531 cv
188.184 466.55 187.554 465.43 187.52 464.033 cv
187.485 462.635 188.056 461.484 188.794 461.466 cv
cp
188.743 459.495 mo
187.431 459.527 186.419 461.57 186.48 464.055 cv
186.542 466.541 187.654 468.526 188.966 468.494 cv
190.278 468.462 191.297 466.427 191.236 463.941 cv
191.174 461.456 190.055 459.463 188.743 459.495 cv
cp
f
190.088 469.699 mo
190.929 469.678 191.642 470.949 191.681 472.542 cv
191.721 474.134 191.066 475.442 190.226 475.463 cv
189.386 475.484 188.672 474.214 188.633 472.621 cv
188.593 471.028 189.247 469.72 190.088 469.699 cv
cp
190.049 468.078 mo
188.738 468.11 187.718 470.153 187.779 472.638 cv
187.841 475.124 188.961 477.109 190.273 477.077 cv
191.584 477.045 192.596 475.01 192.535 472.524 cv
192.473 470.039 191.361 468.046 190.049 468.078 cv
cp
f
191.36 479.381 mo
192.098 479.363 192.72 480.482 192.755 481.88 cv
192.789 483.277 192.218 484.428 191.48 484.446 cv
190.743 484.465 190.12 483.345 190.086 481.948 cv
190.051 480.551 190.622 479.399 191.36 479.381 cv
cp
191.309 477.41 mo
189.997 477.443 188.985 479.485 189.047 481.97 cv
189.108 484.456 190.221 486.441 191.532 486.409 cv
192.844 486.377 193.855 484.342 193.794 481.856 cv
193.732 479.371 192.62 477.378 191.309 477.41 cv
cp
f
192.428 488.077 mo
193.161 487.996 193.877 489.058 194.03 490.448 cv
194.183 491.837 193.713 493.033 192.979 493.114 cv
192.246 493.195 191.531 492.133 191.377 490.743 cv
191.223 489.353 191.695 488.158 192.428 488.077 cv
cp
192.209 486.118 mo
190.905 486.262 190.071 488.384 190.344 490.854 cv
190.616 493.326 191.893 495.209 193.198 495.065 cv
194.502 494.921 195.337 492.807 195.064 490.337 cv
194.791 487.865 193.514 485.974 192.209 486.118 cv
cp
f
193.785 496.523 mo
194.514 496.409 195.276 497.437 195.493 498.818 cv
195.709 500.199 195.292 501.415 194.564 501.529 cv
193.835 501.643 193.072 500.615 192.856 499.234 cv
192.639 497.852 193.056 496.636 193.785 496.523 cv
cp
193.477 494.576 mo
192.181 494.779 191.444 496.935 191.828 499.391 cv
192.212 501.847 193.574 503.672 194.87 503.469 cv
196.166 503.265 196.905 501.117 196.52 498.661 cv
196.136 496.204 194.774 494.373 193.477 494.576 cv
cp
f
195.246 505.127 mo
195.975 505.012 196.738 506.042 196.954 507.423 cv
197.17 508.803 196.754 510.019 196.025 510.134 cv
195.296 510.248 194.533 509.219 194.317 507.838 cv
194.1 506.457 194.517 505.241 195.246 505.127 cv
cp
194.938 503.179 mo
193.642 503.383 192.905 505.54 193.289 507.996 cv
193.674 510.452 195.035 512.276 196.331 512.073 cv
197.628 511.87 198.366 509.72 197.981 507.264 cv
197.597 504.808 196.235 502.977 194.938 503.179 cv
cp
f
196.625 513.639 mo
197.354 513.526 198.117 514.554 198.333 515.935 cv
198.549 517.316 198.133 518.532 197.404 518.646 cv
196.675 518.76 195.912 517.732 195.696 516.35 cv
195.479 514.969 195.896 513.754 196.625 513.639 cv
cp
196.318 511.693 mo
195.021 511.895 194.284 514.052 194.668 516.509 cv
195.053 518.965 196.414 520.789 197.71 520.586 cv
199.007 520.383 199.745 518.234 199.36 515.777 cv
198.976 513.321 197.614 511.49 196.318 511.693 cv
cp
f
187.381 540.943 mo
175.584 521.951 li
155.872 530.696 li
174.865 518.899 li
166.118 499.187 li
177.916 518.179 li
197.628 509.434 li
178.635 521.231 li
187.381 540.943 li
cp
1 1 1 rgb
f
172.864 532.014 mo
175.593 520.338 li
164.8 516.179 li
176.477 518.908 li
180.636 508.116 li
177.907 519.793 li
188.7 523.951 li
177.023 521.222 li
172.864 532.014 li
cp
f
91.8412 534.591 mo
102.056 540.871 li
109.414 531.947 li
103.133 542.162 li
112.057 549.52 li
101.842 543.239 li
94.4847 552.163 li
100.765 541.948 li
91.8412 534.591 li
cp
f
124.223 531.544 mo
117.441 530.814 li
113.751 535.264 li
116.843 540.444 li
123.625 541.175 li
127.315 536.724 li
124.223 531.544 li
cp
1 1 0 rgb
f
64.0648 450.532 mo
50.5702 456.862 46.3612 464.091 42.6239 474.007 cv
39.0682 483.442 40.5389 498.548 43.2093 504.252 cv
64.0648 450.532 li
cp
.494118 .215686 .0509804 rgb
f
117.44 181.714 mo
142.308 181.714 162.469 185.484 162.469 190.133 cv
162.469 194.783 142.308 198.552 117.44 198.552 cv
92.5716 198.552 72.4115 194.783 72.4115 190.133 cv
72.4115 185.484 92.5716 181.714 117.44 181.714 cv
cp
.858824 .623529 .313726 rgb
f
102.419 41.9397 mo
102.419 41.9397 li
104.158 41.9397 105.568 44.3333 105.568 47.2864 cv
105.568 150.529 li
105.568 153.481 104.158 155.875 102.419 155.875 cv
100.68 155.875 99.2699 153.481 99.2699 150.529 cv
99.2699 47.2864 li
99.2699 44.3333 100.68 41.9397 102.419 41.9397 cv
cp
.752941 .203922 .027451 rgb
f
102.419 41.9397 mo
102.419 41.9397 li
103.526 41.9397 104.423 44.3333 104.423 47.2864 cv
104.423 150.529 li
104.423 153.481 103.526 155.875 102.419 155.875 cv
101.312 155.875 100.415 153.481 100.415 150.529 cv
100.415 47.2864 li
100.415 44.3333 101.312 41.9397 102.419 41.9397 cv
cp
1 .552941 .219608 rgb
f
82.6151 53.9045 mo
88.1444 58.614 92.4657 70.8162 88.4515 79.5476 cv
116.767 75.4939 li
120.102 69.4275 119.117 58.1868 113.813 56.1067 cv
82.6151 53.9045 li
cp
.74902 .694118 .584314 rgb
f
86.5248 54.6003 mo
91.2508 58.6257 94.9442 69.0549 91.513 76.5178 cv
115.715 73.0535 li
118.565 67.8684 117.723 58.261 113.189 56.4827 cv
86.5248 54.6003 li
cp
.984314 .901961 .72549 rgb
f
102.705 33.0657 mo
106.342 33.0657 109.289 36.0134 109.289 39.6497 cv
109.289 43.2859 106.342 46.2341 102.705 46.2341 cv
99.0687 46.2341 96.1209 43.2859 96.1209 39.6497 cv
96.1209 36.0134 99.0687 33.0657 102.705 33.0657 cv
cp
.752941 .203922 .027451 rgb
f
41.1175 55.135 mo
41.1175 55.135 li
42.0868 55.1257 42.8958 57.5115 42.9247 60.4641 cv
43.6009 130.508 li
43.6292 133.46 42.8666 135.861 41.8973 135.87 cv
40.9281 135.88 40.119 133.494 40.0907 130.541 cv
39.4144 60.4983 li
39.3856 57.5457 40.1483 55.1443 41.1175 55.135 cv
cp
f
41.3309 56.8528 mo
41.3309 56.8528 li
41.7699 56.8435 42.1366 59.1785 42.1498 62.0686 cv
42.4559 130.621 li
42.4691 133.511 42.1234 135.862 41.6839 135.87 cv
41.245 135.88 40.8783 133.545 40.8656 130.655 cv
40.5589 62.1018 li
40.5457 59.2117 40.8915 56.8616 41.3309 56.8528 cv
cp
1 .552941 .219608 rgb
f
44.7396 60.6296 mo
26.9457 54.8611 2.15268 71.0027 5.74302 87.9353 cv
8.07016 84.3875 10.8812 76.7454 15.4496 75.406 cv
13.722 76.8572 13.1146 80.5877 13.2372 82.1829 cv
24.7503 65.9334 34.0277 71.5745 42.9979 73.8762 cv
45.5428 69.676 46.6351 64.1414 44.7396 60.6296 cv
cp
.831373 .188235 .215686 rgb
f
141.924 12.968 mo
141.924 12.968 li
143.663 12.968 145.073 15.6204 145.073 18.8918 cv
145.073 133.288 li
145.073 136.56 143.663 139.213 141.924 139.213 cv
140.185 139.213 138.775 136.56 138.775 133.288 cv
138.775 18.8918 li
138.775 15.6204 140.185 12.968 141.924 12.968 cv
cp
.752941 .203922 .027451 rgb
f
141.924 12.968 mo
141.924 12.968 li
142.714 12.968 143.355 15.6204 143.355 18.8918 cv
143.355 133.288 li
143.355 136.56 142.714 139.213 141.924 139.213 cv
141.133 139.213 140.493 136.56 140.493 133.288 cv
140.493 18.8918 li
140.493 15.6204 141.133 12.968 141.924 12.968 cv
cp
1 .552941 .219608 rgb
f
120.105 62.7459 mo
127.837 70.3298 134.1 91.4085 128.802 107.507 cv
167.665 96.2542 li
172.098 84.9905 170.45 65.1443 163.097 62.2039 cv
120.105 62.7459 li
cp
.74902 .694118 .584314 rgb
f
124.189 63.7488 mo
131.034 70.4622 136.578 89.1218 131.888 103.373 cv
166.291 93.4114 li
170.214 83.4407 168.756 65.8723 162.246 63.2688 cv
124.189 63.7488 li
cp
.984314 .901961 .72549 rgb
f
129.699 64.6716 mo
135.34 70.2044 140.203 82.8381 137.866 91.1091 cv
135.528 99.3801 163.645 92.2576 165.263 88.1487 cv
166.879 84.0403 166.431 66.4216 161.066 64.2761 cv
129.699 64.6716 li
cp
1 .976471 .803922 rgb
f
168.913 87.7976 mo
206.337 87.7976 li
209.29 87.7976 211.683 90.1912 211.683 93.1438 cv
211.683 96.0964 209.29 98.49 206.337 98.49 cv
168.913 98.49 li
165.96 98.49 163.566 96.0964 163.566 93.1438 cv
163.566 90.1912 165.96 87.7976 168.913 87.7976 cv
cp
.752941 .203922 .027451 rgb
f
62.3739 166.079 mo
62.3739 166.079 74.9515 177.842 79.8202 188.794 cv
79.8202 188.794 103.866 195.461 118.36 195.461 cv
133.075 195.461 156.843 188.794 156.843 188.794 cv
160.203 176.107 175.765 166.079 175.765 166.079 cv
62.3739 166.079 li
cp
.807843 .196078 .0470588 rgb
f
68.6717 167.711 mo
68.6717 167.711 79.8524 178.167 84.18 187.903 cv
84.18 187.903 105.555 193.829 118.439 193.829 cv
131.519 193.829 152.647 187.903 152.647 187.903 cv
155.634 176.625 169.468 167.711 169.468 167.711 cv
68.6717 167.711 li
cp
1 .552941 .219608 rgb
f
166.75 97.9817 mo
166.472 100.823 168.914 107.845 163.354 112.834 cv
157.794 117.823 146.339 115.471 144.719 117.092 cv
143.098 118.712 143.105 138.674 116.91 138.947 cv
88.4149 139.243 81.8036 116.595 81.8036 116.595 cv
81.8036 116.595 31.9247 115.944 32.0604 117.403 cv
35.91 158.764 63.0184 180.776 119.073 182.77 cv
175.127 184.763 206.56 154.943 206.56 106.624 cv
206.56 103.709 206.419 100.823 206.141 97.9817 cv
166.75 97.9817 li
cp
.752941 .203922 .027451 rgb
f
169.304 101.666 mo
169.603 105.057 169.712 109.664 165.552 113.241 cv
164.572 114.083 163.416 114.716 162.166 115.196 cv
161.912 115.433 li
157.426 119.29 148.974 118.411 145.385 118.886 cv
144.18 122.788 142.055 133.443 128.976 137.71 cv
125.788 138.856 121.857 139.58 116.989 139.629 cv
113.461 139.664 110.285 139.346 107.42 138.773 cv
89.744 135.664 82.745 123.564 80.6664 118.891 cv
71.0824 118.792 34.8104 118.49 34.9247 119.664 cv
38.6478 157.99 64.8631 178.389 119.078 180.236 cv
173.293 182.084 203.697 154.449 203.697 109.676 cv
203.697 106.974 203.563 104.299 203.294 101.666 cv
169.304 101.666 li
cp
1 .552941 .219608 rgb
f
119.622 150.781 mo
125.833 150.781 li
122.728 163.203 li
119.622 150.781 li
cp
.752941 .203922 .027451 rgb
f
122.037 149.402 mo
128.248 149.402 li
125.143 161.823 li
122.037 149.402 li
cp
f
124.625 147.676 mo
130.836 147.676 li
127.731 160.098 li
124.625 147.676 li
cp
f
182.076 110.929 mo
188.286 110.929 li
185.181 123.35 li
182.076 110.929 li
cp
f
185.871 111.101 mo
190.357 111.101 li
188.114 120.073 li
185.871 111.101 li
cp
f
144.273 129.425 mo
143.643 130.201 142.928 130.969 142.125 131.711 cv
201.028 131.711 li
201.235 130.956 201.428 130.194 201.614 129.425 cv
144.273 129.425 li
cp
36.3817 129.425 mo
36.5545 130.195 36.7342 130.956 36.9271 131.711 cv
87.0209 131.711 li
85.9554 130.969 84.9691 130.203 84.0692 129.425 cv
36.3817 129.425 li
cp
f
44.9315 150.713 mo
45.6156 151.789 46.3304 152.839 47.0809 153.862 cv
190.362 153.862 li
191.093 152.836 191.798 151.787 192.471 150.713 cv
44.9315 150.713 li
cp
f
62.93 167.613 mo
65.0233 169.047 67.243 170.384 69.5936 171.617 cv
170.201 171.617 li
172.267 170.377 174.24 169.044 176.117 167.613 cv
62.93 167.613 li
cp
f
167.906 109.949 mo
167.392 110.953 166.694 111.925 165.742 112.832 cv
165.467 113.094 165.172 113.335 164.868 113.558 cv
164.868 113.954 li
203.764 113.954 li
203.85 112.635 203.909 111.3 203.947 109.949 cv
167.906 109.949 li
cp
f
28.932 87.7976 mo
75.5638 87.7976 li
79.243 87.7976 82.2259 90.1912 82.2259 93.1438 cv
82.2259 96.0964 79.243 98.49 75.5638 98.49 cv
28.932 98.49 li
25.2528 98.49 22.2704 96.0964 22.2704 93.1438 cv
22.2704 90.1912 25.2528 87.7976 28.932 87.7976 cv
cp
f
28.932 113.002 mo
75.5638 113.002 li
79.243 113.002 82.2259 115.395 82.2259 118.348 cv
82.2259 121.301 79.243 123.695 75.5638 123.695 cv
28.932 123.695 li
25.2528 123.695 22.2704 121.301 22.2704 118.348 cv
22.2704 115.395 25.2528 113.002 28.932 113.002 cv
cp
f
31.4354 93.1438 mo
31.4354 93.1438 li
33.1229 93.1438 34.4906 95.5374 34.4906 98.49 cv
34.4906 112.62 li
34.4906 115.573 33.1229 117.966 31.4354 117.966 cv
29.7484 117.966 28.3802 115.573 28.3802 112.62 cv
28.3802 98.49 li
28.3802 95.5374 29.7484 93.1438 31.4354 93.1438 cv
cp
f
46.329 93.1438 mo
46.329 93.1438 li
48.016 93.1438 49.3841 95.5374 49.3841 98.49 cv
49.3841 112.62 li
49.3841 115.573 48.016 117.966 46.329 117.966 cv
44.6415 117.966 43.2738 115.573 43.2738 112.62 cv
43.2738 98.49 li
43.2738 95.5374 44.6415 93.1438 46.329 93.1438 cv
cp
f
74.2064 93.1438 mo
74.2059 93.1438 li
75.8934 93.1438 77.2611 95.5374 77.2611 98.49 cv
77.2611 112.62 li
77.2611 115.573 75.8934 117.966 74.2059 117.966 cv
74.2064 117.966 li
72.5189 117.966 71.1512 115.573 71.1512 112.62 cv
71.1512 98.49 li
71.1512 95.5374 72.5189 93.1438 74.2064 93.1438 cv
cp
f
61.6043 93.1438 mo
61.6039 93.1438 li
63.2914 93.1438 64.659 95.5374 64.659 98.49 cv
64.659 112.62 li
64.659 115.573 63.2914 117.966 61.6039 117.966 cv
61.6043 117.966 li
59.9168 117.966 58.5492 115.573 58.5492 112.62 cv
58.5492 98.49 li
58.5492 95.5374 59.9168 93.1438 61.6043 93.1438 cv
cp
f
142.21 7.24244 mo
145.847 7.24244 148.794 10.1902 148.794 13.8269 cv
148.794 17.4631 145.847 20.4109 142.21 20.4109 cv
138.574 20.4109 135.626 17.4631 135.626 13.8269 cv
135.626 10.1902 138.574 7.24244 142.21 7.24244 cv
cp
f
144.273 127.806 mo
143.643 128.583 142.928 129.35 142.125 130.092 cv
201.448 130.092 li
201.638 129.338 201.823 128.574 201.993 127.806 cv
144.273 127.806 li
cp
36.0311 127.806 mo
36.1878 128.575 36.3553 129.339 36.5311 130.092 cv
87.0209 130.092 li
85.9554 129.351 84.9691 128.584 84.0692 127.806 cv
36.0311 127.806 li
cp
1 .552941 .219608 rgb
f
43.9339 149.094 mo
44.5692 150.169 45.2367 151.219 45.9344 152.243 cv
191.479 152.243 li
192.164 151.217 192.823 150.166 193.452 149.094 cv
43.9339 149.094 li
cp
f
60.6751 165.994 mo
62.5638 167.418 64.5643 168.754 66.6805 169.999 cv
172.765 169.999 li
174.647 168.748 176.447 167.415 178.158 165.994 cv
60.6751 165.994 li
cp
f
168.579 108.331 mo
168.132 109.716 167.399 111.079 166.232 112.336 cv
203.858 112.336 li
203.925 111.016 203.961 109.68 203.981 108.331 cv
168.579 108.331 li
cp
f
144.273 125.378 mo
144.18 125.493 144.082 125.607 143.985 125.721 cv
143.684 126.36 143.345 127.012 142.963 127.664 cv
202.022 127.664 li
202.188 126.908 202.346 126.147 202.493 125.378 cv
144.273 125.378 li
cp
35.5775 125.378 mo
35.7118 126.148 35.8499 126.91 36.0023 127.664 cv
85.9584 127.664 li
85.308 126.929 84.721 126.194 84.1839 125.473 cv
84.0692 125.378 li
35.5775 125.378 li
cp
1 .796078 .490196 rgb
f
42.5755 146.667 mo
43.1429 147.739 43.7381 148.79 44.3641 149.815 cv
193.021 149.815 li
193.644 148.785 194.24 147.739 194.81 146.667 cv
42.5755 146.667 li
cp
f
57.6668 163.567 mo
59.305 164.98 61.0409 166.312 62.8739 167.572 cv
176.173 167.572 li
177.826 166.308 179.404 164.974 180.908 163.567 cv
57.6668 163.567 li
cp
f
169.097 105.903 mo
168.936 107.232 168.594 108.596 167.929 109.908 cv
203.947 109.908 li
203.978 108.823 203.997 107.728 203.997 106.624 cv
203.997 106.384 203.993 106.143 203.992 105.903 cv
169.097 105.903 li
cp
f
141.799 155.009 mo
148.126 155.009 153.256 160.138 153.256 166.465 cv
153.256 172.792 148.126 177.922 141.799 177.922 cv
135.472 177.922 130.343 172.792 130.343 166.465 cv
130.343 160.138 135.472 155.009 141.799 155.009 cv
cp
.807843 .196078 .0470588 rgb
f
141.797 155.007 mo
136.508 155.007 132.063 158.594 130.745 163.466 cv
131.073 169.5 136.065 174.293 142.181 174.293 cv
147.466 174.293 151.916 170.713 153.239 165.846 cv
152.917 159.807 147.916 155.007 141.797 155.007 cv
cp
.054902 .639216 .960784 rgb
f
106.284 155.009 mo
112.612 155.009 117.741 160.138 117.741 166.465 cv
117.741 172.792 112.612 177.922 106.284 177.922 cv
99.9569 177.922 94.828 172.792 94.828 166.465 cv
94.828 160.138 99.9569 155.009 106.284 155.009 cv
cp
.807843 .196078 .0470588 rgb
f
106.284 155.007 mo
101.098 155.007 96.721 158.455 95.3089 163.182 cv
96.0399 168.805 100.847 173.147 106.668 173.147 cv
111.85 173.147 116.228 169.705 117.643 164.984 cv
116.917 159.356 112.11 155.007 106.284 155.007 cv
cp
.054902 .639216 .960784 rgb
f
177.314 127.895 mo
183.641 127.895 188.771 133.024 188.771 139.351 cv
188.771 145.679 183.641 150.808 177.314 150.808 cv
170.987 150.808 165.858 145.679 165.858 139.351 cv
165.858 133.024 170.987 127.895 177.314 127.895 cv
cp
.807843 .196078 .0470588 rgb
f
177.315 127.894 mo
171.808 127.894 167.21 131.782 166.11 136.962 cv
167.207 142.143 171.806 146.034 177.315 146.034 cv
182.824 146.034 187.423 142.144 188.52 136.962 cv
187.42 131.782 182.822 127.894 177.315 127.894 cv
cp
.054902 .639216 .960784 rgb
f
166.747 97.9817 mo
166.469 100.823 168.917 107.843 163.357 112.832 cv
157.797 117.821 146.341 115.47 144.721 117.091 cv
143.1 118.711 143.107 138.674 116.911 138.947 cv
88.4164 139.243 81.806 116.594 81.806 116.594 cv
81.806 116.594 80.5956 116.584 78.8465 116.565 cv
78.2357 117.926 77.7362 118.573 77.2162 120.393 cv
83.4735 135.668 97.7328 143.833 111.807 146.43 cv
121.698 148.256 135.03 146.767 143.917 134.977 cv
148.051 129.493 148.537 126.843 151.206 124.173 cv
168.906 123.397 174.092 114.995 173.517 97.9817 cv
166.747 97.9817 li
cp
.752941 .203922 .027451 rgb
f
74.2064 139.734 mo
80.5335 139.734 85.6625 144.863 85.6625 151.19 cv
85.6625 157.517 80.5335 162.646 74.2064 162.646 cv
67.8788 162.646 62.7499 157.517 62.7499 151.19 cv
62.7499 144.863 67.8788 139.734 74.2064 139.734 cv
cp
.807843 .196078 .0470588 rgb
f
74.2035 139.732 mo
68.9789 139.732 64.5765 143.232 63.1991 148.013 cv
63.805 153.77 68.6703 158.256 74.5877 158.256 cv
79.8167 158.256 84.2245 154.75 85.598 149.963 cv
84.9867 144.212 80.117 139.732 74.2035 139.732 cv
cp
.054902 .639216 .960784 rgb
f
102.992 33.9246 mo
105.521 33.9246 107.572 35.9749 107.572 38.5046 cv
107.572 41.0344 105.521 43.0852 102.992 43.0852 cv
100.462 43.0852 98.411 41.0344 98.411 38.5046 cv
98.411 35.9749 100.462 33.9246 102.992 33.9246 cv
cp
1 .552941 .219608 rgb
f
142.783 8.67408 mo
145.312 8.67408 147.363 10.7244 147.363 13.2542 cv
147.363 15.7839 145.312 17.8347 142.783 17.8347 cv
140.253 17.8347 138.202 15.7839 138.202 13.2542 cv
138.202 10.7244 140.253 8.67408 142.783 8.67408 cv
cp
f
32.0492 89.2288 mo
72.4471 89.2288 li
75.6341 89.2288 78.2181 90.469 78.2181 91.9988 cv
78.2181 93.5286 75.6341 94.7688 72.4471 94.7688 cv
32.0492 94.7688 li
28.8622 94.7688 26.2782 93.5286 26.2782 91.9988 cv
26.2782 90.469 28.8622 89.2288 32.0492 89.2288 cv
cp
f
31.4354 99.1555 mo
31.4354 99.1555 li
32.4906 99.1555 33.3456 100.39 33.3456 101.912 cv
33.3456 109.198 li
33.3456 110.72 32.4906 111.954 31.4354 111.954 cv
30.3807 111.954 29.5257 110.72 29.5257 109.198 cv
29.5257 101.912 li
29.5257 100.39 30.3807 99.1555 31.4354 99.1555 cv
cp
f
46.6078 99.1555 mo
46.6078 99.1555 li
47.6624 99.1555 48.5179 100.39 48.5179 101.912 cv
48.5179 109.198 li
48.5179 110.72 47.6624 111.954 46.6078 111.954 cv
45.5531 111.954 44.6976 110.72 44.6976 109.198 cv
44.6976 101.912 li
44.6976 100.39 45.5531 99.1555 46.6078 99.1555 cv
cp
f
61.4935 99.1555 mo
61.4935 99.1555 li
62.5487 99.1555 63.4037 100.39 63.4037 101.912 cv
63.4037 109.198 li
63.4037 110.72 62.5487 111.954 61.4935 111.954 cv
60.4388 111.954 59.5838 110.72 59.5838 109.198 cv
59.5838 101.912 li
59.5838 100.39 60.4388 99.1555 61.4935 99.1555 cv
cp
f
74.0897 99.1555 mo
74.0897 99.1555 li
75.1444 99.1555 75.9994 100.39 75.9994 101.912 cv
75.9994 109.198 li
75.9994 110.72 75.1444 111.954 74.0897 111.954 cv
73.0345 111.954 72.1795 110.72 72.1795 109.198 cv
72.1795 101.912 li
72.1795 100.39 73.0345 99.1555 74.0897 99.1555 cv
cp
f
36.8167 114.719 mo
67.6795 114.719 li
70.1146 114.719 72.0882 116.088 72.0882 117.776 cv
72.0882 119.463 70.1146 120.832 67.6795 120.832 cv
36.8167 120.832 li
34.3817 120.832 32.4076 119.463 32.4076 117.776 cv
32.4076 116.088 34.3817 114.719 36.8167 114.719 cv
cp
f
172.794 89.8137 mo
203.657 89.8137 li
206.092 89.8137 208.066 91.1824 208.066 92.8704 cv
208.066 92.8699 li
208.066 94.5579 206.092 95.926 203.657 95.926 cv
172.794 95.926 li
170.36 95.926 168.386 94.5579 168.386 92.8699 cv
168.386 92.8704 li
168.386 91.1824 170.36 89.8137 172.794 89.8137 cv
cp
f
90.1161 55.594 mo
93.4837 60.3416 92.8841 68.7669 98.1581 71.5081 cv
103.195 74.1267 113.813 71.2405 115.012 69.0618 cv
116.211 66.8831 116.356 58.6716 112.543 57.177 cv
90.1161 55.594 li
cp
1 .976471 .803922 rgb
f
121.547 24.427 mo
128.144 29.8025 133.452 44.0657 128.881 54.511 cv
162.159 48.7737 li
165.977 41.4983 164.615 28.2581 158.331 25.9797 cv
121.547 24.427 li
cp
.74902 .694118 .584314 rgb
f
125.191 25.2957 mo
131.038 30.0598 135.743 42.7019 131.691 51.9597 cv
161.186 46.8748 li
164.57 40.426 163.363 28.6912 157.793 26.6716 cv
125.191 25.2957 li
cp
.984314 .901961 .72549 rgb
f
133.074 26.8748 mo
137.238 30.2639 138.74 37.0535 138.513 43.2678 cv
138.285 49.4822 158.533 43.0408 159.738 40.7478 cv
160.942 38.4548 160.252 29.2918 156.287 27.8557 cv
133.074 26.8748 li
cp
1 .976471 .803922 rgb
f
78.7108 88.8401 mo
85.9027 95.7781 90.6336 114.353 84.1454 128.07 cv
123.911 120.117 li
129.178 110.553 128.981 93.2629 121.828 90.3699 cv
78.7108 88.8401 li
cp
.74902 .694118 .584314 rgb
f
81.8163 89.8787 mo
88.3822 96.2703 92.6952 113.393 86.763 126.045 cv
123.088 118.686 li
127.902 109.865 127.729 93.9226 121.198 91.26 cv
81.8163 89.8787 li
cp
.984314 .901961 .72549 rgb
f
88.7269 90.5896 mo
94.0726 95.7454 96.8749 109.102 94.3729 116.015 cv
91.8709 122.929 120.368 117.385 122.325 113.832 cv
124.282 110.279 126.093 93.8772 120.776 91.7273 cv
88.7269 90.5896 li
cp
1 .976471 .803922 rgb
f
64.1312 145.745 mo
63.745 146.46 63.4271 147.218 63.1981 148.013 cv
63.8041 153.77 68.6693 158.256 74.5868 158.256 cv
79.8158 158.256 84.2235 154.75 85.597 149.963 cv
85.4652 148.72 85.1317 147.54 84.6341 146.448 cv
82.6883 149.476 78.9193 151.528 74.5868 151.528 cv
69.9261 151.528 65.9198 149.153 64.1312 145.745 cv
cp
.403922 .768627 .976471 rgb
f
96.0877 161.257 mo
95.7748 161.869 95.5082 162.512 95.308 163.182 cv
96.0389 168.805 100.846 173.148 106.667 173.148 cv
111.849 173.148 116.227 169.706 117.642 164.984 cv
117.49 163.802 117.158 162.676 116.674 161.635 cv
114.535 164.493 110.783 166.384 106.514 166.384 cv
102.059 166.384 98.1712 164.323 96.0877 161.257 cv
cp
f
131.323 161.836 mo
131.091 162.36 130.896 162.904 130.744 163.466 cv
131.071 169.5 136.064 174.294 142.18 174.294 cv
147.465 174.294 151.915 170.713 153.237 165.846 cv
153.177 164.703 152.948 163.605 152.576 162.574 cv
150.432 165.551 146.586 167.536 142.191 167.536 cv
137.443 167.536 133.333 165.216 131.323 161.836 cv
cp
f
167.077 134.215 mo
166.645 135.075 166.314 135.995 166.109 136.962 cv
166.829 140.363 169.059 143.205 172.063 144.759 cv
172.299 144.877 li
172.419 144.933 172.537 144.99 172.66 145.042 cv
174.112 145.668 175.718 146.021 177.409 146.035 cv
182.875 145.99 187.428 142.114 188.519 136.962 cv
188.341 136.121 188.068 135.319 187.716 134.557 cv
185.638 137.404 181.843 139.307 177.509 139.307 cv
173.006 139.307 169.096 137.247 167.077 134.215 cv
cp
f
96.1209 190.312 mo
96.5721 187.313 96.7958 184.078 95.2621 181.723 cv
108.087 185.958 125.463 185.588 138.489 183.441 cv
137.914 185.96 137.773 187.562 137.773 190.455 cv
131.174 191.767 124.379 193.17 117.591 193.174 cv
110.371 193.179 103.687 191.156 96.1209 190.312 cv
cp
1 .796078 .490196 rgb
f
42.578 61.0769 mo
44.8631 66.0706 43.3587 69.9177 41.8612 72.3889 cv
33.3119 69.1301 24.8485 67.6848 16.472 76.0823 cv
20.1317 70.4705 li
15.8617 70.9583 9.1522 76.0823 9.1522 76.0823 cv
13.6659 70.2263 19.6908 65.1253 26.2313 62.2971 cv
34.1893 58.8557 42.578 61.0769 42.578 61.0769 cv
cp
.945098 .352941 .384314 rgb
f
43.2816 65.408 mo
43.2816 67.9939 41.513 70.0901 37.0965 70.0901 cv
32.68 70.0901 27.2879 66.9587 27.2879 65.408 cv
27.2879 63.8572 32.68 60.7258 37.0965 60.7258 cv
41.513 60.7258 43.2816 62.822 43.2816 65.408 cv
cp
.996078 .658824 .678431 rgb
f
104.371 34.0969 mo
105.758 34.0969 106.882 35.2205 106.882 36.6067 cv
106.882 37.9934 105.758 39.1169 104.371 39.1169 cv
102.985 39.1169 101.862 37.9934 101.862 36.6067 cv
101.862 35.2205 102.985 34.0969 104.371 34.0969 cv
cp
1 .796078 .490196 rgb
f
143.473 8.84644 mo
144.954 8.84644 146.155 10.0476 146.155 11.5291 cv
146.155 13.0105 144.954 14.2117 143.473 14.2117 cv
141.991 14.2117 140.79 13.0105 140.79 11.5291 cv
140.79 10.0476 141.991 8.84644 143.473 8.84644 cv
cp
f
79.1717 143.467 mo
79.9364 144.522 80.3895 145.816 80.3895 147.219 cv
80.3895 150.756 77.5257 153.619 73.9886 153.619 cv
73.1957 153.619 72.4325 153.477 71.7318 153.214 cv
72.8954 154.82 74.787 155.862 76.9222 155.862 cv
80.4593 155.862 83.3226 152.999 83.3226 149.461 cv
83.3226 146.717 81.5975 144.378 79.1717 143.467 cv
cp
.690196 .886275 1 rgb
f
110.398 157.441 mo
111.163 158.496 111.616 159.791 111.616 161.193 cv
111.616 164.73 108.752 167.594 105.215 167.594 cv
104.423 167.594 103.659 167.451 102.958 167.188 cv
104.122 168.794 106.014 169.836 108.149 169.836 cv
111.686 169.836 114.549 166.973 114.549 163.436 cv
114.549 160.692 112.824 158.353 110.398 157.441 cv
cp
f
146.628 158.649 mo
147.393 159.703 147.846 160.998 147.846 162.401 cv
147.846 165.938 144.982 168.802 141.445 168.802 cv
140.652 168.802 139.889 168.659 139.188 168.396 cv
140.352 170.002 142.243 171.044 144.378 171.044 cv
147.915 171.044 150.779 168.18 150.779 164.643 cv
150.779 161.899 149.054 159.56 146.628 158.649 cv
cp
f
180.788 131.39 mo
181.553 132.445 182.005 133.74 182.005 135.142 cv
182.005 138.679 179.142 141.543 175.605 141.543 cv
174.812 141.543 174.049 141.4 173.348 141.137 cv
174.512 142.743 176.403 143.785 178.538 143.785 cv
182.075 143.785 184.939 140.922 184.939 137.385 cv
184.939 134.64 183.214 132.302 180.788 131.39 cv
cp
f
198.606 90.0706 mo
202.514 90.0706 205.681 91.1262 205.681 92.429 cv
205.681 93.7317 202.514 94.7874 198.606 94.7874 cv
194.698 94.7874 191.531 93.7317 191.531 92.429 cv
191.531 91.1262 194.698 90.0706 198.606 90.0706 cv
cp
1 .796078 .490196 rgb
f
184.211 90.0706 mo
186.232 90.0706 187.871 91.1262 187.871 92.429 cv
187.871 93.7317 186.232 94.7874 184.211 94.7874 cv
182.19 94.7874 180.551 93.7317 180.551 92.429 cv
180.551 91.1262 182.19 90.0706 184.211 90.0706 cv
cp
f
68.8065 89.5828 mo
72.7142 89.5828 75.8822 90.6384 75.8822 91.9412 cv
75.8822 93.2434 72.7142 94.2996 68.8065 94.2996 cv
64.8988 94.2996 61.7308 93.2434 61.7308 91.9412 cv
61.7308 90.6384 64.8988 89.5828 68.8065 89.5828 cv
cp
f
54.4115 89.5828 mo
56.4325 89.5828 58.0711 90.6384 58.0711 91.9412 cv
58.0711 93.2434 56.4325 94.2996 54.4115 94.2996 cv
52.39 94.2996 50.7518 93.2434 50.7518 91.9412 cv
50.7518 90.6384 52.39 89.5828 54.4115 89.5828 cv
cp
f
54.5814 130.942 mo
60.7918 130.942 li
57.6864 140.43 li
54.5814 130.942 li
cp
.752941 .203922 .027451 rgb
f
98.3788 77.471 mo
93.0692 76.8562 li
95.8836 71.8674 li
98.3788 77.471 li
cp
.74902 .694118 .584314 rgb
f
128.809 76.238 mo
128.897 70.9265 li
134.164 73.6702 li
128.809 76.238 li
cp
f
132.325 100.146 mo
131.786 94.8606 li
138.3 96.8308 li
132.325 100.146 li
cp
f
161.653 96.7712 mo
156.38 97.1555 li
158.212 93.2854 li
161.653 96.7712 li
cp
f
96.6585 125.322 mo
91.4203 126.203 li
94.2557 120.524 li
96.6585 125.322 li
cp
f
122.681 119.739 mo
118.343 120.469 li
121.001 115.766 li
122.681 119.739 li
cp
f
130.813 39.4089 mo
129.258 33.1921 li
136.172 34.7253 li
130.813 39.4089 li
cp
f
132.229 53.2752 mo
130.766 49.4382 li
136.351 48.7405 li
132.229 53.2752 li
cp
f
158.927 49.3591 mo
152.519 49.4314 li
155.594 44.3928 li
158.927 49.3591 li
cp
f
452.774 439.654 mo
445.466 439.651 438.017 442.79 433.877 448.626 cv
424.12 442.027 409.034 440.56 400.238 449.472 cv
398.057 453.607 394.049 448.109 390.308 448.137 cv
381.874 445.644 370.323 448.59 366.896 456.225 cv
360.343 453.261 351.556 452.019 345.331 456.662 cv
341.795 461.211 341.177 462.127 334.552 460.745 cv
329.058 459.467 321.556 469.068 323.506 467.945 cv
314.252 468.76 304.959 472.994 299.368 480.132 cv
299.711 487.275 310.118 490.509 316.527 492.675 cv
323.04 494.237 329.034 491.998 331.499 498.88 cv
335.719 502.041 342.555 501.862 346.212 497.955 cv
349.639 500.093 351.438 505.6 356.772 505.917 cv
362.929 507.752 368.18 502.586 374.191 505.265 cv
378.877 506.813 382.945 511.425 388.699 511.02 cv
395.755 511.45 400.79 505.594 408.044 508.1 cv
411.555 509.811 415.146 512.888 419.596 513.173 cv
425.24 513.984 431.41 512.539 435.389 508.507 cv
442.805 506.571 446.894 511.398 452.988 513.955 cv
461.774 516.942 471.899 513.475 476.999 506.126 cv
483.492 504.736 492.13 506.434 499.122 503.857 cv
510.347 501.144 523.596 493.715 523.687 481.399 cv
522.222 474.451 520.472 466.913 514.907 461.708 cv
505.102 452.539 490.31 449.826 477.032 451.306 cv
472.062 443.58 462.087 439.602 452.773 439.654 cv
452.774 439.654 li
cp
.858824 .623529 .313726 rgb
f
521.664 467.051 mo
522.087 482.131 505.23 494.838 484.014 495.431 cv
462.799 496.025 445.259 484.281 444.837 469.2 cv
444.414 454.119 461.27 441.413 482.486 440.819 cv
503.702 440.225 521.242 451.969 521.664 467.051 cv
cp
.996078 .635294 .239216 rgb
f
523.683 473.014 mo
524.063 486.562 507.172 498.025 485.957 498.619 cv
464.741 499.213 447.235 488.712 446.856 475.165 cv
446.477 461.618 463.368 450.154 484.584 449.56 cv
505.799 448.967 523.305 459.468 523.683 473.014 cv
cp
.839216 .372549 .14902 rgb
f
521.622 473.767 mo
521.936 485.014 504.993 494.614 483.778 495.208 cv
462.562 495.802 445.108 487.165 444.794 475.917 cv
444.479 464.669 461.423 455.069 482.638 454.476 cv
503.853 453.883 521.307 462.519 521.622 473.767 cv
cp
.509804 .168627 0 rgb
f
449.464 435.953 mo
422.513 441.107 li
391.549 443.595 li
359.229 447.279 li
340.37 451.975 li
327.271 455.584 li
327.271 455.584 345.811 460.546 346.847 468.237 cv
347.883 475.927 331.352 485.577 331.352 485.577 cv
351.924 492.412 li
351.924 492.412 363.114 496.243 371.993 497.872 cv
380.873 499.501 391.937 500.385 405.201 501.111 cv
418.466 501.836 451.535 501.667 451.535 501.667 cv
462.413 476.582 li
449.464 435.953 li
cp
f
325.634 486.031 mo
311.065 486.439 298.953 476.029 298.871 473.116 cv
298.79 470.204 310.3 459.133 324.87 458.725 cv
339.44 458.317 351.422 464.099 351.633 471.639 cv
351.844 479.18 340.204 485.624 325.634 486.031 cv
cp
.839216 .372549 .14902 rgb
f
325.556 483.256 mo
313.949 483.581 304.299 475.287 304.234 472.967 cv
304.169 470.646 313.34 461.825 324.948 461.501 cv
336.556 461.176 346.102 465.782 346.27 471.79 cv
346.438 477.798 337.164 482.93 325.556 483.256 cv
cp
.996078 .635294 .239216 rgb
f
324.727 478.418 mo
316.081 478.66 308.893 472.482 308.845 470.754 cv
308.797 469.026 315.627 462.456 324.273 462.214 cv
332.919 461.971 340.03 465.403 340.155 469.878 cv
340.28 474.352 333.372 478.176 324.727 478.418 cv
cp
1 .85098 .596078 rgb
f
432.9 439.89 mo
443.077 422.489 469.811 427.676 477.421 441.886 cv
494.84 461.231 487.295 491.559 471.764 504.575 cv
462.442 512.387 442.718 508.604 441.345 493.384 cv
439.972 478.163 471.146 453.819 432.899 439.89 cv
432.9 439.89 li
cp
.839216 .372549 .14902 rgb
f
482.188 455.164 mo
482.074 452.549 483.017 448.281 481.95 445.965 cv
480.884 443.648 478.772 443.385 477.42 441.883 cv
471.121 430.12 451.724 424.55 439.455 432.844 cv
461.431 438.381 466.1 451.815 462.662 463.421 cv
458.671 476.893 440.633 486.704 450.348 506.35 cv
454.229 508.287 458.841 508.928 463.107 508.283 cv
457.124 484.516 483.395 482.619 482.188 455.164 cv
cp
.996078 .635294 .239216 rgb
f
481.316 455.014 mo
481.202 452.399 479.199 444.731 473.072 438.438 cv
468.902 434.155 456.671 433.181 455.968 435.082 cv
455.264 436.982 463.231 441.725 465.299 446.641 cv
467.198 451.158 467.42 459.256 464.652 464.347 cv
461.794 469.606 454.843 477.092 452.802 485.166 cv
450.495 494.289 452.76 502.331 455.174 502.46 cv
457.588 502.589 460.694 494.821 466.388 485.758 cv
472.186 476.527 481.794 465.864 481.316 455.014 cv
cp
1 .85098 .596078 rgb
f
397.54 442.9 mo
407.019 426.691 431.921 431.523 439.01 444.76 cv
455.233 462.778 448.206 491.027 433.74 503.151 cv
425.057 510.428 406.684 506.904 405.405 492.726 cv
404.126 478.549 433.165 455.874 397.54 442.9 cv
cp
.839216 .372549 .14902 rgb
f
443.45 457.127 mo
443.168 451.306 442.65 448.824 439.008 444.756 cv
433.141 433.8 415.074 428.611 403.645 436.337 cv
424.116 441.494 428.465 454.008 425.262 464.818 cv
421.545 477.367 404.742 486.505 413.791 504.805 cv
417.407 506.609 421.702 507.206 425.677 506.605 cv
420.103 484.468 444.574 482.7 443.45 457.127 cv
cp
.996078 .635294 .239216 rgb
f
443.5 456.073 mo
443.385 453.458 441.382 445.79 435.256 439.497 cv
431.086 435.214 418.854 434.24 418.151 436.14 cv
417.448 438.04 425.415 442.784 427.482 447.7 cv
429.382 452.217 429.603 460.313 426.836 465.406 cv
423.977 470.665 417.026 478.149 414.984 486.224 cv
412.679 495.347 414.943 503.389 417.357 503.518 cv
419.771 503.647 422.877 495.88 428.571 486.816 cv
434.37 477.586 443.976 466.923 443.5 456.073 cv
cp
1 .85098 .596078 rgb
f
366.587 446.291 mo
375.195 431.572 397.806 435.96 404.243 447.979 cv
418.976 464.342 412.595 489.993 399.459 501.002 cv
391.574 507.61 374.89 504.41 373.729 491.536 cv
372.567 478.662 398.936 458.072 366.587 446.291 cv
cp
.839216 .372549 .14902 rgb
f
408.275 459.21 mo
408.179 456.998 407.776 454.772 406.997 452.705 cv
406.352 450.999 405.386 449.246 404.242 447.975 cv
398.915 438.027 382.509 433.315 372.131 440.33 cv
390.719 445.014 394.668 456.377 391.76 466.193 cv
388.384 477.589 373.127 485.886 381.344 502.504 cv
384.628 504.142 388.527 504.684 392.137 504.138 cv
387.075 484.036 409.297 482.431 408.275 459.21 cv
cp
.996078 .635294 .239216 rgb
f
406 455.91 mo
405.669 453.474 403.14 446.476 396.874 441.116 cv
392.609 437.468 381.09 437.603 380.595 439.44 cv
380.099 441.276 387.954 445.031 390.307 449.451 cv
392.47 453.51 393.369 461.063 391.217 466.06 cv
388.993 471.222 383.134 478.815 381.916 486.539 cv
380.539 495.266 383.344 502.593 385.612 502.507 cv
387.881 502.421 390.12 494.892 394.669 485.931 cv
399.303 476.804 407.373 466.013 406 455.91 cv
cp
1 .85098 .596078 rgb
f
341.455 451.283 mo
348.582 439.095 367.305 442.728 372.634 452.68 cv
384.833 466.228 379.549 487.468 368.673 496.583 cv
362.144 502.054 348.331 499.404 347.369 488.745 cv
346.407 478.085 368.24 461.037 341.455 451.283 cv
cp
.839216 .372549 .14902 rgb
f
375.719 461.91 mo
371.421 443.526 354.639 440.539 346.046 446.347 cv
361.436 450.225 364.706 459.634 362.298 467.761 cv
359.503 477.196 346.87 484.067 353.674 497.826 cv
356.392 499.182 359.621 499.631 362.609 499.179 cv
359.638 485.276 380.016 480.293 375.719 461.91 cv
cp
.996078 .635294 .239216 rgb
f
323.728 458.293 mo
327.919 448.174 343.899 449.637 348.058 457.404 cv
357.577 467.975 353.454 484.55 344.967 491.662 cv
339.872 495.932 329.093 493.864 328.343 485.546 cv
327.592 477.228 344.629 465.904 323.728 458.293 cv
cp
.839216 .372549 .14902 rgb
f
349.291 461.05 mo
346.138 451.278 331.883 448.843 326.092 455.355 cv
338.101 458.382 339.739 462.525 337.86 468.868 cv
335.679 476.23 327.953 481.896 333.263 492.633 cv
335.384 493.691 337.904 494.041 340.236 493.689 cv
338.242 485.771 342.8 482.295 346.513 477.387 cv
348.89 474.246 352.444 470.821 349.291 461.05 cv
cp
.996078 .635294 .239216 rgb
f
481.071 455.01 mo
481.184 461.38 477.98 466.61 473.915 466.692 cv
469.849 466.775 466.462 461.678 466.349 455.308 cv
466.236 448.939 469.44 443.709 473.506 443.626 cv
477.571 443.544 480.958 448.64 481.071 455.01 cv
cp
1 .952941 .882353 rgb
f
441.819 456.108 mo
441.932 462.477 438.728 467.708 434.663 467.791 cv
430.598 467.873 427.21 462.776 427.098 456.407 cv
426.984 450.038 430.188 444.807 434.254 444.724 cv
438.319 444.642 441.706 449.739 441.819 456.108 cv
cp
f
406.534 457.089 mo
406.633 462.645 403.838 467.208 400.291 467.279 cv
396.745 467.351 393.79 462.905 393.691 457.349 cv
393.593 451.793 396.388 447.23 399.934 447.158 cv
403.48 447.086 406.435 451.532 406.534 457.089 cv
cp
f
375.755 462.699 mo
375.67 460.776 374.872 454.426 369.693 450.511 cv
366.187 447.862 357.634 446.647 357.118 448.044 cv
356.6 449.441 362.458 452.928 363.978 456.544 cv
365.375 459.864 365.538 465.817 363.503 469.561 cv
361.401 473.427 356.29 478.93 354.789 484.868 cv
353.094 491.575 354.759 497.488 356.534 497.583 cv
358.309 497.677 360.592 491.967 364.778 485.302 cv
369.042 478.516 376.105 470.677 375.755 462.699 cv
cp
1 .85098 .596078 rgb
f
373.995 459.711 mo
374.08 464.454 371.693 468.348 368.666 468.41 cv
365.639 468.471 363.116 464.677 363.032 459.933 cv
362.948 455.189 365.334 451.295 368.361 451.233 cv
371.389 451.172 373.911 454.968 373.995 459.711 cv
cp
1 .952941 .882353 rgb
f
349.582 465.617 mo
349.517 464.147 348.392 459.837 344.948 456.299 cv
342.604 453.891 335.728 453.344 335.333 454.412 cv
334.938 455.48 339.416 458.147 340.578 460.91 cv
341.646 463.449 341.771 468.001 340.215 470.863 cv
338.608 473.819 334.701 478.026 333.554 482.565 cv
332.257 487.693 333.53 492.215 334.887 492.287 cv
336.244 492.359 337.99 487.993 341.191 482.898 cv
344.45 477.71 349.85 471.716 349.582 465.617 cv
cp
1 .85098 .596078 rgb
f
350.275 464.048 mo
350.34 467.707 348.5 470.711 346.164 470.759 cv
343.829 470.805 341.883 467.878 341.818 464.219 cv
341.753 460.56 343.594 457.555 345.93 457.508 cv
348.264 457.461 350.21 460.388 350.275 464.048 cv
cp
1 .952941 .882353 rgb
f
330.912 467.258 mo
330.996 470.238 326.889 472.771 321.741 472.916 cv
316.593 473.059 312.351 470.76 312.267 467.779 cv
312.184 464.799 316.29 462.265 321.439 462.121 cv
326.588 461.977 330.829 464.276 330.912 467.258 cv
cp
f
460.079 494.11 mo
460.148 496.601 458.574 498.666 456.562 498.722 cv
454.55 498.779 452.862 496.805 452.793 494.314 cv
452.723 491.823 454.298 489.759 456.309 489.702 cv
458.321 489.645 460.009 491.619 460.079 494.11 cv
cp
f
423.303 495.139 mo
423.373 497.631 421.798 499.695 419.786 499.752 cv
417.774 499.807 416.087 497.834 416.017 495.344 cv
415.947 492.852 417.521 490.787 419.534 490.731 cv
421.546 490.675 423.233 492.648 423.303 495.139 cv
cp
f
388.262 496.12 mo
388.332 498.611 386.757 500.676 384.745 500.732 cv
382.733 500.789 381.046 498.815 380.976 496.324 cv
380.906 493.833 382.48 491.768 384.493 491.712 cv
386.505 491.655 388.192 493.629 388.262 496.12 cv
cp
f
361.025 490.633 mo
361.096 493.123 359.521 495.188 357.509 495.245 cv
355.497 495.301 353.809 493.327 353.74 490.837 cv
353.67 488.345 355.244 486.28 357.256 486.224 cv
359.268 486.168 360.956 488.141 361.025 490.633 cv
cp
f
338.297 487.797 mo
338.346 489.52 337.255 490.95 335.863 490.989 cv
334.47 491.028 333.302 489.662 333.253 487.937 cv
333.205 486.213 334.295 484.783 335.688 484.744 cv
337.081 484.706 338.249 486.072 338.297 487.797 cv
cp
f
330.165 307.733 mo
310.394 307.373 290.676 319.948 284.316 338.993 cv
280.142 348.793 277.747 359.199 275.327 369.533 cv
287.244 367.206 299.29 365.539 311.123 362.782 cv
321.493 368.978 328.933 379.602 340.805 383.41 cv
354.613 388.126 370.22 388.426 384.049 383.651 cv
398.445 387.339 414.074 383.541 426.122 375.153 cv
435.132 376.748 442.138 369.641 449.789 367.626 cv
455.951 366.849 466.066 366.762 466.982 358.941 cv
465.182 350.329 453.637 352.59 450.249 346.156 cv
445.5 340.864 437.111 341.963 432.807 336.43 cv
425.79 331.054 417.245 327.29 408.357 326.736 cv
395.503 315.743 376.591 311.638 360.718 318.135 cv
354.715 310.094 343.636 308.816 334.344 307.87 cv
332.953 307.782 331.559 307.734 330.165 307.733 cv
cp
.858824 .623529 .313726 rgb
f
462.23 347.347 mo
462.844 341.441 453.998 336.271 451.156 337.041 cv
450.214 343.572 448.434 352.93 446.678 355.394 cv
454.65 354.996 461.617 353.254 462.23 347.347 cv
cp
.792157 .647059 .67451 rgb
f
464.872 348.762 mo
465.693 340.821 453.798 333.865 449.976 334.899 cv
448.712 343.68 446.323 356.263 443.962 359.576 cv
454.682 359.044 464.051 356.704 464.872 348.762 cv
cp
.568627 .337255 .380392 rgb
f
463.315 348.631 mo
463.962 342.404 454.636 336.952 451.639 337.764 cv
450.645 344.65 448.769 354.517 446.917 357.115 cv
455.323 356.695 462.669 354.858 463.315 348.631 cv
cp
.729412 .541176 .576471 rgb
f
462.23 347.347 mo
462.844 341.441 453.998 336.271 451.156 337.041 cv
450.214 343.572 448.434 352.93 446.678 355.394 cv
454.65 354.996 461.617 353.254 462.23 347.347 cv
cp
.792157 .647059 .67451 rgb
f
461.231 346.101 mo
461.138 341.73 454.027 337.024 451.971 337.336 cv
451.876 342.144 451.42 348.995 450.334 350.678 cv
456.269 351.126 461.325 350.472 461.231 346.101 cv
cp
.901961 .819608 .886275 rgb
f
423.598 369.304 mo
434.082 371.101 443.488 363.365 447.974 355.857 cv
452.628 348.069 453.89 340.423 449.981 332.186 cv
446.072 323.95 434.372 321.26 431.286 319.401 cv
437.648 343.077 427.403 357.396 423.598 369.305 cv
423.598 369.304 li
cp
.568627 .337255 .380392 rgb
f
424.4 365.729 mo
433.465 367.281 441.598 360.592 445.477 354.1 cv
449.502 347.366 450.595 340.756 447.215 333.635 cv
443.836 326.514 433.721 324.19 431.053 322.583 cv
436.552 343.052 427.691 355.433 424.4 365.729 cv
cp
.729412 .541176 .576471 rgb
f
427.614 360.583 mo
435.323 361.903 442.241 356.214 445.54 350.693 cv
448.963 344.966 449.891 339.344 447.017 333.287 cv
444.143 327.231 435.541 325.255 433.271 323.887 cv
437.948 341.297 430.413 351.826 427.614 360.583 cv
cp
.792157 .647059 .67451 rgb
f
428.198 355.939 mo
435.133 357.125 441.356 352.006 444.326 347.038 cv
447.405 341.885 448.243 336.828 445.659 331.381 cv
443.075 325.933 435.337 324.157 433.296 322.928 cv
437.499 338.587 430.718 348.061 428.198 355.939 cv
cp
.901961 .819608 .886275 rgb
f
378.816 378.718 mo
395.682 387.258 409.699 381.857 421.019 373.313 cv
432.696 364.501 438.555 347.605 438.314 332.979 cv
438.202 326.183 434.6 319.189 429.667 314.514 cv
422.805 308.012 412.228 301.789 403.371 303.885 cv
388.28 322.677 401.454 359.931 378.816 378.718 cv
cp
.568627 .337255 .380392 rgb
f
381.335 375.424 mo
397.145 383.427 410.285 378.364 420.898 370.354 cv
431.844 362.092 437.338 346.254 437.113 332.543 cv
437.009 326.173 433.632 319.616 429.008 315.235 cv
422.575 309.139 412.661 303.306 404.358 305.272 cv
390.211 322.889 402.557 357.811 381.335 375.423 cv
381.335 375.424 li
cp
.729412 .541176 .576471 rgb
f
382.258 370.706 mo
396.85 378.094 408.977 373.421 418.772 366.028 cv
428.874 358.402 433.944 343.785 433.737 331.13 cv
433.64 325.251 430.525 319.2 426.257 315.156 cv
420.32 309.531 411.17 304.147 403.507 305.962 cv
390.45 322.221 401.845 354.451 382.258 370.706 cv
cp
.792157 .647059 .67451 rgb
f
396.525 353.594 mo
406.569 358.676 414.919 355.455 421.664 350.363 cv
428.621 345.111 432.115 335.047 431.975 326.335 cv
431.911 322.288 429.767 318.123 426.83 315.341 cv
422.744 311.469 416.447 307.765 411.171 309.017 cv
402.178 320.213 410.014 342.398 396.525 353.594 cv
cp
.901961 .819608 .886275 rgb
f
413.945 322.017 mo
413.794 318.496 417.127 315.981 421.389 316.4 cv
425.651 316.819 429.229 320.013 429.381 323.535 cv
429.532 327.056 426.2 329.572 421.937 329.153 cv
417.675 328.734 414.097 325.539 413.945 322.017 cv
cp
.980392 .956863 .988235 rgb
f
290.43 348.712 mo
321.233 341.929 320.102 371.196 345.44 382.182 cv
357.338 387.342 378.11 387.416 388.584 378.193 cv
418.746 351.632 421.04 339.115 415.554 317.744 cv
411.412 301.61 392.625 286.228 375.729 287.557 cv
351.337 289.474 340.367 316.901 322.491 322.184 cv
313.917 323.882 295.421 339.766 290.43 348.712 cv
cp
.568627 .337255 .380392 rgb
f
294.736 346.532 mo
323.957 339.966 322.566 369.366 346.528 379.662 cv
357.78 384.497 377.464 384.473 387.431 375.686 cv
416.135 350.381 418.364 338.509 413.263 318.281 cv
409.411 303.011 391.677 288.52 375.659 289.856 cv
352.535 291.783 342.015 317.823 325.052 322.91 cv
316.918 324.558 299.506 338.032 294.736 346.532 cv
cp
.729412 .541176 .576471 rgb
f
302.232 343.309 mo
328.489 337.527 327.524 362.473 349.121 371.837 cv
359.263 376.234 376.968 376.297 385.895 368.434 cv
411.606 345.794 413.561 335.125 408.887 316.908 cv
405.357 303.156 389.344 290.046 374.942 291.179 cv
354.151 292.815 344.799 316.193 329.562 320.697 cv
322.254 322.144 306.487 335.684 302.232 343.309 cv
cp
.792157 .647059 .67451 rgb
f
318.064 327.89 mo
333.819 332.187 327.197 342.368 348.312 358.141 cv
355.752 363.699 375.382 363.798 386.009 356.184 cv
396.636 348.57 408.882 330.826 406.668 315.613 cv
404.378 299.876 383.078 288.366 371.327 291.403 cv
353.858 295.918 347.291 310.575 334.489 314.361 cv
328.348 315.578 321.639 321.483 318.064 327.89 cv
cp
.901961 .819608 .886275 rgb
f
363.848 314.777 mo
358.886 312.224 358.231 306.712 362.386 302.464 cv
366.541 298.215 373.931 296.84 378.894 299.392 cv
383.857 301.944 384.512 307.457 380.357 311.705 cv
376.202 315.953 368.811 317.328 363.848 314.777 cv
cp
.980392 .956863 .988235 rgb
f
278.987 361.849 mo
282.434 341.509 283.703 333.229 289.126 315.446 cv
295.881 293.29 312.179 278.531 330.162 277.637 cv
340.59 277.118 356.659 280.761 361.615 291.329 cv
366.57 301.896 356.874 317.033 351.632 325.631 cv
335.938 351.369 305.25 354.627 278.987 361.849 cv
cp
.568627 .337255 .380392 rgb
f
281.134 358.058 mo
284.825 342.011 288.098 319.9 295.482 306.744 cv
305.199 289.431 317.228 280.766 331.665 279.625 cv
340.318 278.941 360.582 282.495 360.974 296.653 cv
361.287 307.889 351.585 328.138 337.4 338.341 cv
321.035 350.111 298.825 355.264 281.134 358.058 cv
281.134 358.058 li
cp
.729412 .541176 .576471 rgb
f
283.952 354.87 mo
285.125 340.508 291.836 320.293 298.512 308.398 cv
306.372 294.392 317.974 284.354 330.104 282.124 cv
339.655 280.367 356.843 283.333 358.169 292.699 cv
363.524 330.513 310.049 352.815 283.952 354.87 cv
cp
.792157 .647059 .67451 rgb
f
284.372 348.96 mo
285.736 335.304 294.406 314.91 300.604 304.409 cv
307.746 292.311 317.955 283.803 328.536 281.905 cv
337.284 280.336 352.694 283.359 354.018 292.456 cv
358.323 322.039 302.759 347.073 284.372 348.96 cv
cp
.901961 .819608 .886275 rgb
f
289.099 344.234 mo
296.832 305.849 319.841 273.923 349.787 296.053 cv
346.548 308.527 334.404 318.003 315.132 329.216 cv
309.879 332.273 299.257 339.154 289.099 344.234 cv
cp
.568627 .337255 .380392 rgb
f
387.375 311.77 mo
385.233 310.669 384.951 308.289 386.744 306.456 cv
388.537 304.622 391.727 304.029 393.869 305.13 cv
396.011 306.231 396.294 308.611 394.501 310.444 cv
392.707 312.278 389.517 312.871 387.375 311.77 cv
cp
.980392 .956863 .988235 rgb
f
439.928 331.674 mo
441.256 330.35 443.612 330.561 445.189 332.145 cv
446.767 333.728 446.97 336.085 445.641 337.408 cv
444.313 338.732 441.958 338.52 440.38 336.937 cv
438.802 335.353 438.599 332.997 439.928 331.674 cv
cp
f
453.667 341.209 mo
454.638 340.242 456.374 340.41 457.544 341.585 cv
458.715 342.76 458.877 344.497 457.906 345.464 cv
456.935 346.43 455.2 346.262 454.029 345.088 cv
452.858 343.912 452.696 342.176 453.667 341.209 cv
cp
f
101.619 340.536 mo
86.1517 340.536 70.7181 342.661 55.7206 346.331 cv
51.8988 345.676 48.9808 348.673 45.743 350.205 cv
42.0506 352.447 37.3348 355.009 35.3001 358.388 cv
33.8089 363.384 36.0809 368.646 37.6761 373.363 cv
41.4491 380.438 46.2362 387.986 53.8695 391.316 cv
58.4129 393.423 63.9334 392.341 67.7469 395.864 cv
75.7084 399.776 84.7279 400.801 93.4652 401.503 cv
98.4247 406.688 107.094 407.814 112.792 403.179 cv
116.268 399.633 121.888 402.42 126.406 401.357 cv
133.116 401.055 139.559 398.188 144.693 393.933 cv
151.495 393.086 157.508 389.016 162.338 384.373 cv
168.063 378.5 169.908 370.029 169.197 362.066 cv
168.923 359.325 169.623 356.29 168.455 356.162 cv
165.089 351.058 159 348.442 153.517 346.331 cv
148.188 346.572 143.138 344.319 137.874 343.737 cv
125.914 341.609 113.767 340.488 101.619 340.537 cv
101.619 340.536 li
cp
.858824 .623529 .313726 rgb
f
54.8084 337.896 mo
152.338 337.896 li
152.338 337.896 173.837 336.916 173.832 326.347 cv
173.827 315.778 164.849 313.835 164.849 313.835 cv
164.849 313.835 174.891 304.638 170.945 293.944 cv
166.999 283.25 153.942 284.64 153.942 284.64 cv
153.942 284.64 161.559 267.026 149.129 257.692 cv
136.7 248.358 123.143 260.579 123.143 260.579 cv
123.143 260.579 119.731 244.366 104.215 243.255 cv
88.6986 242.144 81.7577 257.692 81.7577 257.692 cv
81.7577 257.692 71.6341 250.724 63.1498 256.088 cv
54.6654 261.451 55.4505 273.412 55.4505 273.412 cv
55.4505 273.412 43.4969 270.542 36.201 281.432 cv
28.9056 292.323 34.9178 304.21 34.9178 304.21 cv
34.9178 304.21 27.5858 307.132 26.8973 317.043 cv
26.2093 326.954 28.7142 328.352 33.6346 332.122 cv
38.555 335.891 54.8084 337.896 54.8084 337.896 cv
cp
.568627 .368627 .356863 rgb
f
37.4037 352.655 mo
36.8426 355.542 li
36.8426 355.542 37.7806 362.969 40.3719 368.053 cv
42.9632 373.138 47.8626 380.817 53.2044 384.094 cv
58.5467 387.372 69.5663 387.944 69.5663 387.944 cv
63.4706 362.599 li
48.7132 355.542 li
37.4037 352.655 li
cp
f
39.3275 356.17 mo
39.849 357.733 li
39.849 357.733 40.6107 363.768 42.7166 367.901 cv
44.8221 372.034 48.8036 378.273 53.1444 380.937 cv
57.4852 383.6 66.4398 384.065 66.4398 384.065 cv
61.7274 359.02 li
49.4945 357.733 li
39.3275 356.17 li
cp
.956863 .847059 .713726 rgb
f
42.1854 356.335 mo
42.6297 357.667 li
42.6297 357.667 43.2787 362.809 45.0726 366.33 cv
46.8666 369.85 50.2582 375.167 53.9559 377.435 cv
57.6541 379.704 65.2826 380.1 65.2826 380.1 cv
61.2679 358.763 li
50.847 357.667 li
42.1854 356.335 li
cp
.992157 .972549 .882353 rgb
f
54.8084 359.07 mo
54.8084 359.07 56.1761 369.994 58.3377 375.111 cv
60.4994 380.229 62.138 385.369 67.6415 389.227 cv
73.1449 393.087 83.7508 395.003 91.703 395.754 cv
99.6546 396.506 101.327 394.47 101.327 394.47 cv
87.8529 362.921 li
54.8084 359.07 li
cp
.568627 .368627 .356863 rgb
f
166.774 349.125 mo
166.774 349.125 169.038 362.784 164.689 371.421 cv
160.339 380.058 155.93 381.991 152.017 384.736 cv
148.103 387.481 143.034 387.944 143.034 387.944 cv
144.959 360.675 li
166.774 349.125 li
cp
f
165.181 355.014 mo
165.181 355.014 165.933 364.82 162.165 370.396 cv
158.398 375.972 155.055 380.093 151.867 382.034 cv
148.679 383.974 144.707 384.077 144.707 384.077 cv
147.6 362.908 li
153.461 362.997 159.321 359.417 165.181 355.014 cv
cp
.956863 .847059 .713726 rgb
f
162.91 354.255 mo
162.91 354.255 163.999 361.89 161.341 366.449 cv
158.682 371.008 156.282 374.404 153.89 376.087 cv
151.498 377.769 148.4 378.053 148.4 378.053 cv
149.577 361.335 li
162.91 354.255 li
cp
.992157 .972549 .882353 rgb
f
152.659 357.363 mo
152.659 357.363 152.469 375.197 148.488 381.745 cv
144.507 388.294 138.605 392.294 132.126 394.578 cv
125.647 396.862 111.594 395.54 111.594 395.54 cv
112.556 370.196 li
152.659 357.363 li
cp
.568627 .368627 .356863 rgb
f
149.051 361.291 mo
149.051 361.291 148.894 375.99 145.613 381.387 cv
142.332 386.785 137.467 390.082 132.126 391.965 cv
126.785 393.846 115.201 392.758 115.201 392.758 cv
115.994 371.868 li
149.051 361.291 li
cp
.956863 .847059 .713726 rgb
f
148.63 363.842 mo
148.63 363.842 146.177 375.394 142.742 379.636 cv
139.306 383.879 134.959 386.47 130.463 387.95 cv
125.967 389.429 117.033 388.573 117.033 388.573 cv
120.968 372.155 li
148.63 363.842 li
cp
.992157 .972549 .882353 rgb
f
58.2957 362.378 mo
58.2957 362.378 59.4583 371.66 61.2957 376.009 cv
63.1332 380.358 64.5267 384.725 69.2044 388.005 cv
73.8827 391.284 82.8988 392.913 89.6585 393.552 cv
96.4183 394.19 97.8402 392.461 97.8402 392.461 cv
86.3861 365.649 li
58.2957 362.378 li
cp
.956863 .847059 .713726 rgb
f
62.1156 364.646 mo
62.1156 364.646 63.0135 371.812 64.433 375.17 cv
65.8519 378.526 66.9281 381.898 70.5418 384.429 cv
74.1551 386.961 81.1195 388.218 86.3402 388.711 cv
91.5614 389.204 92.66 387.869 92.66 387.869 cv
83.8128 367.172 li
62.1156 364.646 li
cp
.992157 .972549 .882353 rgb
f
84.0033 368.053 mo
84.6449 369.978 li
84.6449 369.978 84.2084 381.127 87.5321 387.302 cv
90.8563 393.478 96.7621 401.308 104.856 400.777 cv
112.951 400.246 118.358 391.869 120.897 385.378 cv
123.437 378.886 121.86 367.733 121.86 367.733 cv
84.0033 368.053 li
cp
.568627 .368627 .356863 rgb
f
87.8099 367.67 mo
87.6668 372.851 li
87.6668 372.851 87.3011 382.179 90.0834 387.346 cv
92.8651 392.513 97.808 399.065 104.582 398.62 cv
111.356 398.176 115.881 391.168 118.007 385.736 cv
120.132 380.304 119.153 368.252 119.153 368.252 cv
87.8099 367.67 li
cp
.956863 .847059 .713726 rgb
f
90.5682 368.279 mo
90.4505 372.551 li
90.4505 372.551 90.1493 380.24 92.4422 384.499 cv
94.7357 388.759 98.8099 394.159 104.394 393.793 cv
109.979 393.426 113.709 387.649 115.461 383.172 cv
117.213 378.694 116.406 368.759 116.406 368.759 cv
90.5682 368.279 li
cp
.992157 .972549 .882353 rgb
f
54.1668 337.576 mo
152.338 337.576 li
152.338 337.576 167.368 343.745 167.095 350.408 cv
166.823 357.072 152.659 360.996 152.659 360.996 cv
152.659 360.996 152.893 372.449 139.826 375.753 cv
126.759 379.057 118.973 369.978 118.973 369.978 cv
118.973 369.978 113.224 377.62 101.648 377.357 cv
90.0721 377.094 85.6073 368.053 85.6073 368.053 cv
85.6073 368.053 71.868 374.254 63.4706 371.903 cv
55.0736 369.552 57.1317 360.354 57.1317 360.354 cv
57.1317 360.354 44.7196 364.368 39.4095 358.108 cv
34.099 351.847 37.7 348.753 41.6551 345.596 cv
45.6102 342.439 54.1668 337.576 54.1668 337.576 cv
cp
.568627 .368627 .356863 rgb
f
57.3387 337.576 mo
85.912 329.669 116.335 329.16 148.989 337.576 cv
148.989 337.576 163.021 342.403 162.766 347.616 cv
162.513 352.83 149.288 355.899 149.288 355.899 cv
149.288 355.899 149.507 364.86 137.308 367.446 cv
125.109 370.031 117.84 362.927 117.84 362.927 cv
117.84 362.927 112.473 368.906 101.666 368.701 cv
90.8592 368.496 86.6908 361.422 86.6908 361.422 cv
86.6908 361.422 75.4515 367.603 66.0243 364.433 cv
56.597 361.263 58.8363 355.397 58.8363 355.397 cv
58.8363 355.397 48.5184 358.539 43.5609 353.64 cv
38.6034 348.742 41.9652 346.321 45.6576 343.851 cv
49.3499 341.382 57.3387 337.576 57.3387 337.576 cv
cp
.956863 .847059 .713726 rgb
f
155.223 355.161 mo
148.448 363.356 li
137.01 363.139 130.648 351.509 126.601 344.801 cv
133.611 348.981 141.41 354.198 155.223 355.161 cv
cp
.568627 .368627 .356863 rgb
f
124.49 367.575 mo
112.508 368.159 li
110.321 362.904 111.728 360.273 112.122 350.837 cv
118.807 359.075 122.133 361.946 124.49 367.575 cv
cp
f
91.6507 366.375 mo
80.1854 364.643 li
82.2264 359.712 92.5384 348.75 92.5384 348.75 cv
91.6507 366.375 li
cp
f
47.3299 356.191 mo
58.7054 361.226 li
72.3158 357.424 73.9154 353.747 83.0736 344.1 cv
70.3905 349.134 63.3846 355.909 47.3299 356.191 cv
cp
f
102.415 249.934 mo
89.0414 249.836 84.3251 264.425 84.3251 264.425 cv
84.3251 264.425 73.7093 257.463 65.8915 262.827 cv
58.0736 268.191 58.7953 280.146 58.7953 280.146 cv
58.7953 280.146 49.1434 275.459 42.1937 286.35 cv
35.3089 297.139 43.4466 307.705 43.4466 307.705 cv
43.4466 307.705 33.1185 313.874 32.4842 323.785 cv
32.2782 327.008 33.5936 329.323 37.8709 332.607 cv
42.1488 335.891 54.3807 335.427 62.9676 334.531 cv
78.493 332.913 87.5326 332.305 99.8465 332.367 cv
115.049 332.443 134.009 335.349 145.348 335.493 cv
156.687 335.637 160.955 339.666 165.458 330.408 cv
169.96 321.151 158.318 317.04 158.318 317.04 cv
158.318 317.04 168.855 311.374 165.219 300.68 cv
161.583 289.986 148.595 290.097 148.595 290.097 cv
148.595 290.097 156.575 273.759 145.121 264.425 cv
133.668 255.091 121.173 267.313 121.173 267.313 cv
121.173 267.313 118.032 251.105 103.735 249.994 cv
103.288 249.959 102.846 249.938 102.415 249.934 cv
cp
.956863 .847059 .713726 rgb
f
38.0575 311.927 mo
41.1327 303.833 li
55.3319 313.859 li
38.0575 311.927 li
cp
.521569 .352941 .270588 rgb
f
102.199 259.457 mo
90.1961 259.369 85.9632 272.463 85.9632 272.463 cv
85.9632 272.463 76.4359 266.214 69.4193 271.028 cv
62.4027 275.843 63.0506 286.572 63.0506 286.572 cv
63.0506 286.572 54.388 282.366 48.1507 292.14 cv
41.972 301.823 49.2752 311.306 49.2752 311.306 cv
49.2752 311.306 40.4872 313.957 39.9178 322.852 cv
39.7328 325.744 39.8338 329.265 42.8099 332.213 cv
45.7855 335.16 59.0887 336.186 66.7953 335.383 cv
80.7293 333.93 88.8421 333.385 99.8939 333.44 cv
113.538 333.508 130.554 336.117 140.731 336.246 cv
150.908 336.375 155.17 338.049 159.211 329.74 cv
163.252 321.431 152.372 319.685 152.372 319.685 cv
152.372 319.685 161.829 314.599 158.565 305.001 cv
155.302 295.404 143.646 295.503 143.646 295.503 cv
143.646 295.503 150.807 280.839 140.528 272.462 cv
130.248 264.085 119.034 275.054 119.034 275.054 cv
119.034 275.054 116.215 260.508 103.384 259.511 cv
102.983 259.48 102.586 259.46 102.199 259.457 cv
cp
.992157 .972549 .882353 rgb
f
38.0575 311.927 mo
41.1327 303.833 li
88.2796 325.403 li
38.0575 311.927 li
cp
.568627 .368627 .356863 rgb
f
52.1737 278.554 mo
58.4647 272.606 li
93.2474 318.046 li
52.1737 278.554 li
cp
f
78.2132 260.173 mo
86.5663 257.896 li
95.9071 316.243 li
78.2132 260.173 li
cp
f
126.173 263.781 mo
118.761 258.78 li
103.928 313.491 li
126.173 263.781 li
cp
f
156.895 290.341 mo
151.334 283.705 li
114.948 317.602 li
156.895 290.341 li
cp
f
164.803 320.016 mo
165.034 311.045 li
115.879 327.275 li
164.803 320.016 li
cp
f
65.3968 337.912 mo
88.8055 331.434 113.729 331.018 140.481 337.912 cv
140.481 337.912 151.976 341.866 151.768 346.137 cv
151.559 350.409 140.726 352.924 140.726 352.924 cv
140.726 352.924 140.905 360.264 130.911 362.383 cv
120.917 364.501 114.962 358.681 114.962 358.681 cv
114.962 358.681 110.566 363.579 101.712 363.411 cv
92.8583 363.243 89.4432 357.447 89.4432 357.447 cv
89.4432 357.447 80.2357 362.511 72.513 359.915 cv
64.7899 357.318 66.6239 352.512 66.6239 352.512 cv
66.6239 352.512 58.1712 355.086 54.1097 351.073 cv
50.0487 347.06 52.8026 345.076 55.8275 343.052 cv
58.8524 341.03 65.3968 337.912 65.3968 337.912 cv
cp
.878431 .717647 .6 rgb
f
100.309 301.653 mo
115.635 301.653 128.059 314.078 128.059 329.404 cv
128.059 344.73 115.635 357.155 100.309 357.155 cv
84.9823 357.155 72.558 344.73 72.558 329.404 cv
72.558 314.078 84.9823 301.653 100.309 301.653 cv
cp
.737255 .505882 .431373 rgb
f
55.0716 362.302 mo
55.6087 372.906 68.0921 375.728 78.2699 372.336 cv
81.1903 371.362 83.2684 369.823 84.6117 368.454 cv
91.8753 382.241 113.356 380.594 119.365 370.536 cv
126.891 381.517 153.537 378.29 153.056 361.071 cv
161.501 361.117 168.639 357.16 167.077 348.103 cv
166.716 354.51 159.639 358.707 151.194 358.661 cv
151.194 373.474 127.853 375.26 118.884 367.164 cv
112.384 375.184 91.7064 378.773 85.2127 365.803 cv
83.2684 366.452 81.6712 368.231 78.7508 369.205 cv
68.5731 372.597 57.6903 370.115 57.1537 359.511 cv
48.787 361.603 36.7538 359.241 37.3421 349.903 cv
33.4378 361.282 46.7049 364.394 55.0716 362.302 cv
cp
1 1 1 rgb
f
100.309 303.217 mo
114.772 303.217 126.496 314.941 126.496 329.404 cv
126.496 343.867 114.772 355.592 100.309 355.592 cv
85.846 355.592 74.1214 343.867 74.1214 329.404 cv
74.1214 314.941 85.846 303.217 100.309 303.217 cv
cp
.905882 .72549 .592157 rgb
f
102.473 303.938 mo
114.147 303.938 123.611 313.402 123.611 325.075 cv
123.611 336.749 114.147 346.213 102.473 346.213 cv
90.7997 346.213 81.3363 336.749 81.3363 325.075 cv
81.3363 313.402 90.7997 303.938 102.473 303.938 cv
cp
.952941 .811765 .709804 rgb
f
106.562 305.621 mo
113.985 305.621 120.003 311.639 120.003 319.063 cv
120.003 326.487 113.985 332.504 106.562 332.504 cv
99.138 332.504 93.1205 326.487 93.1205 319.063 cv
93.1205 311.639 99.138 305.621 106.562 305.621 cv
cp
.992157 .976471 .960784 rgb
f
456.184 159.3 mo
449.786 159.595 443.216 161.367 435.982 166.04 cv
424.184 164.351 408.392 164.591 397.639 168.68 cv
383.973 173.877 374.182 184.766 382.776 191.795 cv
368.729 202.278 381.875 214.13 396.65 219.823 cv
401.235 221.824 408.063 223.087 415.814 223.095 cv
427.284 223.108 437.351 220.371 441.388 216.543 cv
449.527 215.834 453.618 213.908 457.288 210.719 cv
460.529 211.35 463.674 212.005 466.646 211.47 cv
477.126 209.585 484.751 206.027 489.09 201.758 cv
494.761 196.178 494.805 189.388 488.225 183.544 cv
503.883 182.859 508.889 168.101 497.355 161.885 cv
474.712 167.602 472.702 158.537 456.184 159.3 cv
cp
.858824 .623529 .313726 rgb
f
415.785 181.731 mo
431.856 182.771 444.325 192.266 443.634 202.94 cv
442.943 213.613 429.355 221.423 413.284 220.383 cv
397.213 219.343 384.744 209.848 385.434 199.175 cv
386.126 188.501 399.714 180.692 415.785 181.731 cv
cp
.784314 .227451 .447059 rgb
f
491.553 147.364 mo
510.068 148.895 518.734 123.537 518.276 106.279 cv
483.421 119.774 464.156 77.8323 435.351 109.551 cv
457.082 115.25 475.223 143.428 491.553 147.364 cv
cp
f
486.982 147.752 mo
503.331 150.101 512.369 128.073 512.88 112.74 cv
481.232 122.844 466.366 84.6111 439.12 111.204 cv
458.1 117.422 472.7 143.387 486.982 147.752 cv
cp
.996078 .556863 .737255 rgb
f
489.468 137.808 mo
501.969 137.738 509.306 129.592 509.724 117.021 cv
483.779 125.305 467.033 88.8084 444.696 110.61 cv
474.667 117.086 472.006 137.906 489.468 137.808 cv
cp
1 .788235 .87451 rgb
f
493.621 111.958 mo
490.401 111.124 487.339 109.956 484.377 108.666 cv
476.203 107.485 467.437 121.036 469.941 131.044 cv
472.987 122.349 484.269 115.322 493.621 111.958 cv
cp
470.162 102.389 mo
468.536 101.801 466.902 101.31 465.264 100.954 cv
458.182 103.032 446.676 107.097 451.014 117.906 cv
453.493 109.188 466.078 106.265 474.412 104.111 cv
472.989 103.487 471.577 102.902 470.162 102.389 cv
cp
510.807 109.544 mo
508.344 127.274 493.472 142.548 483.813 146.882 cv
498.573 143.428 504.513 137.715 508.012 129.861 cv
511.511 122.008 511.933 116.161 510.807 109.544 cv
cp
.784314 .227451 .447059 rgb
f
438.251 110.195 mo
424.998 105.26 405.905 103.999 393.182 111.824 cv
376.798 121.902 365.438 145.486 379.561 159.865 cv
404.634 161.862 447.621 171.358 455.178 197.374 cv
460.177 198.902 465.025 202.151 469.522 200.991 cv
481.117 198.003 489.56 191.513 494.36 183.397 cv
500.724 172.636 500.682 159.015 493.087 146.906 cv
482.891 130.652 455.264 116.532 438.251 110.195 cv
cp
f
438.234 112.881 mo
425.863 108.273 408.04 107.096 396.163 114.4 cv
380.869 123.805 370.266 145.82 383.45 159.242 cv
406.854 161.106 446.983 169.972 454.039 194.256 cv
458.706 195.682 463.231 198.715 467.43 197.633 cv
478.253 194.844 486.135 188.786 490.615 181.211 cv
496.556 171.166 496.516 158.453 489.426 147.15 cv
479.908 131.977 454.117 118.796 438.234 112.881 cv
cp
.996078 .556863 .737255 rgb
f
408.974 113.647 mo
424.231 108.939 443.71 117.5 455.48 125.126 cv
463.14 130.09 483.112 137.625 488.604 147.891 cv
494.097 158.157 491.249 173.687 486.837 177.911 cv
483.916 180.707 479.539 182.389 466.939 181.346 cv
454.341 180.304 440.846 164.199 435.142 159.232 cv
429.884 154.652 419.248 148.862 411.933 147.572 cv
402.252 145.865 389.793 152.143 386.492 138.762 cv
383.192 125.383 398.238 116.961 408.974 113.647 cv
cp
1 .788235 .87451 rgb
f
487.645 144.289 mo
484.758 164.929 460.6 192.852 450.555 192.981 cv
470.48 193.417 490.682 175.304 493.721 156.554 cv
492.816 153.283 491.398 150.026 489.439 146.885 cv
488.893 146.01 488.294 145.151 487.645 144.29 cv
487.645 144.289 li
cp
469.431 128.223 mo
458.609 123.494 435.392 161.767 433.981 170.056 cv
439.289 165.21 459.726 140.795 476.035 132.938 cv
473.933 131.308 471.717 129.733 469.431 128.223 cv
cp
428.904 109.849 mo
424.984 109.094 420.853 108.689 416.746 108.736 cv
416.013 109.066 415.266 109.407 414.497 109.759 cv
390.517 120.73 378.422 143.707 383.11 158.013 cv
384.263 132.195 410.06 116.736 428.904 109.849 cv
cp
444.687 115.032 mo
426.102 122.875 408.873 152.589 410.163 166.714 cv
410.534 156.039 437.692 126.448 454.816 119.77 cv
451.33 117.998 447.901 116.41 444.687 115.032 cv
cp
.784314 .227451 .447059 rgb
f
379.279 153.475 mo
359.255 174.145 375.729 201.085 393.411 213.567 cv
391.971 187.292 429.785 192.35 439.425 209.384 cv
450.629 208.9 455.465 204.83 460.093 197.433 cv
461.629 176.384 431.692 160.087 408.421 155.943 cv
400.004 154.445 389.61 151.611 379.279 153.475 cv
cp
f
380.538 160.335 mo
369.348 167.908 371.56 196.819 391.163 205.989 cv
393.725 188.721 424.73 186.873 439.883 205.504 cv
450.225 205.574 453.614 202.073 455.727 195.256 cv
457.84 188.439 451.806 180.989 445.31 175.202 cv
436.985 167.786 424.713 163.182 413.444 159.524 cv
406.08 157.134 391.726 152.761 380.538 160.335 cv
cp
.996078 .556863 .737255 rgb
f
448.623 194.786 mo
443.397 200.594 432.904 191.92 422.298 189.779 cv
398.414 184.959 395.326 191.159 387.363 193.5 cv
379.4 195.84 374.706 174.074 383.872 164.721 cv
398.585 149.707 464.396 177.253 448.623 194.786 cv
cp
1 .788235 .87451 rgb
f
392.706 155.779 mo
392.097 155.244 389.019 155.925 387.397 155.868 cv
373.652 168.818 383.276 193.92 392.512 205.284 cv
387.931 194.004 385.777 169.234 392.706 155.779 cv
cp
440.469 170.498 mo
439.675 187.304 433.237 195.932 428.282 200.848 cv
430.916 202.24 451.098 191.188 449.002 177.909 cv
446.352 175.566 443.793 172.512 440.469 170.498 cv
cp
422.882 161.66 mo
420.496 160.767 418.1 159.973 415.73 159.276 cv
407.93 166.017 402.161 188.384 408.882 194.58 cv
410.229 185.445 416.049 167.966 423.455 161.886 cv
423.263 161.814 423.074 161.732 422.882 161.66 cv
cp
.784314 .227451 .447059 rgb
f
480.87 144.614 mo
483.093 146.155 483.02 150.106 480.709 153.44 cv
478.397 156.774 474.722 158.228 472.499 156.687 cv
470.276 155.146 470.348 151.194 472.66 147.86 cv
474.972 144.526 478.647 143.073 480.87 144.614 cv
cp
1 1 1 rgb
f
463.952 161.369 mo
465.838 160.573 467.75 161.675 468.223 163.831 cv
468.696 165.987 467.551 168.38 465.665 169.177 cv
463.778 169.973 461.866 168.872 461.393 166.716 cv
460.921 164.56 462.066 162.166 463.952 161.369 cv
cp
f
498.563 118.81 mo
501.048 119.878 501.764 123.765 500.161 127.493 cv
498.559 131.22 495.246 133.375 492.762 132.307 cv
490.276 131.239 489.56 127.352 491.163 123.625 cv
492.765 119.898 496.078 117.742 498.563 118.81 cv
cp
f
431.763 170.37 mo
433.633 171.705 433.565 175.138 431.612 178.038 cv
429.658 180.938 426.559 182.207 424.688 180.872 cv
422.818 179.537 422.886 176.104 424.84 173.204 cv
426.793 170.304 429.892 169.035 431.763 170.37 cv
cp
f
419.617 182.305 mo
421.376 181.671 423.174 182.584 423.633 184.343 cv
424.093 186.102 423.04 188.042 421.281 188.677 cv
419.522 189.31 417.724 188.398 417.264 186.638 cv
416.806 184.879 417.858 182.939 419.617 182.305 cv
cp
f
482.552 -.000240069 mo
503.121 -.000240069 519.797 16.3879 519.797 36.6033 cv
519.797 56.8186 503.121 73.2063 482.552 73.2063 cv
461.981 73.2063 445.306 56.8186 445.306 36.6033 cv
445.306 16.3879 461.981 -.000240069 482.552 -.000240069 cv
cp
f
482.552 2.31031 mo
502.087 2.31031 517.923 17.8733 517.923 37.0715 cv
517.923 56.2698 502.087 71.8333 482.552 71.8333 cv
463.016 71.8333 447.181 56.2698 447.181 37.0715 cv
447.181 17.8733 463.016 2.31031 482.552 2.31031 cv
cp
.501961 .905882 .964706 rgb
f
482.988 17.6868 mo
497.348 17.6868 508.988 29.1262 508.988 43.238 cv
508.988 57.3494 497.348 68.7888 482.988 68.7888 cv
468.629 68.7888 456.988 57.3494 456.988 43.238 cv
456.988 29.1262 468.629 17.6868 482.988 17.6868 cv
cp
.188235 .847059 .945098 rgb
f
462.372 57.7488 mo
464.214 54.8704 468.902 54.5823 472.846 57.1047 cv
476.788 59.6272 478.491 64.0056 476.65 66.884 cv
474.808 69.7625 470.119 70.051 466.177 67.5281 cv
462.233 65.0056 460.53 60.6272 462.372 57.7488 cv
cp
.729412 .94902 .980392 rgb
f
491.376 11.6365 mo
497.988 11.6365 503.349 17.4407 503.349 24.6003 cv
503.349 31.7595 497.988 37.5637 491.376 37.5637 cv
484.763 37.5637 479.402 31.7595 479.402 24.6003 cv
479.402 17.4407 484.763 11.6365 491.376 11.6365 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.0
%%For: (Olga Bikmullina) ()
%%Title: (Props.eps)
%%CreationDate: 10/22/2018 9:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bie6VecpFbT/"W@83dai6M1erF=N0"U8V:463n,/"I$&/5MY.Fk;-nU,S8=5X69.2ibhG%C/ql\p<E9rMiH3Gh:hDu@cQqQ
%Joq64$f:c4=5gpo\UOKSm7"F*Y";3#WMj+E7iA81.g^&$4lK$\8rq#Y)jSmIl>_0Gfr.kSXeeM#d;7&DQMr<T(S6rel'HGLD7*\g
%r)Hk#QRdj`begCYpn1Zk5%ld6b3]7Qb!>of++Db7Vl0]FB"7lNH:4FNC:d1rUV>.RqMU,e]gEEss-\8Dm?QK#enoc/k\ih<gMQCj
%qV1!oJ^<e_d*9G-9>bXJ:Wgq&]@Js=J`[?'rgBQ($d7)6nnGe.k#:KPU6"]@!kOaOXIfL@ihmbj6Lm>bq^6fer=eAnR?dQVgT:Dg
%5-'8fQo*+.`\PP1WIY]dA*IWk4WsV+!+_6?M;<S_4Z]R/gJpFA,@/D,FOVT]j4S?rF#kI^l:XbHBF@^kP#g!IJheW5rE+#&QE9*?
%!)I]DL$G;<l<j.:8(I0J[@*T\6F4@.qar4TZmod&l,=%%qMEno02Ci`k,[NG)uI^\QqldXA%,Xf@GK1]HC<ZCSn7NnZPG4;c2DCH
%hW@<+'F-umMYsqrVakOaJ#^bb6.Si3a"JB94QG*;kbnWtq6WDJ]bVe+UiQ+LV1BV7pSR+ao<-IOHHH'Il`i`omWu4J?TXi\Sk_mm
%mQ#X!+#[oHh=m@e&*\SVRSrAF0BW:GPGTpF\#[RF.\upNoX*e9LsjaH%)6hq]@8gWTsX<3Yt>\'CK#0<B>8W)n8Hgqkt/<)#(1gL
%TEf5PkkMpmH'Wme+#iJ_o]*i$j7HmTGd$Yps%G'32Kl*SX_O]gB[SX((=m[ne!I&NjL/*(><B*l%K5I#qTk$%UPl/:U2$auHQi>q
%I.i3Z5%sHA'&9?BhG`=&nOhosajbM]7ou*4:*KS[',)kgLOQr#p2)*&@^8SPhbMX5qMu+MosJi<B=6SUWDY[SgHd0j;(j#XRg&fM
%#KIp]LM:hBc??R-LZuKH4,>P7Lj-54`FC_[-;n]q)._%bU,B"-4l`aAhZL!Km_T:$;XMfCQd5HBgS!`-6&&RD*VX]]X_#3SfKRp%
%?-_R#'6c^fXOc^8XYumK7^H(m]DB3L2\2tVb/"StS@TPdk`'W[JB2KuGdmA+n!!D.6(T1t[X!5412Ct;Br"%T@]<V9fCk]qPCm&8
%Yh2'T*>Dg<)YK^V8_*E=kO5kIfi40/Q@(DBJ+'_%JM1&G:W)ehHKWK#`G>c^kiP*"4,nQgFjrQpHhOC`'rHo$>W*NjIVIK7/,I>#
%YL%pnAD.KA`o75+kb:l@<M^J`$^8E.^tgFugU0Ye](o.&>oa>8JYFu^f8nBbob.j1kq5SPq;I.t<d`q8Lt\a5%<X.%BITLMIdT)9
%LoXV1MlG,u\\lfM0#-fhI^@<Q6KW2Scb8N150X7A3\;bpXsUpNfnqR<aQHW/V+";NfoT9TRb9PMXR+Moi*F2@I'_)[?Y(FOCUK`%
%:aI+R?L=,UOi$6pX^+Y;WB@d5-KgSuX[j;\oFRFLd!4ALG.6MVmL8GPiiIJekLnPWo$fDm"t?PM:VBBeqV7:p`a?daXY>f!4)PT7
%2YX;#<%Z>@cO7r6Fafr-7fNVN4,MNJHT\TU:o;K09bM]."dcd$c-4.fD73#4s3>,4j]8L(k*]iAYkmaB'S!*c2m^NfB=V&oN)jiq
%;jaK%2+VVc1n)$%5iC8D0O&%JN;Mb0s8GM&*n.%5"T+*F[_gM1]D&&(qd93i"b*8^GL:n_YAfCfi50##?W61d<e1K/gnGnR5V=]p
%f2CXRQen+QQ?;iZIsD1[a2B<QkE0\#)`:os.p/0deZ,eM=Zp*Kh;oCCmWUU24`+,!P'p75A;EC7kP)JB^^rTO>ih"tGE.%6Y"K27
%J=_UA]=<7NQ[ei(CVldD?aD)*B'&JrKiKG`8+*)n!PR7]6pWpp<)9HSF_f@1&QSNm69O5QNdf6bpV"(OZZ^Fgn)C??h`\VPV'r1,
%[,@)X/i[$WaiS3R5"'<_nG2l4%/%3Sr,phg)qdE];T?J)Z[8qFpX/b*\R$T9PSUR01X+'ud8KNF^%n,jIrNs#7YUhGm&m*>gYqAC
%>-6?S(J!AtV5^5>8K=Qt5:1(P?2ZuJS2r_B]ki@<Bt9[Q\_O'+meXu7*.Ts]?[M2e"5Z.GHe-iO?Lm]i_W9TEoj__j9<:al[WC0*
%[eR^:j+V*O4BOO,Bp>34Q%N7g[okl>=qU:1V)<FF`rFcmS5che-]b:pnh+d9V0bk2P.'aogHWmSdn\rWmNnuql,I@qBI^FGmcU4I
%8QTH+#M@tsmbW>:VfCE3BV0WTs+];,j85gjoBt1;+I[*E\N`e?#'k^=gXX%Dg=l/QH#@*^LC\^?1;CkQY^pHYS%maB#OV6,r7p)L
%BsV,\2#$0V/+i:-%8CMi`#u?GDido7CYc)#)Q1j&AaTB`62,r(Y/2hUj7L.53T8k,8[W_in2:0ea]'b]Y8ba(hdS3_"^`fF\2(O=
%ije[OcZ6@7CQJp^+'Jd&e?%cXUfRNY>BS^\*XJmu)jS>+?jp#koRDK/^:1nK)EW_q5o*&\b\"9]N)qgN6@54%?a)6!&gboYC?;"4
%FeG4D7?PIbT7`mB[/E-oGc\5lg1iR,IKT6:94-*B<Z)eoaM`02#Cf\P(\`YIXa[JL>ck'^gAC1pGea9.JB;$g>35%BEA(hD$Vda0
%<6OrQ/GlX)DYmh7F3e%h(>(]m?iAjHrZ:Ecr_6GT]I^T1j*-i4:p'+,%&Q52S,O02be9"N\%[=r>1u3Uaf8lhP.Pg!4,l/g)/Id9
%G4HFiBR0OerAH21j2t(s`NWG>n%hp6WV\:0O_`^$_IVX::M+u5Z[`JVcLnPVON>FK=I$2=Z)+ZPEFGts]RO,AY80#7-ZI^/2d@48
%3Y01r\_5hRPaf:=$N&JV_LAiF\(1Ed]>LP9Kbc&tPA7GNWZ@Y]fh;A#j[>;UZ[COh.F\8rrh5Hh]@?ao[D+M$9YSk?XjqsbHsm6q
%<SF#a(L*s-jU73)Ak.%Em[Ca^^Y<Pmp3a@>:A:83=kqtUUN5!HD,\3/_9]'X?[8O+NFoRuD>mZi]WD+gB"+?%:9@i<kEo@4*H\4B
%r-_]t+9,J]D0A]a;Nq=a.HDRs?I$ftLEGJi^Y&>Yc.`V,-OP4B5Fu0c>$2l+_+EZO:t$2,MR5!Lm<Vs&O5%'/\R$fL%;cY:e`u[0
%L6)AT(Efq4J%*&!jr9;2cHilb,?H5H5<=b;CN*6j*M,K_ek%+T9=oT(PO`Vjb5(sem%2^!k<#Icp9=)qX+c8VG,+Q$ghKo[h=Her
%ltN;&4/%uF_WB\IP4'Vl-@\GUTT7lARb[Z(TBt??fI>Fq`uTU-jLaJ/R!ZQRCKfl'Q5m>Rhc\iZAbP,"li>ej4)`S:M!I?>1Aj>F
%$U(L=/NQCWX7<RN3p:BMM@JjjT&`OEB:i<kD4f17qp&-(8sSW-n!WJ"_Wld&H9Ine(;2_a=DBcJHW0.H3qdIfBl<&$P=Dkf.<_CR
%bA'2>rpuZ_4N[&5j3MK3";^\.r$J`M*[0=L]=HF-SC$)>eB:ogAoU&\WJauqmZAN-@C*Q%0]s5&k:LcC?'9o,NQl9\k>I+,@I_QG
%,gSDU5JO_s%@@Ybf4D2K4u[XWF<s4&cAcnZ'b=<If;H@==gL`LC/m!)I_spClg'bu/CCp)I_pTKAWFu]>@0:Bem[rVLUQVi^_PsZ
%T0X>g(>s<+\?Q-sbQ9\H^l@d?X54Fap5]\V8*/lAX0K-8CA,;P(X6me\6[gj*t]mlNQ%ba-dB=opEd>Jh+=XMF@Na6e\.sYieDS:
%^\Tl97SS&@=S]GH40J"<5omP=0%giJf%&UJ4#0(mG2m-&`cWJ$;ZiZ:E36_c\S/T)8#71E<K@&=r6A`Z:3Tn)H.5K5CU=VPc#94?
%?/jAW*AT)shPjPTFb$.*%ejqa3dP,PMsi+N:3t;ipY>/8Im@n;,O<pihV6QNoXOJ*2T5%4=m)jekcL"R;@6M'ggC(gdbEUjs#qn)
%8/LQC3Dk^ckm?7V^CG#GC@A3L;<,[<mcjIL[(_5"\4*7am1s+/R.oo=!uILb[0-U(SJI2p6M'T_Fae\iXD&1u/+"WWpRC@!M/U%?
%jl>A2LZn-E*U]GqTGP?AGSe-d-K:1fgZKJM[U)($/?H!*3>nBW<@)q4)oL:9Yuduu@E1!hE3jHf0#d"oD788,q@_5L7)#\/j)6-l
%$GE=51Wm(t@`a<3[u-W[gJTKbE5"&OLV3%cHBaAbr-#PT<,.%<IAcUZks\boU$,Ob_pG7T)sbfo#JTrDkPk2[Q>dsBL+o]&i>-^_
%@1#!)jO>o3&#-Rm>M6-eCAZ'5mi4>@L@kQ(?1M?8Q@/5X>4$VsT5(]FMO1eH=T.;kpD[cHm<2FnJZS0U]tuVRo;(B_7Tkf0?d6\F
%#ZQ5&*Tu,K?H3F$#U7T`K:R%(J5,Kp">2gOHF)+`7Wsknik$c1G?0;:F#6Rro!aF!n&][3n=.$gDXGs-8*0Y0JtgC_Uo3WM\`)-#
%nV!G]GBXqdKV21RcM?/f?96qlRSN"Mp$H6u54?*rg&*07ju-lJLeF5F3WTSS*)1L`e7dEp8E>,b*8NmfWf`,-S\tGe0RuID[JI@h
%3uYLVQ/ce(RG@#%?KoPa(NYV9?+F8nrAeQ/K5Y'AhR<AXDr5AqpN.#/8"5]3X7e]H9$R'ceN%;"^OCAt\nC^,aT)^i)ZKQG;hnh=
%j5t\g0&J"$4b?6ZZ4oX<PYRhol/0![#m^4_65sc5+_p#"NmAiZP-UD]8;(rTRJ\+8"Nj<Gjs&C>H\1&k7UuL-m7dBb8^<al:KuB2
%7V*0=03/Q6jA5KL#P)H/Q!<X09Xh7;HsUHn\b-O!jqQ3imRd7lq;lW5fQgq9J+%u<T\Xu^Pl.%^:VUigbKI&"7<O)`3Nb2^qlp>'
%npku.SnEAiIoAPA!1KhM\[\]J7cbi3#,Z@H;r(//YPq$NRak$4FlmP^Q$l8HFe9V\^T7$eC3-R^BqO:Oo31G(j77K+-Ca$B$/R*G
%blu;N^faL8ek*DmO_$io(07+NAPN*GMj="(c7Wn>q$hI0g+>Qe^X+@0SK2\VHKq>#:]9:ST),bGI;<6SahKWL>/`E)r`-OI%/VU[
%GE6o(XnTJKo^]?P3A>BtFn72=ln;0kjMQFZV-W-?EMKSp0%>p7C&u3'Bl&-<po3_;c13JhP=#(i2_tT,8%`K9"mII2<("`cT40V0
%GFhER4MY?;m0qZhK+',ekrl.$7S'7sTuSoI[ogh=[0rHsX/j&h="A6l^ot^dETK#p4C7qfI!bUj?CkAN'Q6,_?Z4e(gt[6;^8>g3
%.i+VX7<-1,H?"F`rI-iZ*^&9X)V3f;*^#g7\9@H9ldoTclI0dYGk8pWYrMQ(N4KIAD.WZ]pC@^3<;2m.=!`:)f#61,$i^*RSN^;.
%:B)7@%i=\9+/ToM*2%kr^\.TL'RdK2K>4R:WiSD(f3A/q;28BMn9$lOIecKF*a^GqFWim!-hLhf%%Z9^#TKE1kgS$%I!nT(4M4Np
%R%Z/ld;&$e_s<*(1jtg<L<!A]C9<hDprZOCbG?#]/c%.Oq:>jEe`IZqI>+l2/"c6YRDak9r@cknFg0?UYA#kVk2u#-\&!]n^%Z`b
%\j+ul_91%r1%sQ!o'&J4YMHgi([#Bh(1)H(?%9)aGZ3"=:VL2h\MjJ*H1/bJlcW(!o`s>2hG6l%o*J)DN#*#Snu@/=QERuk(SA.s
%Mm$J8:9HJC4867nmp=;RrBm\$B,B_@Np][*B0q[>00X%hiN'ZY#]Cd`OaoU0?>J!WN/qDNV`upJNt_FG/bR,I%g5+ujc.=CECB+7
%l'Kp:h$JFWBbm=Zh@"Z,=\1e^I/CsBKbqAq-5K\F`XU7-ZF'Yn_t<NU_`K@^NAid</oJ9sMhgo91\\YsXY'7Z;;H-An\1^[Sh8Tc
%3;g($eC[!6E;RK:\oUXs>>)@cO63?AT!$34?g^qloZGm?B22eqXaL(.GPLr)EVaRbl*FYVIQYBL3HP4FWOBR"-s1u+ICHRgD;Fe6
%J*]=#]KcG_oASJg]kQMfhT8j^k4A5rC?s:Db)ViL?$Pp`I#lSEoCV$YI/\#/Fa*K_FgkJf?e:3YH[Ws3\^m?YBNA0qoO3-.M_b#(
%0o`lt=P,_f*_\5iW4droZ8k!pJ*Ftu6C9?a/apr%lfH*`:[al>f^)#@o#ps=3'JX$MrSlDUZ0qoUX-p=nnUTGDf_m[]_ApqR>th`
%2KeWi=E3WZRkMaMoC40Bm-/Vk8ToG.hrEJdK?6Ro?et&$qXja;e:,2/ZZsTM'?.55p[cAoRH8)#CMJ0nGhph#T")+EE=6[.Mhf9n
%HhDU%WKk^tn`H$>V;h.=Z,P_Heq^Bem.STb@VKIuW]7Ip]2KD6)paGJjf:g5hS*%?Vls@Q:>C;'F>Mr!MI(aJ(;p*K\elNV8&b:*
%`=KplPmWPNG\?$D0AaD>GeJ??lcstLriqtG0$`?Z/hXgVs&`NoBO32Qf_BL%puqRrG&_['AA%\Jp2m"<<keR<q!?l0<,lEbXVRPt
%/C]QHX%uI[Q$Do#\97XnXSAYIZVp_]j.-8\Zi0$O07J.Ph_'A(BkN;b>;%mm]5LHI(&)n?Xq_Hcj`^0569H_=c+j3TCoisE(;EgT
%Ijqg=e>';.CADsfr+,?^fYleE`7X.eRoa+K9D?BWD!Uqq1%DVuCJ;pL7l8GWrB1+)/3LO!3Hf3;G^JfFNUlJAqouTW`g.*@ClU[R
%nAL9f^0e"'X_g:++'[WNC;sT0T-'--C2^d*HRl%im=kDhfZ27ra0D0[)LCl'WZ%qOU(34':Yq/'CkPdse%Y@pNK7p7YDl>FHO&S0
%[@Pq0Z^^C1\C>H7\=M!qj5Hrl)Sc78f&$3#(SC^E?[h]nIJhKiGVHl*qXDf*`qFI0rpoZOg$uQ3;`D_Ra-3dunj^/M?JXL$)ZQn1
%I&:>lO'aFYN41,Lp90IXhqPbd@qKHTg@U/U#M6nr-_ITqiiAhiEVnd_CNlD@'X')?b8]%Sl%Rf+:T%RSCG0:'GHSV3bs/kL4h%h=
%XZSiImb6OH-O8655IF7iS[9K)Xqu#IhP"A\:V:t]G('5Z`qFQNXF,EO[25^DhgRJ'p\LW:gV!OTi;(4^Vbc_S?/P:Nqq'_c[GP6h
%:d=kuIJ7g-?2sime&M'E]un_jEOTa2DB/(.T.!DRSP0kbG&(Q96b]&"?X&nn@4!&,XX=cXh]*\5]UYA"1\&NWLH?/\;)8m_<Vp[n
%GklJricKA/oo4gZle*5`e[[Utbgu[>NEa_ID;SHCdP*U\f/InlCi&"BGN3g_o&RfGdt=PWp>"Ee)b4\E+)eLsn)"4*]Q*[@EO)qf
%hb:WFjsTVF%dhB'#IiP`4s_1/q=8cO@WHh->aaAqI'PY5?PIC`^%c,SlGd;@1,ZNt]eSX#f'Z;hqp6fe4oDV@RbB/1mS:H@]_$O8
%;ks+uWcn+_L7.m9&,,/YjY,(A9,$d6Dn>\d?Z+_IA.ENAdatKXT2.;d2r?Nn+)^MrbM+rdC[^0:Cc=PlS"?)&Im:&%j5]d67q4X0
%bFc`0oWstIqXj*ODjo/:Z.AU4cVHoB\io`g))PtQ5E7DBW!BBLAo>pQhT`./*n4fQ/$8?0\*l9J9]_IER5rt]Hp'Q7r:4fMpA3V0
%=[,-_0Y?i@bNmh/otAB3(,:iUT=/)kSNSO;31)kbs$N$J(Z.A-\VZl'l2JL*L+,:=RXADp>.]3b<.=E';5sQi\3;kF=Po^>IIUcZ
%0'nVQ\Y[bF+6M/;gNr:K=-#SidHbK/^2/2L&X/Cd[tT8gIOOX;ncSEl]eM.Jp6T-ES`dqs*n.pqqWd,[%3su@WB#6:F6Z#nQGleu
%Wo95uO\6./r+KS5?2mf,;!Q>cBm$ni;HHY[5.jm6DO)?Dh<Lk=?e358kc*[gA*qLi-bX%T^![jKnZdNbYMIg&fCjh7HbGG5V.QmD
%1i;[9p(QTYgZ^Hak2s([WP6's1+dpVAZ$&W[V^EZa6^^?V<dj*h"m8;bjGl9A`fk62fC>*F$Y8$j;oktD7Z&e2F"dDqIJE1M/Od>
%c#)KgSD&Ak$MX&-P;dsVXuc3ec,NK8g'+a,])FbGIe;hL4BYiEiK(U[SqYm^qk)pDqL')YouT[.SCflZcW:Toa%t6$FS!E;RJE>[
%\'O7#+,gp@IGK60s0d5m11,BRB:4LbFmVc6EQ]mrHuNkHq*s]$bN8J6[ru+C^2^2Z(9_Y7a`2\)rmKu`m>Zb@lKrWET"=l3muL7g
%B(*E=\o[W.maRe?jb(^HO'C5-gc9Xrp"c$k:RZLr/FU6dqs;GLe[lq'G`#S\mRceVinj%gdc%mOc^O=kXe2\3gabUV=h`KM.ED=,
%lOW1H06hp*roW;7ir.]._iof6L\HQ3])8_>Yd4.LJ)U)"lb/"u2p)A`2f9^d?B!3+Nu"@XM!!]P`J<K3-dBdj%C9#[G#L%GW3s61
%S*fq0V7iFT>KbXTSF/$,ok1Dga6TSMo)%#D$d0oiSo1^T:#)kQ/;BWm/$HC>$S/WS7rKL)Gl>2Gi7?[LI.44`q!,]@HFrjS3'VQK
%Tq)W7*j/7$__;VY?`uS?pgncOq+/FO995AtRYQs\*3@qDFEFk'^H1uWakbL$WN"4EYMN9F<^4W[c,Wb\lIk40ea_nERkG</5<d`"
%hL./iriYqTc6".:SrgSs$$k+UCQkIfG4!RFKu>3ORl;+#XrV>lqttP.(:TmlXXu.gIJKn?Spk"Y<I?^lpCEiI\<V9a?JG!_c]2m]
%0<^_65.J#7r'@:SG@RO,lX*[&DeuA)o(^5i^$X:.O6mJFkJd1BVpE85`n9nU3-h'LH+l6)VHusAD29#&oOn25/'QgrEV/VJj3>."
%`2h.<F"_\p5HIYO]I]([:VR;kn(iH'0gE5JEkf;soBKq!C])`B]-m3Rrn+m`r)N@MXhuafiJu]>H>rWCf&"?fkLWXjRn1<lH=;<l
%ea#H:os*,n]t5e5gnXV9hlKULhKlMXppBU8qU7>%G5;*;S[\(FWUNE_>hf-cra>-M+"q9h)h/j09Wc!lH``e+T'6+`mrgq^gteR5
%;^lT;?*F43]tJK-pO2R[BnD(bJ*YeccML\h2qQnF?Io&[;g.1Cer,%EIAlt2Y<J7Y]it6A3[t$Jb+"%J:K(luo[D6n4T+j1?+X"K
%[^reN^3>(mFnq*q)k5s<eW&`R[pEleltl',D<s)tm_#KOBC.8hVR"m<mja;EX6!VGZi>=FGssQ6O1*n><R##^WuH9^=KL)?DS=]O
%O1nTeemH0Ph)jE(YP5HQX8D4P'-HrZ>E.WnIXZ\1?t8V<l_&^ZCt?i(e?.Hr=7blqa3W>PR!s2tQ.=3MgXAZb:\IlY*6*j3mbuaf
%Jj4("4t5*%Y<3?g\#6NX2"p(qma;!fRn#sje:Yf^2^[REj-:R(qm\C/mPJO'WSMgs8AB$^m+f:&U;Zp'ai<J`:FD.diaWnh9DEV\
%IX/V1*buO6WS5!lHGA#.Ggeln9jQY7s6ndHWpp/4G+$%Jc`8o]bC<QbT%;Z(PBqAFc_[Vu9;s:qd(0'0aKjTf<ge"sVj'TT-\Jgf
%"fXgS=\E*QTPHXhrQcau0$($/g+`un1nfh:M-d;:P>IiSJ#(Y0aT<?d?Zf>F^NiLNSirgrXKp#JV/^V,3,W^[M<!1^i:3\0aq+TO
%Q-*LHo06IY?[r#SqFgF[Pn4"r9a4u$jc(os41G4V(10-eCfSV*eTC;k]!sVa_[#(YmlYU;Q?45EmIhiQ.:eBW:8g1LAt-DZZ`S_;
%gZ?1_LUnW#g^m],XadD-kfkbZX]IO'rL>F\\\Ya_G8M=)qn(gC<b&U^6N<<K^7.:>Me_Ldg7DMt\_R"#<g7d^QfX[G#^9h*%>-o,
%O8L'R6\HI$AqOO9I.Hm@NQUdaaX[-/qE7k38l:jATdd+$EM,.+)5<W#1BeC"QIN&*Tp_OZ]H<376SuX&K3E%:iIc]Ie+ZOkTDOGo
%NgsVMc!UMLcY8]R''UEheId:8.D.@UpF)c&8Fn6gQJ1@d'J_`G+KZ#HpZ,?q.#k,4Whc.]"m9>dqVV]N"H94R6];-VV.c\SXSqlX
%?Kb9$<YaiFWMT4e3p13t2DQs/6u;7b4pe_X!(V<4DBFsRY:j<5IFnDoEV"_;N#m??n'5fOn7O.;OnUP3,(tjqqb<0k:^EfD3'Lrd
%m;1mkq.I6dg)LN$I_14_N&XE^#U:p_KSmbL2pg)4*b[q:.$+hFUm3g9lD'p?!m&5,:!FPY\3QBdk-rmf#K?bDUeSH#E*0uZNhI.`
%`sYsS3P+e^H<%7?CBf)(Fh7V9HQ;JQgX5sAh>bn$+7T7K-UQ1igsR.&>E6=t!>1Xc/+X;.-&gcL9>CdNXN^*^TS>5mD'_)-VY`#>
%2G0<d6>%-cLqW:1@0$4o&US4I[_V`Q'(C:@_dNO0_>keh0Z!el@/sG4rZP^$)"j%n`#^ns8?UE8s)!_eR<Sra4>iE.)]c0s\GOR;
%#S@VfQ_m.q'#\J[i+uhY3n()CKER0o-1*:,?iqdS-\qaU+W2XEM[(P&"Ecou?m*)sM:4.81@Zrii.<656"tqL;N,!2Ju/1ZJRf=a
%*Xj>.@Lf4%,Af^h,_qu,rXeoT"m&+f$C$Y]GfiZb&rq2S8aCK'i&*)b"e)85NX*4T\$TOoV[T8"C<qrd>G>Dsm;URQ<i4e<m=N-X
%,T[iW?@i_TPVdmDf,1mUk8[SNi>JSFP<F%RlQsQm4.7e%<#QZXe%o1Bg5R7=W9IC;l%6=mhU8SQGTgu;9u4m`EH@T"7rtSfkF!gR
%=l'oT0+u=(IndPJW!=,$[KG\]m6.$>>O3C3<JV(EGCtu1EIR,D*n152j[u-D`rc[Bd]V'eaG;!>aXK8;7iOu(O!:a<,R'L6/1ncf
%Q;Rr[V1$BW,8?[a;$n5]@%2sTUj:te,BhTOded]hr]]m_IIHB=oH[a/HIBt9<*HEI.)^qEN9JF!=%O!0EJAA-0UD.9__ose%UK`>
%#7>M*P_/NYoQ_G_2$V5h_?Q;;)Bf(dN"3\'=slj[QL;92-"dhlmg$!ATXTS:*MGP"[MB]@"L+,Rn>`pq%ZM&T2aZY)g4Ung_Lu8?
%P:(!S&kFl\+Y3^%,tjhmORt&c-A'kQOi079hBI!&Y\5+t/HH/IW(VcI!7cXH#VUIiBTqXIhnCZOL9R-=L)D1`QQRjL%>:";gWe3+
%-NI_bZrSh2jRjeMH\*]I'@7<<"uT/f8FjG!!<^1dnjB4'3ZsR%nP2%h<DfD"[%Q?`#GXV4NSl&)'V!)cL]rKVl+on-?S^!f]l8g7
%.0K6n,2rf98;oejfJ]J$;%]T*&oEHmi'F)77!'/.(lZH>,0<YW7SC+\!N)Z'U+h^9#-RerYQu6RnH2)>9;Y2dBk'Qtm`a)_]9Oe'
%aEKC3jt6)jd>Ppe&e[Z&P5uDA:uXW;$mAs!ncpJ;k77cub>M66#k1(B_.aLK6d](g__EI4\1=d5\.gnV\ddmi,5j7s#]f,KO%:fq
%b]kTXQq)2TcFcgj7g4ZCn$p5Ebk,"$6_`_'$Yq8%7<fYdE-oE2WPjtY0o8a/I7OTZM!CJ:*'3rgMF9-"SXiopBY2]!hL%17`=>sH
%#MeV?1EtHrK)I2&_4RA2-M.h=C5Jm7d.*mLmRJPf,8<KnS*:j]mu]:=9,!s:MOI`^7k=so,S;>%-]+(D!-p"[VQh[!&_<c@+J$'9
%=:-4!mVU<BXKirX,_gRRnV@;V9`E@sMCS^%PD1?HA4mHE$]%j%LbM]scpnaF&?Y1@1<bR8V\7t,aG;AO!u]Je9hM!GKJLdVDPgjN
%@_@Z(>4e[$@C.W5-,SmIP*I5S#a*4Ba.kn\+S7F/[D7,9a\WSqZ0Y$2OXMf"&8`RJo<`=0ZUX^B8_X`]TR@q;*MSfDZ:DN!>a$ZE
%87E>Y.7qOHKVmjV#dD5qBrrNp@]QbS3]D\Ve&`62`dZ=TO_ATQ\WALoA0>_A:cP"i-H;5PR)D=PXd7Y8;RjTS\&)PdI;d8)6<UgU
%C4;Jgnpa.hIY?a2M,7f@>pbSq74fa[9gY6Q=pJXdjPr%c]`reHKqt"ZPX'HJ..F;LiJdL>d6n2%oG'-`;]fs1!L83e"PaDkRFa].
%-53G=-;:?XFF44q&?fVB'bO.aA6&[b0Ldg1m>O^E#!aOAojKEfg,Z&:.lq?u+@mE?1eD"b\@`?^Q@L6164a7t1Q]?c><c#p%TDZI
%[,E:9b=iNN87Xs$7RQt'J3`-;>pda?(gM_Q/;H9Y2ATrbAWfciV-W]tMI76`aNOEVK*,PFD*\>*3qDmX[03if6P6;UQ7+/m[k^#k
%-V.da/2TQ[\]Kqd5+8Z1/GdgU99h%s7.,__PcPudj%LH+-3aO2!l]j-:(R^t*H-"XRHSo+[[+b"9IF^[[XmjFC#1"/nm8#>c\=ON
%bB/KVLu:M83Y/K[6qOoG88RNf@V?2*EYtaKJKX)A3:'$)R?6_9PefrFQ'p@\3P$WsCp5pA).`GKeEJOZ:uK$>Z_82VWEc7-bQKV<
%@ZumiUdckZ$<`1hTbIRMZ6Wf*Mr@@XZGVS#Y5rkVYVO.[#fhNIpcI^3,>a._Q\r9fT25aQB7lP/J-!:$U9Y'X2HUrHg)/GtR&,^a
%l^SYbr$qt!`Wutf[ZY0*lkVhjdjL!@IPS!/LcPYS@KWm:%'`-plQXt0J-Vcc@(cScbKpio0m1Hka*YCSFGV,sZWRIO%Ih79gJ$Wr
%!C<@OT/\uG9o5JMI"8S5Q/<rU&"6jHHJLHZ!%\O7OPFRM*:$?4mi9+rWpYKtPLsFhN.^/eXYjh7b%3Y[Am^jY("_JWqPsRFo5Z'q
%IDj;,101Q58Gil4%P%YA*1"l+)F<T<-6RU<Wjf($V0a77W!8r_OI6<h[UmD.^n0^t/Q=3H$@'pKoZKWF85=?0^QkZ`+uG7d/<]n+
%Oc;hUV@Xo\6m8pJ%5KE:BU^CQYq@2`64'V</ZhGP+;)bKmLtFrp],<h).@OuiLh<)4R4_!fR4&PB"JUrTl4/$0%d0["N#e,$*8R*
%.eA=G1=N9D#l^.pU&d,=7'>YuSi"^FR\U,+Cghm-]&A67e1\&kS7i$;c,dLBfZ`d"#!:(eDgG5@<pG"`%X]HmXF/'K6Qs9P2i1fQ
%\HSNP6EmPYpE\)fe^FcWI`[B0V+]me.Zb\)mc^r$a+MT6dmfhbP$465^nimrQg*FT[O..$^ASsRcPoB#h@\]`&WS#?rWkS.=d=M>
%A40tK*i8*F$?cLY0_Wiu_O6(dksP%<!MpoqRBF%o1*_3U*n\qSBu's?BI#uC@(-di'T6&BMe@iSpDOd0j$k>o(Q8Np,.X>7_FdJ\
%K_.huf+>MIU5!Oc&7XF#ZL%ZK`FN%mn.0'3C'=Q1;P&Qr$k!T7`sZk6WFYRQ_^$Af93BK<UVM%XfOBDiqc?l;9^Jh2la;pWQ#P/_
%MFmbpaU`CmaiK?n:'F5P-q-lB]eKq[On$-fjkt7mHYsK^k>Jl_Futf&(jRp2gL2!mP*cns1LjrMUEcL#Zm$Jp8VTS.Xr5=/3q>XA
%Q$T`0VZB*Z1U^m#-e!-5-=_BK$^0A#Uc[#YUnQ):D<RP(9SkOOc8rHA,a0Id4%TTB4GE9$JH0ANpqpS^_@4go'8&jfG"@41g4])F
%6!T]-&<OmK%3(YIN@[QH$RtmB/BaW8W"AMEdC]\a>%XsGZH\2AJ9h8.$e6#PkFqh:k6QfWHC1"Xm$1%Y4qi-6SUJl]<]KaN?Db%G
%@"3Y=.nZuRnV"8_$WD6Br]:/.hQSAp:a/h1!HD3D<YX,2BTF?A*,+jl3DA@q^nb)7iBS$CF4HD5fs4?XlDfC"M`t:@<6Q$l`9+k5
%_\*<L<rea)@DRIJ,u(R+9GLA/##FuJ/Qsm8GgeVZB5%gfqOD"pPl`/*>?<RfVdUTCD"(5A<>tgOfTTtdR$WSS@Oo!`BZ&CM\o]KM
%'6?jrZ"uHV8gY&'7eSoSn%@`!6>mKr75.acn;G4"-Ac@_r9'9,_88jm&fW?oqHM*i[P^-(WoRR'mj=`=m[YkIH5YY8O_e^4G$7N;
%4;""a9N:!AGW6-:@sA68Fr5DYOhu@O#T92WHerI'05U5)`(%C$1TYQk,8NKTd4(T4*Kk>Mh`ETPh2(L]'kA14X\*Ih)KC]\Nq%>Q
%(`i7;a\Q'<j:4GR]+j4$DFklYX:R:G"'(fgP_B<)L$;1GkRM*c:%$s?C6E+ko.jDe\.'@LFr6>FaheJ60MG]<DNn)177mSR"9$TZ
%JWSg#/Ne@cYksit)O^lL/d]??4TVEP;KHC/\a\Oj#\c;4C=t6XT&/X331ufb6Ut3TJur!%jUi[T+ei=Q^.tsDZYUm'+X->P$HS=U
%(Ga#3;[;'?_>\BrJl7bc9-8[7#^\6Ea=%3EQFOY:jG9"0G8ufjV6id22%&=CGXAq4$J;@)imiQl0T\kD2=NVc*91e]X(:J2o4'JL
%#/siY6(eQ-6CLU"7n\HG1>")=S(U+4]+Dt<E"^H^*V3k.c@]d'@Q7]X.f.L'nnF(-j[RncVdl>beC+59W@lXtoO!mTJB=QA:%@]>
%8Ii.,6?k?i06&;.Y]aWekB!Q?'L/O.%*T&ZC,^dlXVdihgJ^7njuQCeNTSXAeTQgQ[!IU4AA@e&neoP92@!BPm<n3sQHt-Cd-/or
%dStNcWH)R(opsG$juhbeT#^@McWm&hK`9gSiNt:!<I",(e!hU_"*0nSrf>kg+^>t2*:`gP6E*5_=:hL!5BY($!m1gD#lT?[-O?F[
%n/IX3LP.jH*G$':LOqo$'<dV966QJl"An:>,QZp@[NYrU19Vn\@^f3TB<VR5=b*Pa5^igPjMY'IBS,&?BX5`'#1aK5pKNg(0dpRU
%Nf\mUaE-]UaamIS!&k/W&#+C>QZ8FWQ%bF#Jit`E:OrN53V"k,DJUF*<eIhGc)935'0LAZ&k9.M5m4HDhBZH)VE$Ic=D4TG8R"i2
%\=a</D+fID0,/d$_S6mqNK3%;"I'P+3d=a];sm:UYjN+.Tem5E91hL,#1K,RNa*DL,!=ib<$(I;?k8Jg@.V1U)kudU&d/]PRXIiV
%N:m@u$j%`kh@"EL#m02kZkV[54%4>d]`H#Je>jE9#^Vs=*Keka=oI#a'a^p3WXhE_Fl86P$KO`_H3F'k"I]2BN2&V/<Q\!E3q;G#
%_gq&fXXYaD!SqR=L]/)rS-mDZT-^!=Op$7T$&B)L(D"P;.&&"r>(L(n/YHM]j,#?Y%i$n=!M<Ll,]K-)-[m2,iZqqR"("11r';b\
%&\TI+noG3@N9.:)_0\ft5_)$h36,Hd']JGB[3,P$d0q!>E"1laa=>:AX+Bb;e;X+'c!23%=(&'&/=e%^!Xgc6fQnd+=$Nd'!>A/\
%;c\"(3!@Pb@ialAS/&D/K[IUb'!^d#6#)m20/,[Wh;O308;gG1&g?ZK%Au"FE:@qg1W#0l"+jJoMG4YtVu`bXiXhdZ%IE]NUe'Z8
%jFYWq3]]b29rj;ra9UBF9$bh/3&eWGKN_qM_>05DpQ;m`"qLE!?@3gTK2sDZgD3'a&Lg"JSKK$eYkL/rOV!h6H\ufG:qGiC8D5Wg
%B7PjFYmqV2P7%Ab&2UL$6n5Ku;%h5`,Z)o%%"2>K<0SXqV*$=hMbu45o+:`>hp8\<hV"SnNP(F3ljAYh?b_mWUP(!>HLo=E8FWAi
%P/ROl'LL"LpIPVsKZKBKNn-ZUKQ%=s[KqM/4m&gt5p/DqP9e)^%W`O>3+3iGOMOe&/NN0D\=?-b$A([1j;.1r@nm:G_7#"_)/+TD
%NT32?;62'K/O;*:/;kr;@Y?GP+CM/W8-msr?t'71K,7k[TAsn3jXR:,8,):u&3m0G0hIMV#<@bHnVCR`7ZLf!c1))m(W]0a1RqlE
%Z7S*,EJfAM_&@j9bHhMk<$MtbD]Leq6p!Z"$ZIJD`>rjf!>HS5A=l2D/:0D*9a&X+!tYtZLm!B4P/NU+i5!6EFuYa@_$eR/$Q(c:
%R>'[g9?E@.#,<J)h$aElP/8NNll_6/0)<`0JU8Ph,9X(ZZU6u.9C,?&X9ns%NfZ4+r)h1,6oa[JoG$g0.5jYHRref>qV[^mMZCT!
%Ou]J"A!DXY^huE/opdBs@Rn8T&p%Oo(lHQ`D@11ir-#AF$rE5,F]H<++"f2$9R3jL.Z)/nV_F?093t2tEpN&4^-9E(^W+"e'?"7?
%!kLrk/B&`0*bM('-m86!]q2AhP`$$^bXeI]G,kTWWJP+n&N5L\j:.ci`3b'nYjamZC-n.""@@e`JMo+.Rn7el9<!0_4(/Yg"E\K#
%]EBOO[?8!2a8*;#;-<Z@BCJMgomd(F!G4&/6\lCcLj'+QkZcta-u"nYEeKKCph4&_,R"fY5_6n2+!Z.m+X7RhVqC!=F4Ld\-8O0q
%6:UMc2?J2U5N>m_KMY+5`TUbUn7PMiU*Cq;MXCm669$^D'KtXcIc.4B)mT-S3/<JM-_p+h+scW/RA#7k!h2p0iZ`tCn:"YJ"Em\L
%+m8doL;QG]dRGq-73c(0]CJE@Kq3iJO\o`!!L9X"$mMAk[.4d?TRfC<"D%>7_3^8^ZQS5YPGM4^0Z'P6O\UpBJk.lna:JU8O?IYm
%ZIQ`I8,s>lZ3s&p67cYJUkj`&3MrGX&.A%OVPJk-B0$`9;--aB4MiTn]^ksi31[[=:ge\]W?>pnDSmKjJliXf`-RLP68kQ!Mc:rk
%A!X!E<7$TVT.X$h-(j`hFE%Z9ANORQ\i>BWGng+P3?1N!MJD&]7N#X!?[u!5Vi,Z=IOnoq3D(@/19f+=JJp);*Hk7g_^&bTEmhb'
%CtR.NprkV<P,s?'2!E+-c4U]*9$l:tBg$L&5\i0`\?j9h%";"!@^G&0dJW?LN6/lk5pJ)tU,8ib)A"Wn3]RhjOR<[)/)c\B/2aYE
%H147!h0A]dE7/pf6&F)HE4!c8a;bie5j9h^Ii_>kaopu:aaGi\j8s@aE$*fdR(9<';ceL_9P)puG$ZkjPs38?;=Bo)*=dF%8Nl^e
%0Kqg2^PF346/*D8NI%BF@@o!4">+O$T``rHO<>6?g_I,9_<Y)==N(@=olpk^'lo@i/G0^IA!)=;C0:K]4/Zfus"!,-RK3Og4620_
%Q8?CSkH&)6A6+!]KEO@r33csh6t0k@pHsrXH;5WE5Sc0a?+5][n0AVQE[Cg[:`.^h,mo@M2%#U@TS]riN]ig+:')MMRW(`?$8H6<
%'YsT+:@#%h5e*;f=O7rBA04m_BYe/MKl7?<IaEY`Q]&AgPaO$MUuY;-W<u5.W69_hp4t@fJlQ:f8BHJqC#FK0(u/1ME3@N>fKAOO
%bIW@q292d%<'Z"Cckpk8O\F>t+UWa>X:$!_Lj)S(A0WXqd#KR#;q?0T_kH9EWL$+#DWU14$>"meJ"?JbO(uWFb4"ToYs'X&AE7Q,
%3cgMghhkM>+A]tZTHmr$?\eh8*denn$URCeP=P`4i#dNgOFj#?$p.4hV30<k86-@c<e5+63\0ZLGi-RLJ#&Vm.2@V'C.TjOp4M0i
%-'DIE]g1:%fAUd.]A@:a/L64Y#jMej1Ru"nEB!u31^#&g$,J!Z7[VX,V\(ZpJjUm1DoC3q]<aC0>.]YAILZAqAY^6<[,4Upf=e:W
%.ngr.3F%;$djV`T_.=Oir3dE.&X2M*UG>BKi#fS0%#E+%*`U.N?7)72A`,h)"$<GT6(Fim\u6%B>:,k-A]-6BSYIeeo8&@j`FPK]
%?_5/G`6KP5@fJ?&?*lOX@5<6GD$hL]2Ss">$BtFm[1ZUIOI.*Q^`s#u;5tMrC_i/n3:dgSVB`d\j9d8*.Fs3G;H=-;6trn3M-=qK
%I,HWH-1d@kA=rH\+ic`&O9/i==ij6,Z7>e3&QL8^*i6"jqp%g)P**SC>p<TIEgeMN3&BXn7oHCPda`=A=(1>`":)j6dD*Pl6q2S^
%D%\(-EJ0F&6e8:#Z?!WbEt05dP3KqJ#!,0,$_[b[))Z_Z&^iZ'?;q%@"1$<u:_DGJV)a<g1m7:G?;tHtc:Rc),*X7n@_"S!aDqmP
%/gc1D!?N)+M]3->>tt45#SW1Od4Yk<q?_Hu'!i!PikU8aPMZOYI3Wk\6p;C5/:E%,T)^3KM227+MFr3MW3"(JL.<^u/.h9o<U$.Z
%k<Ku^l4BK.(2;bR@W>r*a`;*g`i"*uBnNI++A!Oa-L.V(G"K!16?%hg'&qEEaEGkfi$;>9O/4kGL(8s9BT_WOr5+3+79<BL?E&;m
%iM$o:qX(eec<Wj]@eB(>&jgVEh1L>V&_PcC*2H5"A<ef/3!dKdTeu&o+=**UV?[@FPa:8:%RQSD+M0T=ZNrgI3=^Yg0rDb+%Lthb
%$5$P[#JoVZ>aFR)2&m+;MH]H\%N=<!hc3[0-s[Ro-s`D/boeo5W0Bn#+qpD4^+2N%SAlgp@2n8.kJShojh'L(AJ1Zg6c*jUGHaIZ
%VG&VjT]Dk5.5:/B6bqGUCW<&AO#"7m)tsg;9;Ncli&LuQl=lld4s+8u>)\CI"VU:%6B9n0AqrKZ4GV>nR!.Csm0QoFPYDMoPCZ@-
%.V.d8!8.[_eg]T>X4!@:XGJOh!,H5Q!:.^"*@a3kGVsj?F*P+XL0#VU9a\'6=a5)5U8tUCBgSOXMlt@\5uMfIbbD.8^PASb9cdR\
%P>CV7EuPJ0R]EBL+5rYq?hP4'<p4C#X9nUB7V5K!P;<b]^pU7-X<Uk<.9+U@5#kk<W-""E=i=+o'#BpUV4/Q\#cV>8ncf_qJqn$h
%>bM:T/l'4_^-l+Y^rQ\s]ec)R!5+[q&f)B,!O!n:/6oO>s/JdcTu<gWpp:)YkbRa7!MWOE"n59S!^*93[1LUbQdLmcHjECm%C-=E
%`[m:V2D>cDIfbg")m22)0VC>#cK`ZkZPBuE$dC]BBZVm#5S==t5p]DE"lt?",-./QAu"6iYk^X(iQThOH,E(Nol\2YNA05X-fG)e
%fVgXa=LPmb,pX=)9=P(7b_S5g6=`?JdAP2_^k<=8@usVcU6kp+2AtKI)Ru;s@Vhm/bA\nE'S;QH+PCb#4UE_c1.7hM!"`a1!ii)]
%>;fTS;UT<_EepgYOa7?_TTG>&F3;:KRKrpBcm=/Hi=^@1M#l=&eS%)9bbECd!Qml:;M:OSKJMCsjga8U$\[bdL9m!D&$G`,fEbUm
%<P5_\ahNc'SRW(#9?&</"#JVOJNBPN!PUCBMb9PtlF0,(a/c1n+!JZ:Er<>FGi:HFIU\YrV*>;"K`Yo^G,`UllCiH17RBOuZ);-6
%R@+8904LPn66T7G<&[j!AMft+T-AppblhMWj>[T4nT*3I$nR)\PAPFl<_?&XL>.4f+e^5L;bE4GMX'#R=FuUH[PY<i0\(5?n<_1G
%KO]s.H.opt.=3\o5hm)PRVM)3&cm!7I?P`_l!-r*H[/T"AV>#O:L0<2>Y6\!9b7L3AE2U0agmp!C:qpLGKB?I,W+LUOI8>-#Tb0j
%,/S&W7L8FRJ^mf>&0]6[=rK]D3rk<.('PY.>%H\b7_#0[!XuXSPXmfFPk-eoSWk+$jFGI9+=;U@;MdE^6)PpP(=FMA[Bsq!Tk5q6
%-V69sW(b"g+^(??Tp<MZTd\CV&0X\!F/7_dRNBj<!Y6LJ?UTq9J=6KKa:m[78MZ<&luRn#IYp#`=`^f;hPO8J')MXd$5U73%*g8N
%.T!YdY$dQRiHU!,T;ps]b.>PHVC:Yf_Q#(3I7DLZ:Rif&BN&WI^nqC$4b;O87)97Q@lqe,8XfCq,jV[:e:rZl!3/8:b0hmbV*=d3
%cl&]l8CYdJd$MVZ#&^U_%fb$0eU"X9CXSU2O:khkQCUX=U/$5KVd5j:%2I%t+:ns_.""^EDt;!@kd+IO85l=IShHJ4rW@/M.4()F
%d"\4K.HhVuIP04U7^1HgUJU2ZUo^Y[CSs1AO4iOsD5[\nAEAuLg<RIt_l3mEU(O9Q8d,\dIufE8Le.J^iNJ7L"@UQZUdAT1<`EU\
%O"4kJB2"3T@klY6%#hB'U=ndja9M13$$RLEPbV$JI2"sp&r!,&S1'NCA"up/XLjd4<^=Z*GgIU<#SSqbeYOS>hC=2s+qVn<`%;5u
%\9+Ye!_Qo8OqY^.b\LBn[/r$pA4hK(S3lia0WXou0oh9m716C6'f6\(^oK**[0jn)4BJs7C*#@!?[)m+5B,$QPbNou?18,%9uFgD
%/.nP5,0W6G:_r.,OLc63(;giDj:nCcU+)dZ,gB%E%dW5n5)J2?SqHA+Q4+$R67OP/YJDQhP.r+Zp^0^AAYL^oR3fDNN%.]"Pa@k4
%R@@`dU9u1ofr(@MOoof+U/T3RYS`_$8N#=%3<57p56TI+!*LhO;'OHZU;1Z&>X/@E[^3Ms/T>Y85iaa7k+QUr8%ii>eKpC"+C[A7
%T;$4ganQD]IM+ObbuA)/5aCOjOW;5S&R5R[[?HKS8=8=/?MN,k6=@G..6rQ]Y@D%C*#B:r.+K2#Pu%\eDd)&a4qsQn=4)saU/N9t
%otN6DTf``=R^59d)O[A%`e[!uOrUut<5h7K,TH0e]B73@J0bVED6b3$@L;YG!IC.Ji[.Or*i\?C_J'%uP-r)]SBX[&_hs41kU_U)
%+=f]Db%![br,%lQr0S)s;j&n/hbG"CGhC*rrIb79a[q"Pq_Qd@;3K$:>R@'l(.clHD<>^9ZioZ(6-.\/+UM35hZqM5R,h'O\:;-I
%?F5JT)<L581s-tY_+<rU6<q9W_>[l&ZU-*]$2YYXJ-]dEcAFalFAh772P8*m&f%<cJZ!$.Kb1o=S-@ieNEgk0KP3\EqEi7,f`r37
%,/T@YP:mJgQG?8HaAd3a$!%+t!JotJORdJ:-<[04S9hCWb0n(A.*[?#/jNQmO;7A);X!0^%d#d%Kd=t!!nb9=TbQ#MC0JTjN_54j
%OOLBu:.Unsj[>f\FZ+ra6"=Rf@lT\T5S#Et6GH4b,6t6^72AW#&"quZ7&!O.m)l7:WJ!i2FK)"-c,>!`I!lVr'^2\5?JqbgBt5.A
%L[(9M7Ns%:4cE5)L9Q]sU,</#:c9L2+*]aZ!";EIEdml&a^S?#RPePa7[W0O=jKqhap?'/W;IVJ^;,0Zr#up!':1>]K$acK#`.mR
%Y#?W'QTVJpr`S%k87E_K3`*Vb,,p.>0k\@^LuprLEQ-%`>`%cMBD&,9n4lq2r00/PGYgknMK3GG4pLk>%TX&MVbF,urKFDnKe9I)
%KqU9E#Vs74593sY3Ug:</ba]S9#(^u?D\XZSh?uiH;>*`[0e@85gTrk$n,pBA/:qKM%,:]@2;]P"YpA@nGq+K9V+*CZ12-F>"gB0
%YpG?:A5!:o]FlY_6U?8*Qbj;tGnb<T$6CtL\AQC,Id69`e%_KJPU>fJC449:&kYX'@tZpm[S0"SL(N]9TV)TKH,ta&]\KG`$/Z8G
%/34sM&;Q@H/E#t$HiaDBJ78P^0btr>Pf/lO*5W.S$WO$XMk2\oJ_P7f,ZYO*m4D"DE,;2hGRou_3f9F2(X=fh3AM70'*?Bg?BT!=
%rm#.(T/u:Bd;[auC8tO^Pu1]+&c28+kQ;,p*?1>.]^LnZ>_54k(?2X4bR-do'"d)<;@S9\#6g,Z7s]!6q;S\!6Af&]K.tO!!Ocm#
%5b4#tj*E!GLBF$$1B9HDn9.V60b8*PiH3R-j_bN4[H.6Zhd/#6i@r7$<.Br+F%;VW=.,<3=D9d+$(`bUEb6>:gCUO/&jdg5^PDKK
%Xg/"73Y%6J,'qQ1.22moppM)a5DmNX@4_B>%?*F=`.=a$)7s9s[W!\$E0$.Z'S8:&AE"2oNC7,!M^[X;KqC![`jrnC2<5<,O<-`B
%';lQH!*Hmb8!8E"$VDf2J/nH79,g^d;6AGc-`nlWPKPeYqA]2Ta2>8p/)[[))\csG.9hU#-->*^AtdR;EfS5ocsf7d&6j[gW.EaC
%g_,3O@4<B,;':H)r1A-<rJH8bD9O3IOB!'%"UP8m%BTr5=0cqXN[rMMe4YGs:OmI7Q/[K3$(nQ>k&khd-;Lk0pcjIK[YSH%.!bm%
%d;XdCp^9+B$N2IpH@ITs.1NMr5G;ruL`r]@N,L$X:\Fu>60)IJ%@<T=QT/Ue-Y_pg"QT@pY:SK2VGlsc7t_3*a-9=!\itS48]k,e
%@(6U95%S'>OW>tS4&S.`_37F(J.Wf^&,js/;\<J!&huqAGX1\)plckLK8f/9I=D/_C&e-3PfZEaE^lkq=-1R+"'hmT\l4qeWr4m<
%4CI`Y9N1k9H]k]U(a,7bJUb7<XgZU,=Yg_IH8r+*d`K,gWLaj5S)r\]?DDdfG%h>TZbXXpJ*V[H_]/<p^n9Hofh_E3]I;-#dO['o
%@7/@/(3UWYeb,KZoU7o([@QJEA3o]LDuRR3qKnRu@psDXnE0E%4+8'f5MV8\@tW>nhspUpQ[0+pa;N$$\RJaCniqE?H+]&Z4T1L?
%UqlRmZNq.SF9^XjEuTMLs,+ZS8?"EX4;<CO'[fDpB07mpp`L8k"[Q\B_WC%^Y\>86b6seQBf\qQ*N&F!h+FJG_[@&O3adADh1E&H
%"6<?MRY[nC#c!Nj#9m$(QT:ZZ=QX2Dm7A.hn4;!V))-hrKeXS#V0eX[(soDMl)G-U%+p9qe*?Xk:VD73_m2K*#?XV"<ZHSaGX"#E
%>VJ./A7qE6;"2])%s^9C-f]ak)YNlmq6<I[6jk^,A5Ej!W#(9T!?BT8iOhq_@UQK\>Tf.':UnSl+I2#).Zjh,"16-QB;gS\='\?\
%,!.gG5kpf]%oqh:j^@rg>MC#MLK%0"",Dh2*FO*^oYIecEINb^nOH[0hDt.%+7Vk9TF.^YKPmZ[i2C%c9Nm)Z&E:<4M9)GgZEb$)
%9u84a+e'KC-'_I"WYYrUc=#SiT(US8aMt8+n';,iqLR"#U"^5)4O4M)6Rl5L/^GpPG,Gg'/0]q)rY5q)4V=ikZo,]I,Acpd>fIf?
%A*YrH!.;#[0"@-2J3TiO]LY2=J.GH-(7LYd1I-Ks`PCGO:+CiTPp4M)"JV/EO@lgL.d1<Pc#eUDAuD]^$ctl>UkC-&(mpGoKl0rm
%\Y2@YLcL-2HMPL"@!D0e=8cnS%ddLie*./*N6okR5s(BM+]KO7pA1`97g6^F0e%[l-g5(Sp47NKh+N=a^.0&s(_6\Bg].mTJ-?$+
%#mp#0V0<OF/YMP;`7ccIRmeY2lPO:\:l(75$m"@L%;Z.QZ67P2:^o%VP6"W.2CTnuZ\Zr8(l3iNKd7B;EraO>>UY+n6t'^g_''7C
%:s4eXPF_o(FQL:^SR%r6ZYB%aH78)q\;Jkj&Mb7JUL/Y4IU'o\N/<D.(6!tbPh751j])A.)1s1F`*kV.X-eK.TWiQ%!2iInAAsq]
%_q'-A;SnTnfgOqaf)Rd'.FY%Cl9HgJa(>`N7%OKt5d/RZ]BV`R!MM(0!&7KLQ%3(RO<X1/S3ga?&of/8"kN%%cA?05?uQg&'glG"
%(\K`H)IQ9/U_`Ts)N!Qq.:&7Fd(i'hR9%!kJle]CRP(#iRN2ku4G^0+j9_8QVc^HL7d.OJdn6:_XG$lpp]_2Jc]hO(HS<!m8d^,<
%G\dUsiI.@-h(:pZfPs_+r5%SWD)CpVP%%STXb)1\G(IRD&[H",nD&`ZfN6RJF-;jQO^:<8M/B$u\j02&P<tsm-anb=-Ea(h[Sh"&
%b-6kee?<ial8?#%EdIqWGDIN+&5lP[9/,i:L[ujS:iI0],bmguBu2/_)nNAsARn\n_.Nl-fm"6sTVE=tf=nb2T;M?W_8E=hfd'6h
%%C0FaHu[XW^WHpXd@PDA'"QC<.=j%49Q00DAd^7IJjS4QM@`1W22\FBG'<J5G+cm3_U<dHo,@-"@r%Q6,ddp,dKK&ED9FV`3E)#"
%Pf?<`'=fJu4q=MZ$6q#0kRAS$>ZIfYAPj!ICcJ;b<2sJ$dmH/)*SG_!XsE<<BWW0Ze<!b+It:6/Xa2B]4cZn(,LSWi:kN2T/?SbV
%((9;&.fsAf23:P\)PZ_],cO'["DG[,#F,?f%RS,sV'!VUA.n;q.]F>Z7cfMF1O:`i_?q1fZ:%A!Z3eII_jNsTM3(U)4e`bq>^7VN
%$Yk=f2A6AC<>$6M(W)ct/7%Hl&/#6l)NuEX`->jFMTQ'e<:>no$5A&G0YnJW85MV7pS\0=;^7BW\8QGCo%/\!;7eg!]"dh$Sn9\g
%q5'AS:K$U2P"?m)@[I#UO&D]M,tQJQ!9&WBTVS?koJUd75mK`cg:NBO;?A>%:i9@uG(m0d#Wgf[0o':Gs);Z8^`5jo6B'3:l9]e$
%liC_ilL`SoHJ]&71b;[Bbt>ZAp['_9RJb'Qlf_"J=mErD_,m4?c2:fr`.J2$nCttgBAaJImRVk9;ICFF6Th*o4$YI8\H1/%\eQiG
%4V39tjSiXLO>bO+6M!rR#ajd[[65n#RnY)n=4A6-gJO&0[F7nfdPG,=0Ul(OVp<N`(-(Z;>c&,OkX:q?,#_c=.@kPEA)P]FGhoU1
%-Pn"Zqe(@'(4"Z=.]H.JJItN`<],Y`Qk:R5r&tip<#krG'hOmc7gGthaiG:0*H>X7T/J),QU<5OrN.D!]aI59$ltDtG1?]ZNn=MI
%oBQ%6ci!_3L-#pU7fU8LW$igKo+c6j,G^AafCMKGff0NFS+/I6*WeloP"mN\#)*b2"9nj_5J^W]#`O=t.9=(!D^\?tbf7Q94!pZ4
%j8Fh);Au)4"0McPYsP\].kB9h1a;A:UqMQC5C6'XY!_o3Y+SAH73pss`.D'@"0_8ZnoJ%@1qQrBH^m#W7QEK:6K3Ed9t[&]@Bm-h
%*;2oUPACF`Ope4A9BioBnoeS.["sd<?-YaOo^iWjqk-V`D)m6aX]T0'Ig;pG$T<]67ta>_P)4<Ob9?5`7V<R'mqmfG6H\/V3fop6
%]>/f#SZ_O_T3pHZRsc/E2S`o8k5J-bkE!7TUN2e8eg9ebm^H=iogT(XAr+"k-kD^cn)_mfrm/Ws_#(n<;g0R_TX%.b#n]o-Bb;/P
%BRmhkr1%uG!D``^hk@ES8Da:j#=o!9Fb$F`jFJVa"58o$!6YO*P9HY.7%%MJ*#MRLaEo9DTr61d3M_fN@ON6rD_mdgcultc6@),f
%!:tJYHKn2;DhZ*Cq*.9(LZaYC-B(".ks2aR8dC$/-K:nJfj%[j$\>pY8[5cg5a3j4+54@P"+mWHg%4]9n,mj]+O=Il1QYsTHb/K/
%H:I6$3tpq%Pth54l@qD0q*S]f?a)td0>.+b+@?3V3Y"o\0=sL1:>l=M&9mAP@kRu5\BQWs#70e\Ll7OBAPgSZ[:Ab.F$LN>ig@`/
%>9T<eq4=1hOIcKb^jKIZXu^Vg^VXE?j@@;\^Yt-EML[?.QL:=7GtK*<`-lkpF[1d/LdLU/!5njB+`iX&1.+i6b>qO*:Le2BC5_.4
%-jC#+.W'a8OgCR_'&)hU)4<_1^0^jQ#N`:63PmS*hB/:tNJpMc8S@!Ca=d&]&c=0Tj<@\b9L3DWbO\@Hp.Tpc>5+3hGhtO3INi[8
%jDBp>KZ;.IL_5'Z?`OH.[1:-0A6u9HPU->:2'F<XgQ=qo2+$FeUZE&9&.WPLpGBc7,De^qX"L2\`"'"5Z+R,bl=X0WlrO.:kWBtt
%,VPoX6cDJt69NQh4>*r2FV_OK/Fn'"CP6B6/0`K?T,SWh"8WB-,I="'1GQV])IYsSj0\`VZUSb%6=N/"i"I/0(_#ukY]Q-4;7hR=
%4KLN.G^T:5F<U"tab!5'L]Th\aR&Q[8Ie'IZ0m-&KXJ1?X,OJMc.L!e:jJt:%\S$Y/hinuVl.hiqc5];]<?[>)ZL2Q;=B0l8^%c)
%d\2Ik#Dg&/d&1=>mOS?\j$Lsc,QUaG#H8]T4jdTV.-0&+@0dq]$.e=KgJ"p;0_BJ;Jb4uT"_RAko[K:Th[5-%OrpF<s$gop1FE)g
%o:e@Q>B$rOK_&X`&@l8G13i]S('X;B(P3fPG"m!"d`!VN8D]Oh6pdXtF9g#5HmYeDW)[al%Wh(&./Vj_=pLA>WRFRShL3Qdp-=([
%'`SR7#k+!S+^(oNM4EfmL^-9A/:c$^ejCrFOJ2aF."oYGC7(?5a$OYfOsnhYO`1Lgid_TK-MAJ!btu`KgF-rLBoXt2=b&USj_u2/
%6NKj?i>Me`^%&-F195iId`jJ#@V-G]FQ>LfKPmUF#oI?8qNj/-H2NJu]3f?,HC),KYi,tT$HD%qo`k9V*!jb$7K-VemUm&`h%hIH
%O_#Y(LW&Y#V^%U`fltK#SQL$IUKh'%V\rfAS7T11%\tme(R.^qgJL0)^@_rIh*3#F&',gVbG`e6@?6McS)2*qB9\!n1ZM,-r1C;c
%q+QU5W%;9]-:Cd0ihs%OK;jhU;)NYq%!$UsPDZjMIoq?q!r1/^>%(qo(P[?F'r#\*f5^?n"b0C5eJh7nC)q^lj_kF.>lD-MKOIKN
%"FV#U?:O1@7Y^O7H_5MFSce=mL1h6+k`47f"r&LJ)GIF`7a7Oc,U\u9>U(,>_eigEJe)UoR=LMg4B\S_*_815*p`kMhkOX[[k!X@
%/MSb=,Nb*3<h(M&"1sc+0H*G]k[3@(c7;1f7H]qua5%$ur#4oXKKHE94!'MP'2ImX,boT##]:M;.?Qbm$fP!t,-Jl85m99%<J)3-
%]fiKnK7C,jp=+fW"*1*E*,(.DJNmJ=-`Gn^).]($fLhW/.gL6qDNJrRM3%L63#q4oMBQm_e2'ESs4>Q1L`p.\`8IZY`HkrJK'K*5
%j9h0'\0dt,0>T7DKdpSEn*U>tYT,(%.l=RPGq)tAJmX*X."8K:!J[46oRCHZ-=P&/8Bg.":XEB<QCUF*Ygint>%U/H)n6M@Q_Fp6
%,*=UZ+DaSG$^R&N$0YKR!slh-/4aPt%[&EK$e0k&TKYc?FM`+!B=I^qFdRP)`0O^qA2h*j^H>0c"U7`(TVNsXN*PUDL1[9l78PU.
%+r2M:X&.a]_6=^KP/+NDk\tC8K#t9]nk9t7el'9idBi;!'Y%>04s2@70S"k8,R:pdT5H)?n%;A]=]qnn*D=QNFA$=SL^J[C"AAr(
%Y^ce<PuN&f9!(*8U@G5RCd]^h>Y0\Re,;oZ1<F)]Q`8XB89-_`-I;UCPe.R]4hV@io)QtKTkKH#dcd*%'qp8?H0WqPlN,#c`="iE
%ZCg]U&=5mc8Wu[Y$9ukZ3TuM'Pa&es#T'k4RI7HR<<eL,)"2'5Jt=7P/BP0q\Z4+8hM%uYm&,4TO<gpKOrVqu"DTLf8ClTZjfVVq
%(Z6r5if%:m6H\?pW4:D'N4iBjH:QI]E=*6`iT:47.Kg,$k\_U\84ZML@8J+FqC^"OC.mPM&.JW3h@9Nc"`1L&FC:]3Z3^KT]A]D)
%jOVDmaoV.!6'XK1R*&jY>S'd$47B$KkS^E'b9tg(-D,>9\q\3j5EKP;j[b[R;ZP$8+k;C#T/_^S@`p&hAI_<3$1UZuQ`ndd%;^c@
%``si`VJo4r=ZeB$hD:]Ph*;F0RU5pW7FM:Ra1<&kM^Lp3!)&_,<"D\`QO)(irN9RNV=>*QC5>4<'Ib4]b`Dr7<P*B=or-b:Y@$c:
%OA=.,`KeCdr+:nCj#2dU_39ocakM_S^GZKFB!*=&<pBT$ads_Ho]J`FS[.NddM2oLOsmERoHJP!C3Kee8CO=@lWF*Qa8#eVgd&fU
%+M!5`ARiK[.(;V^$8*Un?Xu8a#g/mgYTnu<8`nSVH?uN*Dm*USLs^Vmh=k9NjsCiXGEJ:kC"^P/CKlFu`W_,#_M!TgDKgd.4\.FX
%X2t'$Mi<[iJF(iTWqg\1+s:Va3BYT/^]2^?Y4fqc5.]ICX$),2ksm0_M2N\C6DDHU3Y')[maT(q*Om)\9_*rfYnn`83D%oJX7nhA
%gi^Ah(@0@j+'nWuKp#Z)dKqgoA!GR,b8j1V!PA^'L/o1Y)mOM7b,LQ4M3@Tr3o%uoM?`%eboY^-?ZNK\#]P;iNc7&R9(BGB8gbgZ
%lYUQJTJ=:0m>RkAa,Qji:=CC;po0@k)1"JWO%6Jeaj)1b.K??CoNZqdL!`dQn,>M+]CK$()`PA"UHAK+HpB[j_0W8+/Z%SkCo'JL
%-"=Oi,3D7q6jqB\B"b<=6?V2'6X<_Od\2ZglKGA\,A@)bp=gu%T.%:\E"Wu0j]#D,erNJ#>K^+'+G`a;DC?*_Q4mu8hlR=02DD&c
%hrShOri.I#7MgPrnULPWmk`R"A62dXG9KhR#l0178CIuc&*K-:$Q!!aC+_B6%:.u4q]6jInrD42UUrV!])rDj5H#E3hdGi8#E+S@
%0VgG;KEO@L21pjJq5*dgVKP8DMra1lj84-Bme1!fQ.kHuO08L9MQuq84M-PC?m?$b>qd]LXVE+*9=jQ467UH$[`!Z:H4l&s:,-83
%cTaPI%DSn][*]%!?1?a2^0d[`1\<[ql^9t=-L&[&JbI?LZu;^t5.]sqB]"P'Og/h^#U*p1/W8o([K>^6q:ZbaD9%t!LPNM!=&mF%
%]&0:[rOW[4Mse+f#&`Tla&-VCr3CZ5;TOjcq<4C\GgHDL0HN'uG+ml;N\#EK_i`YI3sYdC\=V\p4+l0@R:L:NP6V$aZbp)9X/^"U
%?1$%ir\_j,+'#glm;JQck#k6C<[FYt6b"e.f,US9OPYU,H0M*b\Di=o"!HMFPpV0MhE0%B?`;3/m<nB?@=s\SDM/HgfO+u9^#*r"
%"6.QG<9$BT3RD(/8/OY.*\NQT3:fS"81*\ZR%n%XG(%\$4k0-6,CS>1qMq`Ii5?UG2J<r::i7q^W%b7d*6:99eKPm?XO0SbL!UEB
%SHt)DmX'8igH*cSNGe(G[LRC`#>DT@IN[GZVb*nTgXY]5=m^l.+\t0UCBS[3l0*V;+iF:Y8tA;'ksKY-_%^Lf1fi:?i$7j.9k4uf
%9(>HMKXXijWPe:F;%$Qm1N$f*l;5p#NfbF]W>1TenLiVgm&,4XT!gke@$r@;IO('+TR2'So_!k8`h-/E6+Q3dc#]!.h^%L#=KCMA
%6i<bSH"!\ERt<1#G@:iam&/,sPUSSW*uu](e?;*Jp_,FK@4B2/6_QSgS:1&abQhuuP7:+V+\QRJIO\+8a1GlGq58Ta"eJ5ma\`M$
%N@mio[bT!s(8MY7c:p;>\/(6.*q`*uAPl!j$E^6p^+O)%1@9sO2,mkCktRrN*@_19/QZmHM.9R0qn=DM0):m"gI@bdL'X$-daB8X
%&<MEq5+G7TM%+1rWOItcdoRU@Y!#(F7S'dn8@7S#V5%$_+K5FbRq!A!KYF+-5t*&M<If>R*OA)gOYb!Hc</(2C;PbSd<nW,>XKM>
%,5DdkO*OaCo1L&QbA4bJ[[g8flOb*4/(dZ4%Te5)kHGId67:'Tm!^@OToER.BWb;>:C\>[5bJZ*E!D1"P,)3#Yi:1BH+LBebGDm'
%VkAcJ8>AcldLo$?I'6HX:8F3b5T<0=4Fe8^gj8\,ILFW.7`n,k:k?#&Led=t="^1$KrF2eTJ7^RUq)m!,rQ]p'huh?`^^XZne33G
%d4l]k4s_s`W.:g8/6EKW`4FV'm04^a>)\`4k%us[ciWGF/J\l+n<DO%E#gdh,S[gV$"Jh'Y(V1ne;+VcA=FP/btZs?\)Titf^UG[
%[t*6`r9jp3NH!\!a)Q2S"kP$_\BLbap0=f"i&$gcbSoj`P+sMPIEa3A3C>Bl2U7@XN"'89m<l3E+ka:LKTrJW&gtVbcmiM:J@c'p
%KSZ/UJiKajH`j@.@'&C_Aer?/[0H%-SDW'l&U4:ds4/Z=a`N@JXaNhZWjl3ERRXLsrZ0sU&\e$/<q.>jS:OHj#5*IBdN*I+O)hum
%D)n*#_G`u/D(MhEWas+_q6iXX,X#''UI6!b$YuQnVI(@K+Msm!4j&4m70/P(fYC'LjSC7rj$Y:]=g'-)1))JWW4db^klTLkA5)!9
%9#dofkJ.s,P,c=UOSl'k[mUXbVLGXXIihC4&5@`[2-B8L8SZ%TKZY;03_PtdnP4t0*pp)mB#7GaIptu-V4`G$(P$,./j88g89k9%
%&C?oSi7;E>mebBK_o:?)kH*\h*I?GsXb<a;*1aT3%:9:0r:jjF&t;H@2\9a/!S<g(!qQX<NLHP)43AepU;=-=g(`C$@W%_:$5POR
%#J^Wp+9e@##S'6_B50fT=n7\WR<I>Y;?Drc-3hk:@;a""J-,pt->]8pXCpFD@G&1?Y,&li0mDl3,E+e&f`.j,iCKUn&O$FQKb$5`
%(XQf]DE$WRe2X=`Ca8!t_UXh=,9o)KD^f1`Il!Bm76i'HH,.s`C5HTQW9/\098%\Hi4:?UaZg>CBH__+C9@hZ"g81>,75;GO<>AQ
%aWQB?Y)]UWdU&5k,Ylj`=.1jRX/K1d[U9T%W]5hBg%6D\i$bSrV'KFRBaougK\6enA!LFgF"#c/1l)Ib*!r^>,[?Rb`*U\'VDR[O
%9M@.&Q\=NG[7to6r%8J7kH:V[pac?&0\crOr;mBd:t7QYOY)DkZ]9!\%4pflIa;R&?A`r=ISUQ6RJ8q^'8bVQ+li<elgfBPj7e?9
%cM0Pfo6Vsda-ba_3PT2_ISU0=nTum3q)t5=HVg+b^S`i9cOnIGjD3a0$(jLA#&7Dd&tMYkC^Efs6=GhG4mbkX&qY;X7`N*ZZ[50-
%!M6C.B+jn-1bbk^\rq;I6?"XZc[)6`>NjtP@;9IFE>8omU[.hBLlM=@gE=!:&*Cbr#Am-i#,8OWN5hi'%g]\\<@*/\E&9@+OFl\2
%YX6G7'PIjG,?.;YkQ\SNhki.tObbjq/abE`!HFcKUk/._A248&Zd[<4@*<-TK7KC`j?gUnZV!d<)dP2;V7.b@_;RmVb=p-7[DK4!
%NHblk;RB#p:g*M?&2Irr_?_D;4%:2R6>qUSa?JY0YWh:c1FeL4fiior`r@--Dpi,eEc(!b+/&WF6].g'YeCu]`&&Ml.t@U#+Vh)*
%_1tW\W9/]S?iTi/[eYdB7.Q(F7Zb_:V][G2np"[4DVK?@p0'Cgo3%%8PHlugH:XHg9p?on\N0iWE1TP9qodJVEK/?-S)$G%MQ2>Q
%p4Vh$\m8bpKcnb1.%6d+CX*u+C9s,:HiB3%=dQ0_pjXLLs61qH*nL#_&pS":@`3;U:B:/iC3trQ>**uF**D'RpOo)c6nj042W(@Q
%aL!b_IAf'>+?fiOR<CKJ?n67>mdt1G9'<<hY9lh%`larVJE'W-9EY0QbmQ?(ETX<Hi!5lbpTmXh)#::a"+qVNZ$.Lem.T5?Up8(E
%7#YXg)(akJElV\,UfJJ93>KpJ![9M[&E9#6MBj.c#rIh]ZI3-D+Cq99m_,<(W`.SMc*?mCbu+epNYU(NlmXo'WZ-n-,Z,;(nphVB
%Fj6%sM7[F,+qi!A<KfGGZ/<[KGC(.JIktr%*nq<0gES$69p=V]U(\1rdVX0--J-*Z[9JJE(>_,H`ZjcH6#B$"W<j=O7V9\rZoo[<
%/8laN^.pWbL%<FZ_%@mE!M5GP2cI1+em-<rWV+mD42\0jaS)dIRX)q!Ik/$rU&Qad-'KIC8e<qggU$?k2HXp?Rlu2S[@;U\$9PSR
%fVU^kqR3Q)Ji6t?#Fb6VDOIGpFL<k@eK;=bVPJbtRD1cAp7D,(]j@c.L'\?T/<tN-U^*?pp*#5`"`JrSFEE@Q?;7)Ghp@i><R,6B
%&n86dLH9cWQ?4k'crcLH4mha6b8l_WY-g]pSW1%ncF0$Hfp8:\B,BlS?cq=GX'it;nrHW4fi8?Yp2u.aDn3p=q/#cHS4%a?$[aZN
%B'@IPS8pU6p:1"R&5UQb>%B0qndA+7Ce:F/oES_f!DEn0[e2VfUYqV#R0<p>e>"0IU@Qg/)25KdOu0--dt_T&fOd0\jXf)L<7T?D
%]B:6HWnV][+t&r*5kMCN4W`?]T-P#Rb-=d<iqt3baX&mXhcSS<dAu3M9bLcOqmMJQcR,Xu`T)nH&lb9"'tjE8Bhp"t9(tj.&>[)6
%_n7O$=2k*_#NsIrQJ#<6/ihTdS%XTqp3$1sG5:4h)QP]M:O\\ZpG8WY0/])i:N_kjj&2\!4j@9M+%K`r+@TXX<$#Qr45p>q'OGA8
%AeSpG%p9pR8D+/KU04eMh7&BW()sKM(YfZ#UQ_7MNT1c_%o9X'n'%F[OlD\3s0QS$ao1/nKL!MPRX#4A3tA/edilUgB6hQG"LCr6
%k0Opm#IA)=>K+g/fc3)L;n,\BZoFAM5Xn>JZ`4.gB5.&kl>DC42mT:_T8OT,g#lDmBhY@4q\q/O5FqB7FT1dX,MV<8`N-)ggjcoM
%s7#!GdMtaEmAi([]TJZE*>Z^GE+580Scu]u<!!UQja=\HjTORB;OT@\jqm/ZI1]OWa>.aK2)[s)GB0Kk]?H6H*_'6M6MEc#[\Dh(
%l\akhq2'0\]coN^WHh0B%Ds\T,WpXj@$D9mA3!spegt%P]BVWqGc"2/->kPPd`J0i2S%AhLCS1V%k#O3B)ge>)!/-0E2BV@:A>#A
%8beh7nYI:*m@sVa'l9UET\5mi&:s)be+pmSO)1GF]>ijT@H%b1pWg>"YOgga!V9d_KU.^&*A/5OY\"VYiRlK(@PkBiQ%B^L^E;$h
%d3<$FXQ_+H!G7l.4"Ji!fE$Oh-A4$$$tG$'9nHM8gq=Q@2o_>?6uEVLOTjo^HA+C.Q$H;-pS-FX8Z"4M;l.`uQo<'YoM3!Ma?P:*
%%K\C4o@_o.g?I^Rl@S(&<Ko7o%Q]>T1&Dhb1g?9R[3sMd-E>Kp$e7:t^tN0#\_n%=\Rd#k8H9Y"6kVaF6s<Oo9fo[u`c3mp"tK&C
%H`AnS5\NMLn39'7Bte3q3iUjCggJmU(fBH!k@o.$[%JK*'OR&B0o=$g:+d9'i)>t\Fq7K!`bR,KJU@<:s67H"LBF].=QFDIl&6=6
%JA9<e@<3+`aCfY.RJ/_TRC?1S1Pob"=add!Ask)5@B1_eL%RZEKJ?sVZ'RJRems_ZN3g#K/nXe+@n0SHXACZne:V$FCL$`de-B"N
%D/`=b%t=?fki"<bCY#n1p:(;_r#"[!.8ph+"!$=9:'+E2R=(lN:habe?jH%\ft@E/[,3MrrY1eVo/)h\&ZF2lBog.>.2K9,RH2p7
%5TGWK2NsV@Wc<VBfU^,0g],%deRk+oas$rS`:kiU$V^G[rMr$)NJ)rY)[8eIYb,H74=e'-J=R=Ood\(@<>eH_,6Ka_2>UN-cu#:[
%mH)OJQhe;6,0F>e%g2e0<MY_N6OlEn'I*Z*fTMe,QPN!:JX?hpbi]?6+8NGUFQsS$LTG6__\8YMQ7)s\Es0Xb4='('-K=OUOR`_Q
%T[F&JLu@.9QKi,bCNbT:Gi#:k0!!^igVN8oYr!=pJ`uQ(__Y?4N"$+ThHgnZqQ9i)?r@)1eS6_RaEG=mS7k1SW=c2gYdl#3#f8B-
%k:W\-9$W26J,8EUs8/-)D(_H]alL3HR3$L,ApY`Pjr[drk=[g?^?knQ&j:.fkmC>F+r%5uo,PR8ca"m5kGggmdg:3#3%U>(?VSug
%8*q2HIPr4s?S-s#Vo8$-o`pH\(*QlZdWq4[oO5Fs+FR21Pa5@2J@O$EO&1>U!;undNi_]jNq0lNi9mN?\P2KCT'cq'/ZoEf%J*+I
%N01(H=al:R[KRgsq"T[aofMWrE#44Q,^S)u`p2Nja(Z&<CO<InASRYL+d!!KoQL%2C*.XH9dQ%KC,-_f9`/X;Y`DL0Q:#;Bpb.Q7
%^uDc$VjM2`V&n!Je#/Zf!2M&PgUpsr*G+R+00q<nkOFV&kI9pI_9]$d.rU]U12lj/dF!=-_!`X>o6!X*3h4HI%De?Vnm-jS#S"%N
%9<+0H(?\?uOkAB@D)^3X;:9QQhd#W_2=L6nd5E53Ta-Z2!O,,[Ude`n(/^#3l"C5*?KR!NZR@%Jh^tOIZ;1q:TppBIJ['jS3mf2'
%+/,#GkRcQ>,+gK`151ERKqTpDe3J!%<3$SpecVX5,HL7L2CG?"U@-N+hdFbCA5%Ef"%\o*:jC.f]:9<;S\]tq0@Ls&mZCKnR:k-l
%rR(>,/DQa&:I*_*n=#@\9fFIB^m"gOKq#Fi@^2q4LULX-<R?i4f&gePCQOCaI"Aa[^"%OCpdu3#((bmT9^uPKh]Z4s`NX1D!L%&X
%H.rr'mRR#",JGBkJdTJ[]J&d-36_L%m:oJ`[*_-c/EACcHu,fgReM"1U!98J6sShVp*hK+ALHk^Fo,XIa;?dV#&i=.-1Gn"p2.Di
%10QhpoeVC/ITU<mK!e>:RS`]'=N["8$NhqjnA\W>SEu'kh/C5e9Y>Bt)M<Zm[MP"ap8-rYc]VRFB'7)15rio:Z%![Ao?:RX<;W&t
%fg>S;?@hRZ-UD2_c5T[g^Oj1F]8)on7c1lHKrjb_Yr=>ee<J12DX)86ZW-<)Z(rph]kt@aI&8KA8e'#$$Zr?^P7oO!1gT1-g?CFA
%!d_;)"e6!h9WW!))>m--"+lrrWE+isqs^0sZe$=+5RkaReQLA!UPP+[F;d@@oY-%+lmMN87Te.O39VN#?8!A,2`/S[<s<lRIAms7
%7[/7Tc;^HhXl5;h$<!()"mRNShKX&q^V-&+r"YV?S(A(aW*L=Cd:TLsjq^/*Zd,K32a*1q:IXZ;8r'OGeP6?]EItO`4fbR&j=p*.
%.oKZp*FS<DR6$liO#5=B!u)a%3<a:.&"IdAj;Y:eo>j$sk>?t/WqP%:nRP""JdAh)#S'hCO(7b73($o\2X#SI(2>$MU+dh:U9R1f
%HB4XnE;)Hi>]T!Bn)X5XD&Kej,o9HS'?ENK9PlMV`!3.kMP`"C7)<gJ_u;YalP[%A+2@l1$J2C-K+%I(J^W]?#fT`a7(Sp[FEROS
%+pJa`7Cm1Cf8?867q2V`U^BR\=NjcZ0j\"1*5_>PmAk<lir7cO8TkTKBrO!.SAZ+nPmHbi%J2$7m^*3%TQ!:&.WQ;fMMHnK)+;J!
%<7h371]Y`#CK0pKR)(2&"59S/fd)11,U*@'%&=1DR5Fc)Qopn[NL$TCbOq7Wp>j.KMD*[+,e\P=$9klT^Lj*X#;0@n.!dj-hguO5
%\^4_#(Hc7^#R8!N+saAcja[%'UVG-iE7Z:_=!6D%[M6K_ok=d`eFL'?n@G44(:]-IoDSKgo=o/:d*8C8Mkj[gP1uJ:4MRH#SnN#4
%l6$@DHPJ5'GaYKOP'IGD&^bcV@oO-[S%hfGNdL$f6jTMTBoJM`cIU3KK]jJWjFjRCG3C:4H8P5k(^X/6U)E,";D$;E27so<0fpY)
%f`pgMYUq!X8Uj/Y=`bB;Ah2h\2S5<PjuN?!n8IhD,p7>1-dNS)h^"S%+HVBj+_NUR.8XBnb#V8P3u7EWXocuQ`6//;,&B01!=.:H
%<.X#7LMke*lF(i_UlA8k)!1sCFVZ>rP(gu3YL_Z['>[U4q-Z_G^Ss`JIX-fI=V\3UnfUIpfX5D3J-urp,`Aah_/3]_-F;"Iq)U`t
%1]i9LJ8_?\D;+.^>K?#t)fbrU%6`Zhp@(l`^2-S1]PY56cf0?]]eXFA8;M@G:trVa^EG+i7cM?HgJa,D9lA;^mMf3FBsG]A-k7K+
%g4[^GdU+QH9>G0G&7gS#;@au*#r:S&K;K9.fI;?1[!c_QH*H$qE)^kq+9e*H@j4c9%Qs=]b^%_d@NSe'(D1n=WU$<k`1Bkt8e<@2
%&qSchj'hC.@cEgLA8DB5!3ZoVD.pBFhdJ0YpFTGGLh!*\$/\S%e?X@oeRFd-:<Nd8',,fcX#,Sb&juE0!a&FG\orCj^i;82Y<#$m
%dQH]amD0"`[<ci^r"FO0H'OLo@S6$\g"TmLbWte"fh4rqPu>EX[g.bR0M)^"k.mHP8g-.k#LHGXY"(k*-#;*r_')!;o4oj49E;&r
%!K!s)mOFXF(7UM>-K4a+4\E@GR`eX,3P]OU*]BX.9%.)M;@d1rBcIn>6=h5YYSqK$[e,d^J\hNeklFTm(J[feGpAJHKj`/ST0_`-
%%#)E>qkM;Cf_9)e%rLC,ftGY0Q,$=UI2OF*/b/?gE3>/PHEqJNR/ot[NBXgd]@'sG)I#/hrI5pW57,H=rU3:(*?O6&ZuKEjQ!!ik
%p>uQ01>%-$d6L/%Ibk2DZ07;E;.W`tKOkGVbjO/m(2:I`8Tq$E3LTQ#[!b;QCo^jo$hgoA43.m$U7%*FKM_CP1>6?VG$VLKiDE-S
%gh[<3]a:GR7;gOa;t:dKV<QK_Vefk`2t?#1h=F#Lic8Y?026Y_"hN!Vb/<'Up?%p-)[TV5`lEm.<egNITq`KT6`%:Hg`aIM:K\t-
%k&=F9ciUA1q*6frZ>!Xq9F$[C/;gnJAQXI\'O\Q130(RSgb;<+XcsV2OTVZ2.9V8_!u`mK=+hC=#7sa6GTj!LecD*N$DIf:4+bca
%**;M!e.nZB!rq,?Kh;3>k2hgNEFZJOT*\bc.O+)D6h@_nTS<TF!jFmd6#e4o_W=a_5of[pWJD`90+djkGOja]hS/WTpK=r*`2%hX
%FP+%>[_3%_U=M)aeL>'k)!?r:e=U4oDH7&I6W<O`J&q4R9<^Dg:;N,_MT>'XK33o)2,^'pGj[OPjK'T>+q`6ue/GQGR>CasA%@Hl
%;^Ru'mR1e8@Ut%qAoHj*+tkDeb9gCM8RNpbl#qn73`@b-9Z1ZYjoe<K.7]4sOKNV!XltigiC"u\f]h8g_-O-=9,&mr<@W_'Q!PC%
%D8tR<Wf\#oYIWQ)oK`+QY\VIV])hg$kqHP$$%$af%%)LHC1eElPJU93RVEYl*Um"'XIYop?qkT(aS<WJ]DT02MDdmgX#55nW!p<s
%ZS0C=i<\Or3QQpJJ[tSr3DM+8KZC)tJf/EsZ:Y*in`'\ah'A?2>O3;8CSGGQ2k<<(\?_9lb&-/OWfnRaTqQY>g(r/u?_dP(Lr5#n
%Q[6"0Ve-tgWGbrBaL@$U0r3'T$N[HXIT;WCUHQH[4R(_XZ"eth<7`@Sf]qV>"\:Ndm,fiX/qK7N>8kT9q]i3RO7`.BkIf+H?6p6N
%E8qEIpb"ID[5XLLK#OE?e#"\Rk^hk<[teHnlQ2N_W^'ZFWb!snNI_`W4ZFaBRi_-/(fG*D[n9i[b6=*h<8"SVD5?BH)jS9>!sK%"
%J-;MlM&^r*fWS'!NX[T06XY^@b#'bL#*O"8%2]3[VJm$q,#"q^al)!Yf'Ln\"sr/!Y8XDJ&Je#sBS=':om-bqYS\SbhGBL%bmEAq
%K"u^FV8Q!X6c*oF1>-e$]!EfX<UjnbU^BG<!)7D,Rj2^4d,U)>oCVUlo4P_Z'%UhL(*(o`g[U)UF!AkjPjf<V7V'e]5u;'e'W8rW
%C=[J67f/Rb87-0VJnQ?LSuPk#D;FnXh6JF?,B5>$?%eaVdf=WnaI/]u>K^';+34b/'[53?cASesWl)7h)'BZc8_Znm\Sm=Gq*.jP
%,,//=i?Nu:*(B!tJ>Z>XI;-Fmf&JWbcB%YncKlsk2s/3d8R:/dj\?q-Miq+L/LMHbB21D4lrQ)#R%Y'%!\"983DkLtG$87Z3@HaO
%17Hm/!t7gYWk@2CX]*!eGduDn$TG;.Q!@l=p@-lKlgPt-os7g[pg205lti.c.10;<JUZQ+B+d9!Gj:uJfr&Gh2CR9U?84APppRD?
%P9S3^AusGgcm]9h0+.DdfQh?]*dPgFBKaO)T#5bf&t'DF,QLaVXcA3LY_plg=9@!<(Is[4<jWc7&fAjlY@H*D1Vj#3i+Xh+G5K.(
%pR.JNba4JE4cIWoD#UE-_&Ns:A+bTC]c-+1d'^`"NO0p$Y7Tm0OAMaJ$&r$!&h:nDjCO,kjp#M[8EPS5R0K6T,/c,H6PP-FP))0/
%:::u[!SYnV!HU49VNY#u>SWNh7/!"SP+A'Cj(C8A!Y<Y,"::4Ah!Cup$*O)5DRV:CGFp%i`gl.!L^lfEc,<#R0h5LN:$*3gLG?7D
%oqrK)l]Dku>3?#d.c5R&"qZ-8@2FhZT`4X8JX/TjAgJFi*_Si1JFOeW$>T#Zb#F2;nEl3-]>jIb4GS\d3GcjM:b5n*;lM"Qggq**
%T$Kn[LRLZ).E;K-[3Q1ZCJiKQ`J*mP_?<8NZ"t-21hk.G+@?Z>7`<E*:]a3I%^oNI;Xeho1*.Do>$FQj'Er0\k_R!8s")4oV@H<P
%?4/;)9=ckN9Vj$"r0d!>jF''p(/6??(DGRmVqS:.Tm:$s%hnQ\O.TOA,%%-e+>8dEjhO9)Ul#P,aRgbCLt#>F!7`un8efsL1<*H\
%+;;<tBhca0PU&n%'SQOD9*KFEQIOF94SHq_'p-2)T(")];e^`sVo^bL@T3E!BcNMXWp$2EC85tKH:i:5V+o8C8BOm8pgT,i0?nj9
%cZ>r)j23&](?lh@WD[5c0M1D9IL@JN=6[^0-"-nXgD)3E/D<ZEeXo?2!CdtAhA.#$#HGriGd0@ET\4uAN2EQml&!VjO+e5[$RQ?e
%fGsJiPGHu,,;;qtEC`nuW^<0%8"KO/jdKs@e^/"rNn>m8mpi!C\Agr+d7&?5NGg-EP:4e2j9;+d>a6@[7^OmI*)cj5#-7p7Xd15i
%aCBOs&0XYOWo*<j=:A3kcSQR:BiT(d;M*F*T%-X\Bq<E@jr%5fHU_m`#`mjc.8Kq<)G(uZ0,U1g.G5NjWo.1ieaWcf!M*4e`kr')
%637_%Zd<3$0uJFEe2=+R5MUbbnDUT:LBVuGctZ8gKI-iSH&-CB`0gg9MlkCWDWL^NQ[cOB+t>bI)Cd;@hL>Z3*BmG"CUkQ42Bee5
%6np+,8Bi9_3/*#?b[CE3U*Gm0(b.4dgq@Zh?*6c6at2u>RN.(@4fS"eOJFmoZ8+HJXtO?V>*CJrg*C&n=TJbd30aUOnlee_!'IX+
%rYGgHq@7nb4QX<=IuPo.@h&><2TO<_O_`f8XDFs=F'@Os6F5-)IVk9k:jcd_kRU1+&$KG1SFPNQ!(mi:8GS,l-1GL/:;,.3gM'4q
%PMHUW-M_(9bPCR[1[\HKf9k#KQGC*b!P#ijnQI4G%+Dt"ET^juHY>0<hf(u2&aW=$oDB%.1?[0V;>S"Rl&>MRiG2+@*T-?N^m4_1
%Op)*u6=8tToR]WHU^#Q1g[Yu"SJBI-6qdnnCgjE`WW[0n:bm`>pY?4Tgp\'%1"1+F1kufj7q_8U$T/g-!33E460B>\C*fHVT3u9R
%1>CrX`G.FF.ir3,!mS/<dFSlVSp)iYEgIX\=.@i%beRWkhUi6m-On$B3_sDRc96c$0$KM.MNli$P%?s)VrkTRHqgNYnlAP(F6Sdu
%QVP)0q-IQ?i`Nq8o)0?QP&O%/df[R::Tg@Ml^gOd+!HoJc=9=:%5K&G_RWTG!MV1*+'N;*C#6OFc@*n9)NuqsnirH?HTL]7Mj,HH
%+P2%[8V%JAYV6dGVhLWH'5]GFQp%Z"![*9U:gs]$7XTStOL6YtW%eEMW).YO0V)+?::3,T)d=2tU#_39h#@$Q0.sWL?<gtAll`;m
%/B0b3$st/$(o94s=J=.(;>XrQSdmB:&;.RIJ;'?]@*W!2RmSegH3R!7%>gA?pVnhgZGT4<D.`8k&r2To+#OH#/5eo3PQ'*i&2Tk(
%]en)20hts#,Ql;P:^XJ=R,rT]2PW\R"'PE`dSb(i/^ue#,>\[Z:FPd<%>05I:K'Ed^b4'S&N!Z-0-@6EqOmWLm'I3GjQ?,Fb$f<8
%`$+#=HTfF"8W6V+fG[ho_s@Y'\g$hmfiU1J0>t->:%8;j($I9hN.?58)XmOpH`uE_H9T5Jb$*[%q<.XIIY9*K1WCmC*TOLeJ;Aop
%Hf$*a]qikkdNiB-"X"q3HYb-)^\O,4I%AMICIGT(Ys$q$K@SiV9WRUnP?mRl=7BjGL,k&ECN5Mjooq5Sg-Wu\kmVA_U#^o&Cj%Os
%j9%)J40c5$]_R!?qr19iNDS"RL>aq81;ge$pN,Spf0%kA8N-\:jsXR&mA.CF%Fa9l*[lN*[p<"U8lBQm&620N=iiJ`P@-*>+@1;B
%0;q<a,4#sRij.f>XUkHq,MF_1:kCCC#A<\d8#^gf5E.p(<n!!".nVffmrS&;Mf-`sHWOnETT#S4A7rZfR,ZuCqmg\E'p"\FdNlE:
%aN'F,6arh=[*4iPWBN$,)LMToX80sV)3+G;_,3VRBk(*-&M5g(Qo'P#^bUSFNelh;_($'@3b<C,isH6,fpRO@_IG]c6;>>Be7_`Y
%1M_UI0EG$HIN3sXdi$fE"Ms_p-)q'G;f/ec-b/p8IP/-UjjQ)Fm-MlGT&5Uc5%g0(CG7M\T!ti(`QX8eAOK0F9sj%f*!EEB&OpE'
%`8mK*2.F.<KM6Z)[U\?))Jtud'7_58G+q(JmII.2+Y+eN3skVW@A.I@=0rq=pPDojI.k3%ofabuq!62d%/2sBcaeb5H+^7Gs#S\.
%*CBDJRI]<go@dT]Y?7N98I\:2>bb;NQ&Y'a*6q-&mg"THc>0`Pk'<G![%2tp@,ILA[-58)qkq*jBSo#\"<C-UQq9g:"JXU(rBpfB
%=p)UUb!*`=YXt*UY[`O<!@!aO:spC*b)6SoHFhW:q$P;Lm:cms)!UmQDL*fq3RJ*!VR*Vq[d%_*EUYhdRR!^?fF_*(g\t`1<gQp_
%\MQ[c:n<bFPXiR@eS&]AK$Jo"\G,Ep<n*uRQ%p8Mm$l1c$Zm2;Xsgj?X=Ml\ZITG-R9iho6*8OX&pS\!3oKDfEf,49n(6oBbSH0[
%Zmk%G]oKr=gId"LNN^JGS?6sk;3YC8J$-0%9i+LElm!YcJadB7HBc4rD2M8',k&;.#k($HSCcn6O#GCiB4DP`MNUE8k:t'f<Tc//
%e_Zs)C\0Zrk:4nkZHuUCK=rFZhuaj77*@3[[eI=]`Kl81ML:4QI_&Clk7"Y\!J$uE0YtTX^X?s5fT'+S)6t%5VRh02#/b8.$.I*Q
%,S90QgZu*lAoDCndl_HDPK)nO+.h/T:*H7H].OhLQZ81gN?=5,^15k&K"jKOqoj"QfWY./YT)RrjR3J+4J1-[#PqH4=Bcu\r*f'6
%G;8U6_:c-]?@Aa=HpjP!M!TIc@kWGqX7irti5?Do-65*AD<sQi]E;kTpqc?V;TcCud+l</iYU0c;-LXeFkGCi:3&tN+@Rka`)5?]
%n-n29Th"b[NK2.s^[]%Fc/"Q8kf*Jn52<?p_jIN9ZNc)BM[I7If0BS2NAY=26t7L(D9#BDSN+JE*llXZ[/?jZpqeBGWh'jC<][/P
%c#n:;Cbiuk_]%a[ooqdOc\1j;_j,',/7a/.WA$-mnOe@f$^O]9#7fg#_2d12OS*jF@M^%U(UJr]TAe(n)o#hmA)jt1_"ClJQ$[5Y
%Yt;1ET\#Xo+UA(:23!Ja)C'+WJIV-+q2W]>q+bT(QkHFm/j^U`,aY):",Mjo&g$\i/Zp_@)r[i=pTD*cUq%C7UG5YeF#=Ld;/[L_
%)(mIW+^K8n@RQ7Wn4\,i(GjkDGe[\qH^..6?/fqVr"UFC;H!PZ_ll<(nTWmblpAGV]C4!RRZT0R^8:0Wi@b./C$+Y%kC7ff$1f^^
%?[D5-Ah7hL1Z`a4.nP*dK":*EQ9#!X1B^/3$&o)(8(YqAKU_mT77e@><t.P,LtMnN0SF)9m<DN2N\45K\hCTen[[XE&A_Bm$W*uD
%+@k,B7eYj4KXC:#ZTI:t<(SWr0K]k#,,,Wl.t_eC`$T?rNRg3.0*"C0I)n50l"VK\VB])&,U";<c%pL>\qf^49:W^K,b#f][p"#F
%gRXmF6@O:E)3q#"P@#rdN8/k7Ar]W<30M+2dWa,A?bk9(@8<+n+e*[]K/JhBo%q/C]aY$V:2Xe@FQ()*FkTm'5K\OX%eA1.D'L0Q
%Bg5@sD<jpTC^cZS`e$f,B.O>8j#?<34;Y2L7loMXjAjdtI^/pZrqGZuarad^[kHQc1!E-:JEChV&]D^)W=8\e)@fWo\T9e5A\40*
%d6!T?Tu#Xq]]W;NIt#7_bPu=XEQ>(D<rLbhm(^'fP+%Za3/s<.%^05)dOuXuF#=NN\Qbbb#d[O?l"MpXdV;gmS=H),nsm=XI_&!b
%rilI[(#pW-*7Y6?>fe(sNtBD<P^,W9caXQa8-"uk^cW.i_5]fuE@H)r5NBI2p_r,U`u"Xa!,8@$m'?gTd6j,jN^M2=J\FQi!cFV0
%YPW/^I7/*WS#8Hl0/ff#O=p"DES*X@A/D^d9$:'&6SV_T$dmaFCUS:0B+#6F[;E.3.U,u"(jpGaI4OAn&_r.oG?BX0hqosrla_>\
%2@f2k'"DJNqCO`f?bc(s-.X^^7XZk'eI>KTNMl!q"4W$^[R^,'>tshZ1A_j[<MjSm21;RjGNl-G_itcP%/Frs%:`BKM\%HQ7E7[t
%%TbrK+H_t\49X#%OGIB6FDQ2\7R;e-=Y(bWJEAm]PqkE^9Q1u#jbF6DnC$.Z>P_EjXuVgIZ1Qq&l/S,BhKOdLS7,ht+Q[^f-*<Fs
%_$p^6XCc6"r3Akr,bmDu0CjK?a;YM,*1d%f_&Oo;JhAMB`igm@ot'W'0AOdSKqGP'=`Z.lA)Y2G_Z.lMWrhLlJGOK7*odK%BuKeK
%WIr'>IXHA==I#?F\//'If\q80Bd:_M$fq[Y9[5gb;SkLjFE[-R!f[lCb\[KE37'8XB9`lXA%bP%]OgBUFs>)`nE<BHMj"9_&nJr#
%#5nspfPBd_U`1m^9fK,;"KbT]7+FhH@9kIW&n6b-2?A@2GmW#tBcI.<GVQm5,"@ke3g+F%ZJ6=(L[;6gE(mOe`RkEN$,&NsKo\f4
%F;?WVkUTD3:_D4q7P[EX[5Ol^:DqS9iD;sn_ML=0#U#\'Fs=P'L0)W\Eac-PecfMqTW+UKa#p1f0ubhXHb;/IVQKB@VT52Io+ao?
%['JM*F8-/cR?uCW\"KlY=*H3oG?n%\eHIN/G!$O^S3]-JJ4V'P/EECU(nYR(C,`<6>o+-YVtGlkp,)\[&cF-Q0M;t71""@W7\DjK
%*#2t`IUKK!>!K%qo8-:r3m;32PptsT[]_S2Z!Bp+_R6K!&[6:n'VnYL^6O;&\=DKk-$>38Z=?J>l]QicUNf#=/1Ufr[sS@%*@-:"
%g5:k1"e4E!<`[R4,C.5AO<%+;MhmVLef[@i!S0oq-f/$kP"7gj)=[psl2n2P:(IB0_?&l8J=Q?,"(+d!&<\Bo0`i@fpC<ia*6Es%
%"B1"#)B.ug@mCh%Ht)tRdPWACNg97N.r!Bud'P]X9>6XrH!>#42?-;Yd=mUH[+am]=kVsZ>Rc-[o,QMZciR'#Sb<<ljjWMbm"K=`
%<';EF=E[+jL>OZ#0sP:YQKmrSQR_A[d?_,-IL?Tqf`cs/%8T$HdLFA1%9HPOP=KM\8Ss!E;r"dZau(MgN^`WDM^iB7S#8A'KXnIg
%Cp9u+?&I[\8\*8Xi]W?Nnn%"(7b)o4HKQ.,MqG[RZ`+Nl,KRE[5H.[=O@0fCE;"Dk4n"9!ncCB':)E,5"=o!DG[jZk88B]UN=LNS
%L0LS^Y:kV&=ZdQ6)F!H*"SXLI,:dabWP)GkXgc_Bi^+="7isS.b2iXbg9rtSKcnE"i_o0uV%6Y7-T4erpZ<\5j_aaB[U[5p.tG,A
%)1]A"br<"ndG7]JCK(890/^>/-[dXY-jle;4?D6I#"t^^G\Tk[:/rTWXJhVW2Tk/43-7KbMeVQ_84PSt=@dcT;E[T?+=A)Ng8;nf
%l%+Rt@N_A#V([J'M(YadYu0Z\A>"X*cF93Ck&p7G[$*qa)6:J(<e4p])53C&YG^V^&BR!r^aqcBheGc9?GVq8"(J9l9o4'`[bM,!
%Nm5VEp*%#HP`s28+Y!0UCjQ!0dufMIf$iLK'FBnZTVNgX\8=pg1C4/o_PqcD%1ep45+hF$1_%[i'KJc3YjX8(be:;VV[%&g"&sHk
%!;$mVe!f"ER?VdqI+k8.TCb-6Vqq^CTTWc^7oBsDA\!TC5EtGc6PQBXmo+46CDg<Acf_`T2'(q;@l<XJ8$EY(<GFj0HK7IE_I.S<
%BM%HB6GKkZ,9Y&R;b)F70Q.nmpoiD:<C_p1#YbTj-KX6bb&YH<&_.?H4+.j,WX(bGqXp<@&-.Tsioh%O0#F`SS4>6J13Di]7/&n`
%Uo.?/.au^CM3oo-\8+gh,9(X(WP-sjaRV%Jk[IK/rTHh,3P*\<oV/c!gJSYU^CJ(iE-4'C,Lo<HqSEp8lE7DY$+C=OTq?%T_MODH
%rIV@9h&M%l3$p.*gKn!n@ap=?-k0Iccpb!t>1X[IPc4Bp">H8SR6iu4J8=asIf!0qOc28#eG``GBf!!7,e)AP'qr6i>bd8ESm;]Z
%.A`QU&tp,aWZ$FNmab=o,?'e8Y\G3:/EXqB#r@Z4Wj@BPYdcq9S&*4`L=-G59G3h![CAhJ$1dWMjGH'YSB'?ZZ?)&C.$dn:9Oc]E
%Nj\)_e<:d<>>dspi`K+UQIIG,M<a7*oRi[t2<7/4&%?r/B&kN7h)F@r(@,M`d[gp!2t*u.)4nS+A%:S<KJ$<GG"@V]*+p$q6D]CM
%`"X<'llTTrDO35l`\@$MAKQ[%>n""4?=0q(aWk/cYs>&6(4,G2)CFQL8#)(GLEo_T*ejqT@C[Ug70MMeKEVjYbj=g9p\$&ReDtIQ
%AtZ";7[:Ib(6bYVUXi"[$Aq&7CcM*>e"I7JD\mVB]>mILCQ,=Qf/cUD@3XPu7-b:c2h:6/#78@H*IAKT'BERX!o06f;m8-J1t^Me
%4pC\R"CBC6XH(c)BR)9kh?S@PR9f5J]>jcaiBA6iiVhO:Tj2AU5*V.uf>M@IQF]K/:m:_o#'-D0DXB(DEOTtPdZ^=)]WPTW>,.<Q
%-Vq8uZ7di;DeWQgT&Nl+a3oF/D84"f')=_C0juM0A__5rMWg,c$TO?4S;T+<ObdQOlZ(8P&#/6,pYV;)?$-I<66"S59,H<kWim#Q
%ENJG8<PR";NVf73Pe17KCINf(^le&Zd>[4uVnSu.7%!FH0c5FL92r;_>JPO+P;LGGWpbr2:!H%!qurL`<S!(u!Dcu>\7;cOQJe'>
%`8I)p"d2TqQ>J@5UD\\p(t@^a>MP0bW\$-W!m3\$*QI\&hHo"05%AVuaho>VE0uf4b6ruZ#UX^>[4)25H:Wj+bH-XKXSp5?M"X(c
%VIg67=K!<aG\9NGB96kL+N`XIs.2dm<g43&#bK7@M4oFI:q*F*R6NFR9P^e37p!T]2(EhaOgul]*FjhtGZUQfRo$Yp<>Ro[E%]h(
%am<Kl%$;F4K&N[A*Jbt(qm[LW"VhhV.l;<@=D5!Q5L%9Kk@p[J=C!_cl0oh/a6oC6g"W:EQt&4Z4(hh\ot%59V,:&@=s:M]Q&ESp
%,]2aJdfd+r;m[-23!qCNJ]#QM+aaBOpt_Q`m)qNGTR8R*WlG61E,KC',PBVPIquMH]ujXC[U3M_p96UHSoJ]MP`fq.*Jqal]+_kL
%bmXk1$LLK1N'YfoqT\64qE;,TC8m!S"Z,(1h@YfY?n<ecofH7S8Ef+DRRF.tq>@8i^@c88/0\"m9($2UJ+;L\s%*#l$U<Y*n1(/L
%(1GR;]l2&5pQX^I1?IsTfI#A/l`Nh:s.=^<k4dcQKT"@I_Yi1NH[3=in,028rarn/@dZ[G1huHHm`mK^kATL0roM`B5OY&@+1u6l
%^V8EX^]/E1Y.=Q&k<J?nr73%KaD<BD@AE7[p&3ckg8_o9/+``4kMJJtD8,@WrqfJ5IcZRfBqM0rkceu8iqj__T0N88:Oi?<k>-H&
%rV3mPaa*pZ\%h9YfB7dh2ipQY,Iac<+"]oJLk8l(M@9qT_K#EF,QJBEcTq2*@r8%nBp29A@uXZK]q&H&7i)5Z`3r?$C'&HI*c4$O
%n@g=1)Jb^1'QHMQ7hfr2&P!OT6kS>#Cl^"(La%j-ieSdb<s5'/=sqZ3e(jj`=#WQE_)'+u'Mq4"OCjeV?&%fLe@n'X3%2)RE0:9R
%ig4/.2+Wi=[Ms<DJqjaP34&qu_Pqg5<K?a:S[<pO,l?6c9CE6IXq=o]KH!FkEJ,9$\8d0@8%A*6bk;<$Nc="a2i_k;2<^qE2K-0E
%7u^7%6lH>[1tT2T4aX/:7*sUbSB>n%j,ILK6Rt(qTk\AGTdMRWal#.T\6r1?>;-\b%46<YII-d;pVdftLp'#%M'JTOie\nO39#c>
%T(lo0Hc-Rf4E8:Q7m-=1o#7c'cido#/H/$@!R<S\?U3T"VrEKZBcs_V+;7;A=IfL6:!SK6@>a02iOPb8W8$c<m,YN@8tceBccN0?
%.8I-'6UE:Xhek>(WppJ&9_2#ZCZi.ir0AqrU`54L4)MQ'-bD&c/6%PUG#G#BYQW&j9`(S9A]-9-@&*q0>SE:nf):JLgX+Bb<Tddh
%1m]mt.PkA\'no?p'5tuam:n+fCGF3]N0ASq*d+;uJi='Sa$k!1;WZc)#&!--0kSg9JRZrCYgGt\+@Ms2i[/D0j!NlB,$)0#R87hT
%oi"1:BT4:KjDMZ97C&$oS9jc%1gqb3B+-q1Q`p2XV>%\Snf-35l?3+7]s[jS:IgK5Ir0t%DRY&fg$/<-[?cr[c@m%]W'A_oo[RQ[
%(6S=Fi_3RCJ#MHeX%I3/*f9";\pp]J"druXdY+D[\Y2V)IU]Y3$2m$5"JK-fh&2F3VItK-)AP&BCr.(VA&p?6834=;G;!6IT@p`o
%Y.=F^hW(gVn*&*2!EWWk2eJpq!-Oo,2_(A=_-V4g1c#RV@u@oP+g5=GKppufk;P@JBsl6IJd-+U5m]Mo=H;h;L6On%J<bqni/X'n
%4g`IUfFP:mlTinF:/M["-2R&h#kf3S%l\h3dbXAu3S0(ls5h`.rTA";@;ud8o5u+s"bH.QLSORlCrCZ3B6`/>1`7&W=`?;Bp3[ND
%iYmqqLDt4al??C\@`XA8$!dp>+\-3ci\6U"@O1Y<S*(>No&K&MSf0+;oo>Ep\Z`/dE+M9%26Z(24AAUL`)Uc2pNM;K$&_"1gc.Zn
%SoNZ!^W)0&Z0mZqs,Q&*0je,cJOL#>,[PJZ2ifi#"f;,a>-qUEL8a!aLYs>4a-3(Jf):ED`LA+Jg1Y8+o&A+)]]0"FDB:u`JkPB]
%_qQGE5XPs^^:T`W\]Y?(CWns`CZ.G._J_*<[G-N'iM9@HZa;-I[)!BoAsY)+V)b%_25LO=WE9cFW<hh$MBF.5];sR%+u^/$PNi@C
%jE$RE=a-k,g$aj!&,^7Jl:C^)ITUG5E:P`_BOk)3=1\CjhL*/P7X8^MRJ]:us#cUlZ#"S8S%7c[fo()hH._UZ$cIe7FG\YD?b/d7
%\jtT#?ZrN6@u20uA>bde]79_$?iT-/`*=bgl;V<_4i(*TGL]&VGZE;lY1huUNKK)b/cBZ<cDGgn?Rur.G/r`f[9i4k[O<Vk9q@9d
%0a6R\E_6iP(+Y;FXh&8ijXKpa?.YH64dO+b-6BlVp4t/fnuV0qm54.1^'XkB#O3"8m<eRI@t<C%]g>WQE!7mK7qr'UZVGe@G6K02
%)I@7u,Up.OfZ#Zr5I0r[MX;q`s5mS)oijsrV!QN@[kHRg^6Nf2aif='r3.@5P.YV1b<jj97clC$?mr<-2,D`?a_'\'dK?j.T[8Y_
%\Q]ZU]^0hkX39ACTB8G^GbbV7[q@D1]1oUqqIL&V1Dl9)A(O.Ih:lg":V"dQ>[n]D=9maU?CFbV9t\5Y__!rEJ"!94n/Y^qV7(g,
%[KmLM?6(D>d-gg>Y&;!7jY6Nh2N]:MTCM?'X6`t*0cZ%`@pSG,(LJ/%-2Z&!bRSl32(hTSi-=DZV+-?Y_^X/.9d!j_St?6o*$3J-
%9O`2`gK6j%idAn\Q`dZ5;&hTQ@o<0!2iCR/0e^aNFLXi<K4*7f"@bOX+I*f.'kmGCV74IdehKs[PMNhMPj;<(2)@*7npVH!Io_LT
%(C]g^(.td:40kE/1*n,:b$jrnQ[5qp???^d%J`1upGrkaer:hG`CLk&qad7;k378fbFLbfjM"W>UdL/B\SkJWrbFpKV^>jiQV;:Q
%W3U?H(nCG\Z!Pd?b35-N84%%^+RO:SNU#:'T:U)\7spkqL]^Cl/Dk[A1i3WL:2-3I/6/ib/1Csjh)66QAio+H6H@dOrD]@qD:1>G
%E-H![gEni!O9D$*JFhJ:eA;c0[68nRbIdhR7Okssh0&J?3VTZSCWo'aC]@N6s%$C:lfPul#q?=ipp0>Je=p(Gp>drUZ,RBt'1VrK
%,"QX/Yeq[lbZL`f`$oPU:X?Re=iVb@EdZ[>5&Rg!'I5k&aEm_R9Q,q:.T+@XN#uDM7*Co=eg7:-><0rC4!1K<@DonI@S]b0mi0!\
%N5r1\*NSqj:qinV^f=\4dlk<rVCg#H!u]?\m)/Af#s&0a@G<p;^(U6)T4l.&G<%9]c0$J0[t'P#aRL/:9od#bd1m%SiW53?n23)b
%7V5h2CI84cG7TdU53G3uPO,r!6G9P#l.IN[IDa[()`bXkG6aPN;9QBTZM)VM^SS)d5rp<l9+87#i6Y#k6["*AQWQ4_VV@9=O1t]h
%\G,%-0l+)k[J5f7(ie7P:X:,kJ83=Il.Md@*>_8[7j$gCi9A@Y])Y,m/57tKOAG"j!t"+:Vt2YC0^?)YQIl4DB[cVdqUC4jcg^pV
%bOb_Z5MuM5UFjj=,r"?9=eKDo=1rQEpLUU4oZ'T[2)HC+@P>%M"MRO89Z%rsYfP$Xk[H3oT+e5F**AoWLd&@Sk0QX9__9LP!YI='
%c*D34a^W*NK8hh-!sY:8aQR`fF(r<<b43UQ=9fV(..O)P_.KJ#^7KG(dmp"TET[F!T*lrPo72t>BU)AYk2>1m<HC!SAncmoA_qj?
%-S<K;@^\<6r;eM5%6q!LOYC&F@2\"1Ks)J_"aE=4&o9E'95\mS"Oc<kcM!.(\Ni#bIAM@&rsi8\"o3%YL.i6+NscFNkJFosmal1/
%DnYE>?-I9Vj8E5Io8:QroJ%V)Z@E)(i>"DCJ4No^lo@t292K$P#dDBECOkXp>OLuMh7K^H8"CP<=hU6skVG(&kbY#(QM08JrHI\3
%qdF%fA-NFk<V@OJ-B/[11JoB+fn(0DpZMjVPfNs962`=3C9gLV#0i@Tq<`U?TCY<Tq/CD*j"-VY:uhB1p9&%;K3]$)He`.K5mLMn
%4+(T0ES3l5-2DZMUJEueTOPTVrG9^9,G"#?'hb"O8!`f_]X91O*2"nT199dcr3q*8dg'E1_'bIL[`=m%`YXX_#(N#8$m-p4?17"d
%pHIH[3Cg8u]WKk&LJ]Xld:;Rde[%]/Q!1CX[Pl!h3AHn_XUU01p)DacWfd]P9`LOu*2VmmWL.?g)RX"f07C960oo1Z,e7al-lfTt
%Cs`.mEk!E)UBi#8nWDN[V;s^gqlSmHksk?XdVE<)T/fW\F["O&)=Dpc?aI/Fj!:KDCi`1edlGc1^jO1q4e(^5=6G-eH%^93,E_d,
%Hf/KVI&#X&U$;nde6!YgRi$cCmj9-"KpO*h&K\FlXEZ'U3.iuYQj;3#SSD+f>8sgPQZPYP%s^5jCWEedp%!p05F/Qde6+aIF56SA
%o@IeqFuq"%0V=`9Z9@))D0qXH>r:I#4!,X<3:a*eaOPaeKnd,3K,P1<5h3h#aL#=]KMZ1"=0N3,@!;FC6!CAQ@h)SjQoc=Ba*Am:
%pZVW?/I(3,E4#L.,jCi$`uMF]7ka9r-IIU``$_nFqaA2.2^=%/q,Zk9Ae3Ws(U)1%16r!SOaI>@W$WLJ4_l1EWbn>[U[M8UbtK;l
%A*@-7Qq7+cD'6=r>_)\]%FhqKb2bMh@uqMrh\"Er(aL'G*Wq%MA)A`lof=K9qj]%b5PU<%C)Ik>0E:jTp--p.g;E8m#SR`Gdg=WS
%&$,?fq-]9>2eZEU3(TEhiL@>;N)_-jeJ@8TVkf,55Ko%FcolMP2;e(WG8%(Z]4)TFVN'[!M]%h9)Y+e?FC1+s%^9;tGZ3AUYW%]8
%G141lFeB0JSn_oa!^:.mb1LFQ-jrfEI#`OqnCR#9G0MENe24i+_sQOCA!mduB@J8'qQN!/A]"&B4PO;&/@>"t4gZI^ET?=6.C0ep
%L5%+cbq:eFd;Pn3IsOF;Y;,SjN3nGN2(:]kP@C?WB^LDFQL20hh%t9HCSg:^U^&cFP4Hl(\a=gF?a4kWV6mYkoWj>7NI1gV`q3j4
%(n10[Obd2/!ZSL9]"YLBKKZc7H6uLu;I4u]f$767GBcHVb0,nFb<>ujk2$bA+k3g]?1A@p-.,6'WQa[6,6:GUpFt;\+'>OFAaRnl
%q"][H8+&OG:+iERoD+]UfXkJ=0E*%nXSFMUi\I;%I,K4`rqt_.^\m`_f,t%f]C5-HQr.NWIeUNE`.[q<rpd`f9!mg&s8LWB5<d>r
%r7a4X`9EongS5@&/+c'&<M'20rhkO@0E_@RJ+r!Sc'[=5F>NsjVn`57+90C]qYu#Ws7QEj?t4\5qWtj\F(5U)s8T"spA_M%6TX$#
%O-_j2*k-9TMDStoj7^j"U[V\C:<MB\Eu0`NN/R'p6WIYT5UXW^cqNTm'Gg#S`@6#-3QmPb5LQ&`.o$u6/9tW,k_[eZbcXH.1+0pe
%B6u,u<2F#lUXt.M@-e;*n7bq6D7i\@caiKp^;a^^;)(8cn%2SYA&tQA4;r!98oRYE:6cQ/3e`Qm0p#'KN]X[4-Z4P]CXZ_4FklN+
%.JGFQ"-7[XiF<2/EXCJuX+N[7'28TW7L7p3'M)F.3P7*g@t7crWt<SJTLVtWU=7?@npPi0?0et+,Ok2)^W62!:S[u+Y"UTk9"X6W
%3\L'B`<grR)=Tll^D1JFe-tI]fbSS<1=EM,L(OXW93S5^-2/j+._-fZLZft_ptHO)&"_kn_3=PThaq?Blr:C(XA2#4PRAg8V(_uL
%b5LHV%%$@L1s=$tODe\UWa9X!`E21`Q<Caf/Eebbmk?8I=a>(t+CQ=-)%NHJ(0>9:,:\i&V*%6W`0Tno'N/cnTq3RRO`9k/WLc>n
%.eH!!c63)(N24*Uk%JX?&r\8:iX@ha#HI]Y7bBI_e3?KhVNLf]MBE._e1`dj&d]j@(u=IWWK.KJSRT7BSDQM7EfIW4_j2:NjBZRn
%"AgEc4jZFH1B\+5D<@7tWXA52C*7ki&=@4L'*n`6Ods+`Nt?TQ">EB0RZ`/%(=:?+:b*7H+C]sKG.K426@2h78YNHbl1:E/dd^gt
%$,AQo!T<;<StB\aR[0u7r+cGYM".gX:MRG,'AR4oXtf$_(mDk)]SeKn)$%Eu&/D"ea#,:;&,drm'FPV7A//sR(HruXYZr_[)faYA
%/F@!1UAL%p];:u-_QW>p/a+mGXi4QVM1OqW^fXHa%?"!V't>2=@Y@l9qpc&!&"jr91chX=5Vn<#H%=+qa1_nJP.Qa#5.>r`j;RW]
%LE/DAaSXU%5fX?+V$-k_d!bQ&+g?A?mEq(4EYZqM%_*[Gep?W<NsbR,Z3MQ)2+GQJ&Q0ltRaQhXO]k>^f[\+K(+XtnJO0Nr2r'FP
%P/+5d;escN_>n(U,Mg!G57h3T)%d(paY4T_e""NRb8PX]]j7M2?"4680I;K'GqTk!T1UmrMc55&:2NhL;/+lVml[[;H.)f,]W&e&
%dD<eX/Uu*ZB!?A"qgs,'Z^MB3JiQgG,WGliF!PlK%WbTbU+jjn6<SmPR&I?abln5ig0,Dq7RgQ0C"T/AgXKWsY&`CL`tF2\aOXV?
%E1]!J19ZHj3NU><1Tq?iGMs]cp'1G[#+_K4.B>O<#f9i$R@0cMn'tp@]1oLpUSTh+6'tEo_`.gCRKi&<GU3U0==J)K.Wn#>23L'6
%d_?<]-7UU7FaC\US3q#qa335i<-?7$Up6tN.6:0tm(jpF-PP6I6]R,k@7(MDo%N$A2L8>.BWdq:JN=WAhFS^peJ&09X!MnGU8JRO
%n5&>XY0j!RPW6AJFfK`0"t]'/QJ!smgQUJbTR_5^X5SuQ60YmF8se@[7J5+eUj<dFR+ILjpP"Cj@>aKr>KI-(J5(5+.ZOe4dOehM
%E1]"ub*;5j+m",SPP;:._$g;i(HT-*?E'+G8npW0EfrGV#FQU)ri2nB"Be\R/<%qoKB,`u-YI_g@()?mN8DBHDf)".19,Q>8!"qh
%T&N12!1__A$ra+_/m]^/dckdeG%@DHQ(%f`6;!#!$GO_20>nbhj,;UXZQrV?F?M1s@7f=pOu-CCm,N6(o=k,8)sl84N`&uKH`;pe
%A4?_RGQNC_(eK.D"JcpuqH7-r8b@1=4-eGV$KoXiV4N%;RqInKf;P8,DUJ9,k!HJH3]Jrc@M1gs,C<>6)-bMN0\At9i.m!9Q!G*d
%>g2_]O$2`/R<^s^a^J!%_4J<F$+1jLW4SNqJ,e8<n*t;F;_W^%8f'(e.?U.J/^bSQ;76F+&g0h)m0+BUX<[:1!`1ZnT.D9"$L'a1
%]EWCjFKdN0([)c'BOm*%QbQ!INK>opI>CYiUdg#L,?SK`3+=rq#Y1&h)8ahHVSYg2Rj8cf7SjgW_2]G9mTnNi&W/io"Z`#!Ab:M:
%%qaJ*;PEVB4!;-!Jls,SbqE1VPJ#8ek]\mTeKZk4BD*d45i_FWgqNEjm^.o!2/Y_RPk7P9971MC1ahZ?&NFBB?ZnbZ`-$-,Oa.]9
%9u+A9\dCW@&??Gf(J1E;PKp5q?n.9h:sp'3.J"#F4p^u)`'^.Vo/\D/-%tQ,V?do.U?Wjq'VLbFl9#Ma^L8JIH/Or`(^fW2bbsRh
%IIU*Gkkc`A_[$6*8YC.tMGfE+bMiS&#?AS5,`i2_%XUnbZB+46*'S;tS_tYbW[G!:cFt4iTupE%;XF2mm_,%6<&B57%ChA?,%I\(
%;/9#S$E/W8E/H<FDA42*:>I;I%SdGq*%M]-CHud&00)'o588Hg[nc9fPYDn)8mWNX&815^%(4_NIk^l;IfF.SGPbRHd-8@/piM#c
%l2I%H:\Oh@s*Ju5LBmD4FT0U#)CV5:KZ1EkVE%qU?t#H#M@bR;aJ$@GHeT/OX.asO7^*cd3EF`_`>dQ;Do<.F.NX[*Q'Db,0F-IN
%(kV^Zg&hV'CrE^jb.-EGORAGN.?!\-2E8#:i?i5\7-CBUY0UshZK96/=(bm\!]c_cRnRu;\r0_Km0\0B0cbW@pj\(`3D@c2.#F>#
%*!1S79ppkGc>j5DOj\SpO(F!9rulG@h#kS=X,rG%QD]ICB[SLL4#")Cot1E9=+Xq'C[!4Yg58R.,4jg&^c]^%[U9E(?!M!6ICR9B
%lX:V?_sfjEiN"gt@K!%qQ?$am9*?G)4%X]&_X=F+]auA6d1["1X,OD.##L][`nWmn]92G&P<_g2i!4sh\^9A0`1/Mh)G(]o3l$[S
%Yib@rU_jj$9@>?uQ9-8.A#'E1@Nfr%]W)#%]g=9.@&'IU0!7)8Oj[-BIlbE:b\?)fR+%F<'T&uk1n?<Hj[:5;'@"$2mW@W,VbnUR
%K$8"%[9XcbbE.a"7,f5!oJ!'/7;`gXV^kD#@O<66:e*+CW\mR/f<B"8VY#uL%($,4\VYsf63+X&R@i?aEj:@?pIh?fOT8$>qT/]0
%Z-ZlEB4U^9(djI/,mH_7_5Z($/%-,:d]?>J<T5Pq+0-#7/=1cr9W<lL3n7a(b'Q1#V2`FHh$,6t\Q$'1lS,[<n;3A!Z:T(E&at-6
%3l4YbK5V53<d+'G&PRA==gF/$!QP?!p(F$Wa?s@PmEE"!Gsn+]8K:S#_jEBbF.3@0b3FikF7V[j9mnm(0j!+7JsrYg[/)ItP$eaL
%l(nbKmWrW9B$m<-gX8\Ek61.E[8Up]T_j*$&+AcVV3e[;hHji(m?\R<rc6ZI_sY6;>l,6K\alHX%*,ud7D$+68.%hans//NR4K*X
%(c/$%:Q-6<]!m0):ndsJ!?ePb+s^,RYY,jud3%.l9;4pO1jM.&.Lr!%e%$I.OLN'W!)I)(&AYhtUY\hE`rP8u?i]5#hA4i*=I(^\
%O@ZdJiJ"$9)Vj1<pp5J>qe8sJd-TK2jYQ_M9+Pd0EP'Aph'Y-uT+9=nR'pq`V1]^fVC0pViA.f;ZZ%g9CH\`e6fru,1Xu]S'qBAk
%h0E8m<VMebVr[9B;spsqf9i6n(;p$X9hl&rUi(\c=*Nc5geNh=BU!F=FPML;$#$#'F"6hTAOeeTfT-8AYEMgiS8m.>4Kf?CGC7<s
%be=?Zl7HNbbnoEh7WYR<pK=8:JAkbY%D$5+3K8PeZ.sI'c`r$lOGfL*Eho@&bhnq#g,c1@'BJB&VE*%$f"J(^a0(c=AOagIFDHJ.
%eaA'g+iVs$HAPS^Tkkth?5=qoCeH>"`lq!r\hDgdWd\M@=SDR/Q.^O?5u5$PGpOc59K93rBsGqA$VqkF6b[\3H3br.p8[?PJha(E
%'hC43D%\)G"VT7<C.KJL5_"tEU%TYATY78_,B`Z"V<mU!)H:'B6K=GY<>m3rO2Si5OL\Wg%ubYL<U@G7PWBZ*/n>ie:KnW_3lCj.
%+J!e;\_G"a]r--:K/g7?^oO`E)lU#Q?:IY,!ZDeXbf#Uq9XW2H!i?fp^iA"plC]uR)N1M0gh?D(9.Ll=ZW5q)8LTba,=JfGDC4)U
%-koXUUmT1E=?)`Q-&+oJZVkDD.jddd0ik3r&iPF"*BTIQRAjEZd;?eM$/WBQlat1q#:1i;5W`\]S&q'5,?4nRFSf^jLJqa]Ofjf^
%HhSJ4,A*EJQ1qA[S,Y%TJZX^WqKaF&8MsB]U(Fp:.tg,[Lh;h>5XVGiN@.3BK%3NH/8fVK545Hqihjj1gf8ZE,4tOGk49""?^UNB
%DDQBo.F#a=rI`<jF$?Bf2N8F*>'."n]qm'JAPUI9a1sO])*P*f!o'V&`_3n1_8`3"e.d46<[Un&@e]*PQe5Id1$%F<+UNqs?r672
%&mhDd/P-fdh#b3(\mVSn.NbQCWC'T?Oa\_P9=Qo-,a$6-.Gd7s3RX>eM3UddR^g&hkeK\)U<D3m=s?m2oesD<Wh%Asha%">gPJg2
%.u8#K[]1uJf^tbjgW<JQY5f*if`hitStM`86QlIiAq(l;8FX"P4M+TZ7JKci\hphhiAY(HnB3tchgR6A)O$&6H2.]5(Eb116[9fZ
%]Rm)jJg^iBLLf:Z;4g;n]IiqM_h6:fR5q`f;NXSJ3nYelW7@\A+\FXklYT\qN7^C>fjnoU"Z]dU2p\>P$sFstV%CpCXH&[iMeNq]
%Ae)/Z)D8"*7S0K#bYC^C]V!L<M/C'C&Xguf2!<!fK!^qp:;TlR)53ft)+dC[.eHq%T6h&&S`cY$EQ8$BgI!A\&r*;]PM<eX]LX7m
%)4.B>]aQFQDDqljKXmC&9"9jG)k:Q3;qq5JU?I]nP4iI=i$&!"4,q1t"SWk%,>3;!QS16L/:c["J^@:Xn(l,G-9@EIgB_f[$SOI9
%8tee5*q+bGJ@/,R`X%*K\p0=@MoaUEi'.#.DpnHWHl22&8BaIhR11JD+1*)'oh)5S\jTjB1-fg*'u(m&GnJYA]+F.LW=FkaB_CM.
%MRP7`qah>&rKQ^^#:2$YDHb7P<e`n^?Y/Y%?l)Q`,p+QNL%>H",e:lo)72HCfKpnaRJ/V%A!((D&<O+m/ck1nG)oJO$0<pMH&uT4
%3`@Ht+F+uD"5*I_\F0\]Mgf:3;10)41?p4AHUu7#b0qg-2*36,M<2YAI'M?*"GW,2+B'_!gX]S"hS!)TA:WO.V%[9$nBX!-p?Tg!
%3QAs?VV0DK=-c?2?)LJ#>InW^-_PcbPn5pnXVV3m\7#Rh5sWX3>@oB5<aq=H[E_oWd1M@to3mnr?G!0C^4<O[?^Hll`7OV0q;&bA
%l,P^&c';)4/S/SJ`Ot?jPnC;p2,MG8/8j5O*"?*bBus(h]1"fiBH@gZ?26'=%2U-s8N(6K8&Ilu0lEj<e`MKA0=s&4PXji^rRiMO
%EP)=1)Z)G!+Q/]eJn:;rGoM6([H-Eh5+1?cL<^Kn>k)6B^=;-B`b^4P:EA>0>@1Rr1(/.T>dFEXn@!,!i3@uG97us:[Om`:'b?^K
%)Xahog:S)I8r4bp8B>N`\)Z<3!8(GO%q]ggjPiQYoG&+G_.D=CM&HH&E)$k8""D*;1fa8M=K"j2.SA6qhH\@qE?'\g!)MoOeKq!q
%3asuhN)Dhp"/rYI_=Z9%M+OLsS@e$n0:.D[?$$-uh!m'XctD*.dS[>lQdU7fp,M3sY4^G\Z"e/s`j6:\g!=8gmMm\!_Zb*amM^0R
%.65..:Wo9PX9ZTab@Q&^`Vg#'a9!Ffk)0[B;YGd/>t0%!#,>!1D+#;]P9rH6E):lO%6][7>R6<@I]\eX$@I(4JAXlQ1c0,]T&;Ub
%l/_'1bnW6I*GAkH,"2j^a6ZRJ*SZ`He:'"'CDc<!`'<g9>b5,d"E)_n0K=?G0*1&c-MYNlA/9IIBJGhIP0I]DF)@1!ElP5sj$JSj
%N<5J3o+,q!M-Bm6G-b*lRR:)#*EUkaBWt$HmNG]I'HaetO<3iPK>h\<7T!%JNb,`qH;r]AWaR;=f@-<7qH]LL)1GsuO/&N5L@OL2
%pD]GD#CIAT0/bG:pr-7H-7p<Tqju)7;sE<2ml'-._Z8/;RuQPm0t+up!O=;@KI%JQ=a6Ze*f1P,.;[Im6rT7Y^okHCR2HVsf#L$Q
%W&iVHfrQXfR$)uQ^^QGfd&o>tR-+R0jMhJQW+jr\.n2o02JotYo6?.@ZNO(er?Po'FR]d12385R$3`HS&RZ^FWj.He)6aFi7<Ut=
%2+.+OhF-/eO]j]f3-kHN#!JfnR[Q4DFHcuP[C"b_)'i9u'_MukM<PEsrCB.a^bX@lQ9j9,=&9#.QjIr^Fe$U-oB\\*TAG$\F(C"9
%PI&Tr]T.Bb>jO*kTDL%n[Qd(eQ^ToYj1A_!kMa1i2ZqPU"n^XF0d*9ZSIr#`2s-sC$`;8>deQ+E[pfqQ4S."s/Kl8:B"W6#>uK."
%2>6SY;dBF(8#EdpB6'/5.cD7hOhoGdp_S"5)UWF]+"R]8"IkiVaqfq]ms?e<N\XmlVS%F(._(HABOF=YJJ01F=a_DDei<<^'I;+M
%81u>*oi?a<'Hs!ufXhFTm"27ql+i$J/@ql_Ka"F%[SNMj)LfN#'79r%9N%htc)6imR_@DG0RU$5P%H5OXTI5?B!d]fA>I*OaR,cl
%dAk"gd\<3iYP&#:#s%hqBgPRFinsqJi.'Y]j"@\5CjVgsC<pb6(X8@[eAQ0ENh!'N#;'XO0X+c%?N\Gb7dS:s7+CCG0uMfRrHP-i
%Nnr\&*E4Tj7>Gt/c8ITPU@)J"+skG,hI51@00N8+'el9h"@?@6F.Po,]2fI,+[S!=V5Ykp@\0\_?meg.e-JY6>;m8=6eCRK;Z^\X
%QKuWSiaC%=j-UD1e_p]N%'iPL]W6[Yo&(&>)A:'X@Z%WJc26q6eH)@LrM4.MCs'\(+W,l-;lHE>)e^`\q*7YBTA1T>XI4?$G9_)M
%?kmK$!ael1`K'IZ.bT,;>$+6a*VBe7:+X2e*.!ooWmE/30N&^I].@,V%7XdcbrdJ`=U5\P\$:VE<qsc>DdSn(h/5;rADn"[oYl!0
%ALjjk"f)pOD/7G64`>Sd6fpd^Gjs@=X4'Q_fPhtOUFq"##.rp61IUVJFBCmS;GHS_1uM2h'FV2E3;O7B*`AXT-OnsA>,NQq`P?-p
%rB8oDaMC7Ng'q,2>0q?*i$=qDF#h(k`s)cJfUA,:/]DA[_,N6#N[Ug&_bKS*ngaAAO=G8_\sjV`G8#Y9WYs)`^RHcmUOpa\IQLjE
%AL*8A;=(PJR!c4RU.Bm^W,)*#3rA7K^s_n_-THADl%ghmSPh;T1`q6LQS[FcjrAZV_n:B%Gp33hAK=&)I9[OX*X76(8L.j$I*m_r
%*:]PGpDo^\H!;R@:Z%5XkNH\9kprZ`'thB9=`YF2J6M7ACu[j)8%$)8=2<iib496lXb`icmf_)KC=,TV+um;`$EqD:@p\lkd0-'Y
%(JI\J7!h<bpnQT"P/_[jkq+!N7_e]%rd.U'!\L9qSjELO5b%uR;&liUU<2.aG/^pS;JP%c[*[!BB!S<O"Fk#qX&X,'M<I.t>.iP.
%c/s&LVV,\`K>:Z/Br9G1o43IMD9J&\4)E(VgD80^HbVlo"gW"%=e/O^PUKYuo+"$ReGCt$&k*uF+M[M8]J.M1,fd?p;,Z-r<<A<9
%_lY50ZDq/X1D5<]0a;D@'-n'fm]9@sSjGoP+QW#>=6H;E&2PVN8SP/L+5QDd-UNdEf-1b$@>;6E:&@Kb"m>reP4<]2X.\N?n\#d0
%bKWZS)9<!!V'G^C1]b'&(0Hg;)YF([ouOR8G4qo#.bfr56<FfmhWO\M"_LXm@bIWenE+D>Wq?mO>+rILW1+T*C[p/"j%:_&rRL#B
%/Fh3bm5?uhJ70KGkDN&p"F$=o6ibtE>Is4ZD?9SL0D&S:C.V^>`,S+q%u9qaP-^pU>L<[?S[Ar0ZWnb3@Y&(sJ2oVR=qM?oILN)Q
%4l/_5<iMY.Y?XXP7n5(jm%lW]f2hoC;Ha,@'XZdRih!lS+&C7%oD,1()]Uk)e`#PP2R&7c-5OiJ0.a_,"Qq6+\DU!c"K1VMnCD[6
%mSFmZ&/M-c=OI:<Pm,3i1Q,^m*aQAVQCWo8c@pB'H<<:,bVkBFRQjoZBQ:R^+3`7$\92M34.WJ+cm(m$VC]dWao$;u("89l4q,`'
%)B9.cp]C+T`&P7)I'R9"N+"<mAH7hk8ZRtY!J;50lJ*.I#h2csI4%X,J:VNs=&/V;D%/Db>9f@Q.m\aA%&^S>Q==4Wj[(h7l@Sc"
%B4XJ!+PPlO\-.70;7=g-]O%'`dCF180uM$T'_3*A4XRZ"c&c.-gTCu$jEnCoVlRVLf.ComVjE4t(1esInt6Q0>W9LO3Gtq=;4R=%
%cAd;V2S>'W3GL.JWMWQUI$Et.B1h1;WdnHsJnjJR4m\?,hc7b:1L=[br+Xf5\?#C8If#,JOo%;#b82*6^eWr7,":7oF[m.P<W`H"
%RejIf<_6Wn(E8c`/h$6LLGKfo*c]HP6cI`*=U8YSQrS1JdFDZ;fM#0Hi&"_#9EK-4HbGNao)1'jWh_bOH8<qE0G[J1iJa2Bdbn1p
%.P8fZ5+C=@Z[rI%odPm3X=D^@A'K'Q:[OIr]a&/\>?0VOd@J@\e"%1\>71HaoHqVh.NR3:kr5LYJ"VX7MuNdJ2i!6j&me!J\ffa:
%elR_GDZmRq$$1I?6h#DJFj`=2i&#J:mY<rrh0uDFUjN]RZHoP`&dO[cQgf>8*0g9uE+-uZ^5ihOD`F\F!Y!6?,f;:>_4^^d7K>@;
%Ftb=75@*K64U3dZ*DFB<TR\nclmA9B1=5*1A(k$N;clARIF^2/H^+PcE@6rlkFD$1KI*u<"2MQjU1@*&fWYcCoA/)FFE]1lm]7L*
%!N9fj8Blu\05pH"#BQZrjV:rNEF";9kA.0NR8Nasci9.$E=i!ZYB_D^5NbSD2JNAAk8\]l3IWc**Z_[0YT,aeI/e]ic'[C<)tTWa
%UmeRT]B9"^cEI*-Ds!NY3mg:5p:3uk1\9Gu7K<;1I*]S*qVgUC;tYe;9_R(>>OhH[DV6o!?iKu$]c?S.ODeX;&IO(qp3k-YJ(n\<
%rq<HfpYS45oZQF3c'P2\J,ecNYIq,)m>Di'*VO?oHsb*.NqK%DqXMn(p.kMTEW;3nrp+KPg&8)"#@27A.'_,J=`bQ"g,t-2'Ve7p
%<%hU:gF+`>qAdtI6V5du]Wo/1]E/MqhA8sWmTtim%Pdnp7*>/s6nJVZ#mMl$[Wa?oP&"2ta84c6?1*V3Y-GW\6leeIEC:g;e8[ks
%8(;NH*CnWL9mbbfe8[ksO.qY9<hf0JO;"gr7&biMX6.GerpK[74)mkD1uCrc2q0dh2a&ZI4g$a>+6T+a4Zp+-qot?chQ5T+Wa_/K
%1-rmpeM0AF5VjVC+=)M-".5lt$s?1g"@U@2MScVH]cO[6#L"H7rK>&A,jMaG`U:M%6I;tG</f6d>i#A7I`^PT6^!buCjsZ5>Yj_W
%553$Ef2s7^ik?Z*46!t!mQ9FB,ORYQ^*E(CVW49nmQ9FB8$U7#eIJoP<'cm.Btfuc<!b1]3p=X7?L4(kdDkoL%L)'udDSS#d"?P(
%'-;tOlHXks]7L^m,eJtHpPDFC;J_Pl$P(4>:CU@A),@lI+'r3"?c6rDc-g(p0=d/D]-7^lS%F<SJ)Pq<qq@.]9(i4ML]\DXq!`KR
%i;^(pLK_E%a[a-dN<.)6grR6V^sVG#I_P6>otPC_na"N9*<F1mE#\o!^47HLfoH[PpE@B.)[%@RH2%4k$OndfpiN[t:r=7oKqn\l
%bRjO:6s>p*6uA'J2H]%fTM::,5_o[HR`Q-,c(q,=HL#Sh/s@T4$Sar(UG(HIk03$Gk"OE2k&^n6==$jbZF\4`fG0=/C[AI>s)<J&
%bN*RhfX]Zu3p^5$*ZV;Eqs;6O$e"-X5gg[TOeQ0\Z'FbZXOqU4)Sc1KdGGI!=B/fB"kT0VlYWB)RGYAr]j:&<h*S^KrqtCDhp1tX
%k"YU)>5+3:Y#Y&#0B"EX!KUPRTD$#se=c[%5:ZlZ/Yqp-LpU?5&"\6^hY7Lei;?C:7e2Q,@m0Ecg7H@`;D7;;*Il9>D)F5iOrM(3
%p9(*6%IaqW0Fu(HJ.e1(0#Oa0L73Ih07aIpU5S95_NihVhJPrF\j$Tqk&G-(9WIp98/A+Y1Q=O+-@!VOc,6O51aS3+^>_%kn!JZ?
%p]'GiW_K;_kYr';%p+,qghuK;<85Z)cLLmV>Omh>rUf:QrQC8qomRC7OT3V/]O'f?H>DZh6jY,t&Wr(4F`i$orW8;Z1jh\76a<[N
%M$0)KRL1k*9`ne.(_rVQOTB=m6&Z['#%NQDo%E5oXur),&M@'h!+m1O\19-Y5MLGp`>8Z][e&)l:G"Id^Yd!*^MhHmFWS+u!"g&!
%+!"EYI)$8j4qF_6d$]:JI&D1La0te[kC/fiZNkRK]%?kd/Ob$,T?@:ks8!aG!GX&sYQj>7pS@.8C$G$@`nA5]o1J=j[e!"mP]%j4
%H)9\da00Ro5(09j_=M_TkPp-8g/*0FF<"P<mE%FQO$%ljC[gRm4V'`&XZHL:][lp>L\_ahF]CV'Mb31\WKo8"[Pu&q":%g4HFpja
%=l-Rj-ZtYi+bsBJ-<r6'h96AZd2f]-5t1#R-F>[+6WOO$7Pg:2;C_c]<D_a56e7pP0#\"b3mr%\qc\uW3Oe9FK5NHti#k*""k"k7
%65hpL<-4@1,$]Ap_^JHL*nKpegD-g>CM_D/kC6"/E^VErT%+,/$r)[J1flF'8'\P$Ze&14?j'@BcpO3q0lo/,Jk4G59L8i@$8]%?
%8@KlaQN_r;0gb[?;\E]XS3ot@LG7/X/(@JQ.B$a3%C4ZSR39*<A3j$5C)dSq?,fSh0M9K<Ul>:lK;:F_)3>E"Z17D1p)/s-A6Cu&
%aC.?j`IPHWnhm*D@RSI'X'+B6G"8>SF#PY#3Y-f`(WBsTW;iS@INBBZ'9W&S)Ct7#4e-4S\7!A%_ZdN3HhZR,L$aqNQ4OpjO&#@%
%no2G:f_Mu$B0+rH`=-)kl.uC8kPLl&d&WcHo\tAf/Y_orliO%<_o;HAKeYBEBE7Y`1hK*r3j0osf!Yh_Ze@3KXn2*/2dg.Egq,Vp
%4Y?6Q(i&2J;c3u`G)hKb(KYrG%EYRUc2+A&Yd>H(`pRr0#oY7PiOr!N$j$MK(XiUs-e7mj.lC,1(pH6Wf^pN].Ck`.1Vp'R^cn5`
%[?u;dnN?O@o)Gp*%=)T06Ri9O(k91<ni%FRbW^cK%^-Y&HFDlC@l4>oe[C2RG0]Coo[1":k3*tj1C]"OoZ2fi.Lq+LI_AGb"A$M_
%RnN'@:WNBM<nd<HD;'$honHWJeE\,CGSkROkJ$,_8Sm3b;8FX#h<D6c9!mhNp@7ooP7Kd$,.l]CqtdfRL>4/[F2h/]-F($(#:ipS
%e+mL8pr_$d*%BKpWfcXV0LnSgUp/m1pco[p\NePN3P^mu7+c/R%6e'D3Qu3D.77.8:Uh.^82aMElq9HP(J7\V=!td=T;h-DJ9u;r
%7jgR3C1`qW[EL(^<at;dAs/)+,oXUk.n$Bg2*a1T#1+9!R5Pe%JrudDAe(`XLKK.e!_S)j1TmO(c#k.2dNlP;JL<mjWV>$&DQlq'
%id'=nn;MPdGO9,I`5BDQ*5$49_..hiN87u06[W^lr251cHajU8be\QYfg7>;Zg?sh.Gt@nO,0@TWIE0GK(9%?/j:11A"4j/^<UYO
%M;9E4S8[FMEr5(Wc@`^;G+sBWkg51gH?su8o>nKNSSSb,n+Z8?i&7_)o]MWL5+m<Cg#lhs\'H#^HG+m#jO#5)Xrjc0ILb,RUXsi6
%I/J:4%6f*O3r^#0hG,0XP@L(t<]iGCH0"Mm?%Yr1ml'qpYBBh'Hbl>4$"!.RcW]%0SO?M9QcR0o%5aAqo`IXZ&[eN,oPFWJl]@DO
%![1^+\WLEK,e,6T#EnTBc#[S)QK1ISS!JS..g\ChBmb"Z.a:J&k?X5U8a^FY/W%H)qqC3T>U/h=E"<HQi*/hsdiahgi+6,hfb;H%
%,EC/^4p#3]hQUqa4'VIedOeq&d4/iYU=]Ka4tJN_,[tefiPGoZ'$Sdh:kcP:ie=Ac^FC0f,`59"P^HVtX[l*-l13DK=ce)tGe(_D
%*#@V+/4`237#7[/B#21*fj!_=0g)ITRt5H<fi?f,7gbh>-E@96#+K&XK(I[IClSo3?Q))TI'uQh4%nkgh#ofWe7ie%3c0+#3"o5Y
%Q>Fi77fFc(F6djFAgNp","*$i=s+!E<a9"^bYL`"$+hCp%V\41)3>P<TCqd;pK<c^bZfJkFBFgGWr022\GZjJT\sWR[kP(BLdVRL
%2pb;^qKl(,l"VkJ6TpBI"%s/Yp4,(IKmJFKr8O6n1Vj]FaqFMa`,WoF5TEJRY)Pr(pi@qR&cHR!WDRL\(i2"<P$!#I.7Au`+M&E&
%HSR"g?I$!M5>?g-bW@rE`\ql7k^L"G481tg,hmc3eFo%[H[Bl2LQP*9Ftn79A8n$hq>BET5C[F[nd#+DncrBq_tM*?jkEj7*5(:$
%68.&uq^<q6bSF1M#c49tVG/$q/lb6m.n`QrmZgJF+LA$3h*g"q,H%ro)tCaao7Q',D%k6IhZaEa!(%UPV<=!@A=l:%[#To-`3J[,
%jl($*i$$98kVon%n/3M$@CG]FB7G0bDYJ#%f9o>-jbO)#?2HdB%D,Na"S:-@l_KQOm"j>S@65$D,bn*L$c;%g[6IHcR/aCpjF^E[
%cBO6n$qWrnn3$96Sr=M^*RB@9q<ME'f#_Gmib:;lnZ/HPS*Lf56.NG+qniec]??4nlV&`IG3#kPmugWEEo3,>5)eUFeZb99'9'!-
%hG_<8N6D/$.ut*XC$sic!E(,)FQd&^5dN;0Jdh7Hj@5li\!($T."7nU$Ch-:]b]k*EkQ^t=bXTJL1Vi1(QEsiU./^XnuefgKEjeJ
%^3Zu$;9^>4.BADN"/%iP8^-u8Bim/]6ff\55MDgn&_TFhPN#*N0%`b:OO+?9jsp*^DB_+]A`BPo;^\[j9L#J;b%6ds1Jn#u-n<^G
%AB/9Wd:6X=HU@)&5E)t&e[-]Mmp?#4b[r-J8%"HhNoo<:2jBu!^Rhs#Nh3tiIAZ[0o.%N1s'l$&0X$7WrTCb+=NZp[;0>#2<1Z>N
%i62P&D)l7JZd#SEWl!n@-&_?8]oGA`;2"L#9[CBbE0?;OTfS,Z]A!_(<\pZpQm">X6Cc+&25FIF!\Lp5)N3E%5<3@8`%f/iJAcg)
%_a7X4f-i5'W5B+7V=%5Xc0@VLP9-r!!Ng+j`U"s(1cJ#mDC:&?7;PI=jA?^S(@DBh?3=^o:Qhk1:D2F,`9HcEQGF++!E.8KqJ!f3
%J_A?pZPbJN[X3XtSRN3s%m<,1,9'1cW\_U\o+olX)MU^B4,ES<,e+Xudgn:mQ@sVnq(u#g$H@e1oa.c1.Wp*2ff,j!J*fY6Rbj*u
%'M)`LpR%UXE`?[+#9$u'0L?gn6k3tc;o`C/m'4:&J.=0(J8=]L:(Knc%U+5JA8Bi,#CD?]s70hg?P"kY>KSjkGTe16kV8Tl(iA/d
%1KBFea-e$`d+amNgO6]V20P*%B(\=3l>LTl[^3@tCT_Dmm4k]:]%N=f'&*WZSB*Gs_H%$$@r^[=*5:m:^IF[iU[EQ3p@ht!mGM."
%fBnW,0$T-BX#+(R#?d:DhBHp>e0isPmFBMnhmZLe1G=0Xe75>hrCS*798f$Dd\bGNTNZ0+Ticqk^3g$M=8VY>cTF-1kbj4)>,h*S
%1V^t&4]^i4$hZ5=QgoDC#3*,$7mQ,9QR(8:G,d->c5GtP,S&]9mhh!!`S0!9.p00L?0M(ZiVP1M228,dKfL^.H`3I$AEu6e/[[].
%nWhg'k*F>K_)l#<L#l)'X$lD4\ibAt8j22"A#14sohBjccNV1ho*'SmDPhbbO'nh`O,711aO?ZNc,Ra'ect@>X`?5P^K%2IW4<ZJ
%;C*Otklhf!jnJ#8:[)<Wc7+q)!9qLsao9h<$'9npcOQiQ^mPg'\ZtS]p4`BaqaIofL&CRleSctfSSgDTQ*:qo!:-pr7?LJ*WJ=\Q
%'eW5'b`?Y0_:i'rZ_blU,9;pJ5<gHF$7VN\)%X3(H#J/X^OOKE,.j>^[DlSZD89S.ho5FYd?,hOWfYS_KC`nu(1ff^2::W`pC7$Q
%5[IE<A&uH%Z`8='40O\bXI84gTR83[X-0J$*,B^O+nD[@EV_FI0L@6"GB*N.XmPYpm,D)[$]`3qY)=Gu>4!@-8Y!S"8@IE59F3JH
%K$%?@-i9.'NV$-P2%O5>-N0f.PdA_3Ck"!tD=Ggij_]A1IdI*\hRiDNZ<^P#o)e2A`/k[rJb+=!L$2q\2!Wi,J0n>H<^R%&WPC"k
%eb@\irmj8FmL^Mn#ZG8qfa]5q.!);ufeG:lIJ.1<[;=$983*?j'\Dl1_!M;uf=$L5<u,uG9t86T_>,F*B_n5+j:50$NG@>)YsA,i
%YFN+7&3U$i+KC<aOO'h365NT+=$IKd,Jm/;A^%@gCKN@u6<#"9D,h>Z3ZTe/ZZD[#1KIQJH/V.<,GQoN;92'ci3:g)(mC2^(Ze3Q
%A`sMDU+:P9m4sa9=Eg1qs*D\RVc3CFMQ0Nj-d2>=&0XDPK?:ak+i9Tsg[*JK*;J`$+beRGmB/",8\J?gk@_dlj```a2@4V2`mkXZ
%^>>n6_@^5.\Jd^!_!U.3#iWaA=kAZ#o<iF@d=1<HU2TJOOn$7-hEcIuT@nU,REqLhS";bh2dPime;R_EZ@iO@I"2-S2WM,V'_'fG
%l4I1)@9Z:5H:47aq@RSQlUS>8p,fsJIJNbO<B%AP-a[1*IUp4O(O,,jdu!OdYoN_I[rsVXqt1[C2e"rdM*,U_)'0$1XSc+sm<KMc
%eZXG2Z(H2PDS4WgMfIm7rQkRcmqP)DmJNI4l"Wq^NAZ8tS`T-pjj?EQG'3$)Yg1RW2V[no\Cn<Kfakc%m`dmTp4U/F7)!71<]P5W
%cQ82fT=^tn5NdqZ#.SVd8Sj`9Z!9GfMt-']>oD8-]GuF5h:j-V*n+]*=3l`foZ95;DM65n+cl$Cqqj&fBes$XV9O+mRdIVO.t2cI
%N]j7`d-*n2Yh[Fna5k8<@LkbG]NdV5Qn8NMbjXiFG0BQ2g5X\pl=/Nie:.>o61)k*IT62rY90#UQ5Y=eHl(T4:q44[s'iN$Y)Di8
%JR+63Fm[5a>l2_AG3k@)B<^3dopKTErlAu9T0713M%jN.2KK2?n?+B\ZWo`#h0An>0#m:Em`44'qnA$T7s8Clg)>$>f3bpa+i8AE
%pt]u``-126'AJNDASm4[YPdMe*ID2_#US[Ue.QU7[QBinW?@b=G<R3WZQ#=bck'N=Q:IsE(CQG?XqPu`Bk3l">`KN0<88QJ-ep87
%^baFNlLh'b=$9iLFCj.OG@b!Zg(1PBr:]uI;9.klX[q@ZeF?VBX[=Z$&BH5r>VlpN<p-JtV?KOiaOnba7Op74RQ?0Hi7nGpk6_,f
%k@tm,GHR<J$2qGVKub1[gnf)"f'r=S\o'Q1Qh=[-XuPM+f:=Ee)q/rmlEXs.V"tqSQE75ggV1imA4PVigC<CAQCN':bE?eqG.;UY
%m]frDG-9,*_?Y7eTV8\k&7BpXX-HCi.?DpE]k1cOMc<pT/lLuV"e=t<6gZ8U+oN-FlmRU;0rf<6I%jBPGO;M.beDW_f(#.s//eh2
%QXr:m[^JPG`H2m^caVkHlcN\*^eP@;&WDHOSJ#WjT1R;?UW^Ub^I<om2YF0&<CZh/W$,0.97?@K:=VCK,;2D2BcI%O?3R-)7BrS^
%G;BqD4teF2H>Qg*?A*YVYb*Sc7sD+J%*nSZ/[t;rQ2NP/qGP7[5S3-jjl"CbK%^RFX4eso`;6us:V<l!3GI/IY:3Ii/4kLnL7.$>
%B9(hab.L^N)P18>fWeN:?3e<lf^NtahqJJ8h-W8`[R:S=#S7b3[C3C"^2Y//Z(65"*'JdfPS.H..iX3b]ibK+93*h79kGdu7T;.5
%F7)Zt`_p%4]Q[["PmenU23WNt/Jr-!acA&JV":3YXWYPV+k%4[7Haa#79EsD%':#*&[.A][</fEDD(*@&q,1rc@>q:40YnKOE3]q
%,5^B>W)8j#<AT[)YK\Zd%8jbMnM+Vj7OI]D:"NPE>Y%bt7U4ao-.+TjBD2[ANTpjiHgS7NBt]N!"9?W4AL+[+f(u"F];WX#GJ8"N
%kilSQ+8alBX=A*q6jJ-+D\0g6er'`GHVMcLNS?#,K0*pL/8_-H@gTNUh#7Mq!Ek-K>fP*-SDq0.GD.7X<%`%.2b-lC(]!bn4MA&)
%6ZH/@a$SSW-@BXtN?lq[RN*NKlBS:R/WhgGjHH7t_X-'R_N>nI:n99U=8ShlKqQ]s.$]]bRC?"5:3R\5D/^q*b?fEPFE"alEdpbj
%o(Fq']sb.TYJOFs3a[T9ff)g:kS"'g*2@?jEetD[e6]*uk!LaPi2?u^;hbE]<'\YR/GgEm3?4*Tgc?P^@c)#6X2olF0o:$k('%\m
%c<7^JM_1F36pY(E=J4COipC!;===i!X+/hV.:8%+?b=TnDq7)&[D&.f_5CB1&?c`'.qCn0(OZ<dD9Hl%ZP:PlWP)Sr#p9GH@q(.k
%dP]i4QEF.P&H6&n<^[BD.#%%b(:.%@\M%UN/.5!&R&7HBCc%&oo@9NeQE)fJ):u_XLY<MnH]87R#l.[.`]$-oQI80^JUnWf?(aU:
%4RQ^XRl"]Ja\mZYW(0f>Ns8`X?ZttR"Xo"NAW%`qL/bI`@DI:O]!sC:`=&Y+W75Veb#-k.F%Xk9g%XE,Y#%ZX',OQaq]3kS-ONCD
%:NRK5O&'0GC=V\(oUeH[eeLWb;V0"T'ZPmjdRIsI,pZ9;[.NqYncI"3D>O11%rEEM*m5:r$iQc)-iuISWP*>GdGDlGPdbR;W#$0*
%Y<CFTEokYkj6l[86g_U-5NB-Z[F[,B0pZ`"UBFDsO0fe-caVZ;<UIi[=+54A#Q8<2<oMtHrMM<\4SPJTD:?-Q7WWC>MXYH9'/tun
%/STq;_E=auCA^seJ(Z\l2unF##7_K2h;nR8#0Rl32gVr\nR"VY)L_Du"S.BBiJdYI:5A1D/X"]C1rE(J%hOXDR.'0."hpeUg2AV6
%l*]h@k!@>Cp@P#->n<CNVEt*1VFQ=UKHN*Mj@oM]9Ei[d>iVVmh92'Pr8?uKYDa5'7coN9,BZP;BV4W=gao2_2@gWp])#O'X`\cZ
%rU3g#gMHbUp;?7_^:CnOrps>SnV?s:?Zt0VUh;>_i/;3](kE(E&f1F;!36MM^0AChLL&k*PHbkBp]Ap$%RhKH3NOQ+pG6]Q0E+&;
%c0*6:$68PC9)VRgQu.P0iVJN0=R=eZr.e\Jrp#AYYORU5B)0Sr6lql4nqYfhJaMJuf1.V-cZFR`b=U<@lCE$F`]ec60=j>2AC5Y(
%V!=/0W"2uN7"))>3qUfQRQ`aCQ:1I=!A&Y:RQc"2qP71<I<sWnIHm!fl#B;kfSP*$mB`3aQ#WNl_4[P-(h?34U-::JVWuds*.V$?
%TkX'&34^F^nOp/i5!7Hpla2"-Z7M[T@]ITFbV]oP";R06Jh78,bh[r\#cJlEp8HBEg0CPU$kPDG8aBV4X`h</S324TZ=!YJnr;j8
%qWZ[SU$V&8M,nRf[_/&q<eYB1HY#'+R%c:_?c@^r;YI"eAn,nfCLN%\\VSV=T?!Y@YF_`bl-0.LWUi"rLZ1rsDJSJYN`OlQ#U3qW
%D><7fd_%>;W+OetcS4b+VU61rIISOb+uf!ZQP46P^.="_Tnpn4,-j1:?6*di>b?!pDX6#;ZnMC?$4k.*ol$$UCY<:%APXBs18g?]
%'*Oe%;h$p[3n0trqZOa"4D!1KJa?kY*?_kqH:%X%8s6!U9b,_:3N"]c2TqF5Kdjm2rF8+/+Nbn=m02,FO555j3RY:M@1cQZjjk*O
%IiPH/4n!1$\\pk/?Tlm!dp)fa]]CkrfK+F]Vp3GeN[nogrQ7sqDF>5_?=jQL-J[=W?Wer:JlPI/W86%GUaRg48$_lu";S>Q'5j+9
%>3p4[?%%ZN:1)cdFg51H\D-^gm75lsIWL35*TVR1@uFWf"bdJXDS&>_hYj2HB<gE5U^85sOWJB84L$E[U.JP%P%BT<E;'*H3>=2+
%K<gh"DAIB0)T3NhqI:<!B!#J^lH4--j-=U9luK%An[I+poEN(*qaGSK!q(hU_1#jFi2b2apJ*KL)*^34b&$b9PD\mu(PVo:LhQHj
%WQa5#OT)*Ho/!0?jI'nq3dq]?f@;A+n8u?I2glHm8t:RjbJZk'LrFPqMrCt=)r'OkgU`isOk0cogoEdukj<^.VBk4*>CK&/ZIqG-
%rer+kO_#JBNqs</J*H7eYgZ9Y$/02D'@*n>=-e[QU.(%<JRM3H,da1l1L/D*CpqZa9BeW7Z@0!H6[O"?h;G2T;B.W4X8I?^>?A*N
%Ge_appZ'oTGpcaPKsgO*j1.&<ZUaDE#^A9pE&*;7k1=`e\3-LDna_XAD!Oi&NkX?9b9F)1e#i/H':'-+#26gb&*hj,2oGWfG14uo
%]%FG!g5^Qkk*NR>fV<a'@>].kbDSl5A,O"%&,X"g<'[f9EP,T1`GkLKG2q,J]%FH<\K?77h>8D!+4ZA@ZZC&,(O+`N>:h[]If/#B
%H!%]GqIs5ogI5sL^KgNVgN2_$]n\.-7?oQu5HYscg7F2!2tgfq-="F,@pBnS*nP;BH<_9@G!#Gnn$d[O`:`0%0ljX3nPcJic]F^"
%qD@#Or/9\-\9?X"j16)Z7I<U[>kcFrF6mn[K.=hA`)uk@,.UI]8]Dc[BG[ErK4M/l)7csaVpdGe@.*#`Z'`_OVmP9ECLc4=ataIY
%@D*XF:i^uo/AhGdFL>/YHko4SLY6rUOKTBbfK/0opN9pU8$5O"mD(Jo=0Wih]?m$oFQhu]G6AN-,9q.P,+R4c/.GX,N-m@/G)>jS
%ns(ped@XmA\cN<6@O[@tfKcCekJi4%h2V2XTP9bQ6Z>k-*Hs)F=e;3:GSr_-20#,EapA!T8(",La1ka-1=cm"[;fV`GN3jPQfE#9
%IWOD,4gOfM(1&'iZ%<e@<+'L:Y'b?b<dI^O:TXoaUP3&=XKW_R_*p"W,RS1XCbr6q',Hl:"JIO^O)lZ`<&@Hh6Pr"X7d=%gU=2![
%AKG:kp?O;R/&7fWksT=&0^CtMXXZO0$%!oaI#PP^9B_K-cq=?AQNWFZ#@p6-1S.\%VA&oUonNn8r>nTq?[hh<"=Bb[Xq+B]L7"ND
%*hs0UN6Y[JCdh%uHZrKVl<>!L(@nT#l:"rXk\d(;2<5g?M-3NQe=[Y-CD16XJALa!OI1uC:81=E5!`H#bV.2F7WK`42.i"h]R+9!
%`5:GZQ-9I$*)Lk;f[QD\oe]>]/!+G8]:YFj3p&m!FMQl-,,Z7Q!45.MF%lKu%"V"D!3ZCX",&2RI0E?D31J][H(*8fKT4VjH@&@"
%c,[IghI^Gcc$.fALLBTP"U[lVI9;"#TKXXB7lq#Wo%#j3<Y51hJ=u!:XO)5El3D:3:bdi`g5_2*9BZlrZ*:"t?t!#>iQKK_Nqn`_
%`#P?Ij7FE8jZhUngq_Va?r$rq"37;DDJ2\&-C9jX3\_A&5!]7',FY-r<gp^9QBEQXX#JKOGobfdjaIcg[_1=-2%X%Mo,PY0EkV5a
%nMR9JrYY^a6"Zf?13/Rg0e\,g!TQ<WVmO*o(H9N%jB'>a_LK;tG%N\2?hmnTF..%B`]J>?VS"b`mcuO7`;fd3^Pe_7LRR\3Z$ZnN
%m'!&Fn]!Caq5<+W?-9q^q3V-Wl[SrD5C\*1%=c.MFADB(hl\NFMrpi1cbjoerns+.J+>g;"i&[`=NArArr-:(m@XFR&-)Plm)SVQ
%F9O<P&9$&EIqS'A>`'4,Bdh)-c4-HAf0r1uN^p(pr4)u`V9pQK&l=H'&?/d/RSti*<U,JE.$]n#crLi^kcc&4L)F!6T,H]>kk(74
%"[7JIlVJp((MS^oJ5<@#m?lM>bF6ou%A$o'#KnG[X-^Q#oPk=c!c!dsd?&n&;u"pS,s_>]knTHlJieggXV>DjMLZqH8Ee,/]sg@;
%.qLSZlkBa[cN'K<AcY1GV(TeJ7PtlXhH\.F[2j<3B0kg)+f>_DLkN(dh@9i;;_>i%m56j8K7XTg!V=><(I3%*j.5s=&&lL_/G`He
%kefRgQ80.%j,K!H:,::S5ANUeL/`h_?Spp:`M8\6QWm%+LH*d*D/q/hW4LbV%,F3kFs2dHoD.[43L.4X;OuM%ku@Y*g#W'3L#tWY
%M+Z7\/^:9%ZHkXSqt(,jEb8)ne5(Idk;nd(GPr2k8fb1&:Z,R!Cor35]Q:2'5A]Y2fN7[KXlWtu"7RXEQnJX<f6>A#=5mAP-4@pO
%F,]E(phV%mltmlX^,u6oP0IMZQV>_eMdJFi%=(Db/#93ge6^Zn$=%Ioc-BEPrQ=Jc=@"f+PLf(o\=&oPYKbA"S(X4X[b7([AnOS>
%ZSQ)5T'<Sl6:^K[`2:'"r-X_oBOP)CqBZ=GmVB<f`5QC.W-jc_VRi!ZB$8dVh(2nQY*H#SJ[UW9`##>0KObW82`LDh-lLp&k"/j)
%3osjH)8_^aEZR!<ihHlnMh1-!<Y;g!ieeUV66aBR_BRZI@RtJ3Qulbt#s3K->O4(]B9,WB4bf;CZg@$5Tj3">lnS!&3.">&lnNcu
%O(fP[bXg#tg([PUTaZd>PfLUED2+]lkU,f2kE6ihaP(a;W<<u5Qc4POZ-(HskU?;eZ=qeo*jX.q5%Z=J+_<5K&h2_nd\g/ao:[jZ
%hIHBII'5d,]cQ!M,E3"2ZDG+j!Z4nS(83\&OAbh@i&Z0k[!HkieS>t)4a&-LeQ],$F_B6/qM.>9GK\:3=0IS.WlM"&XEoe4Z&Q?"
%lG\`_:]+&%T(].`O!WiiGg"+jIOGc)njmcB$3]M/En8'=&\19g?^&qfP;I$N$+[4`o#9@U?-H:Fa-b^tncuTpGG_3Tmc`,8\,"[7
%I?-gro>U]2Jn<]p5Qb*bbpMSr(-B\*,5>T=BiF@dHC`so=\Kb-:O-i*72qL]ChqN`1,8kT7n2E;U[Bf`_dAYM=.'!Ufa%4)(3*&'
%n7T:s5$#X,NWi]%/1p2Gam1Ter/86@U\8m_U'd"d67XTcHRoo%1)DOR7E-W*Q7C$<&>b.+W[6q#To/!2B9ZJf6cm(J`Hq,O<G(cl
%0F:fIk=XBKnLB69I:pdR\eIj`+\gC?ns!N1>-h@d+GS5L@_OBO-3c.of:g&H09ibb?T^&_paScGH\*3N3(Q8H8J\B<M-ddhEU6Bd
%iV'fH^%Pqqk'la'I!*#m^WLZugQe$<qhf]_L@EhF`:hW4%(R`j;.HOk*#4Ca$X."_Al&;4gDa1lf++tqgO??';RKR8[>kKRL6duZ
%=mVO3O\4OC/+4mcq3*%g'"#@O7?IZgMrAq=U!?;shHX3pK9Fe,?VtO1C5b28[:\&\bYjhn?b$JmOC^j*d:3%qFsBn\#UP?bO$OW`
%9t0lZl*VIRjK1>lEeeQjNNQX6Wq>Q&^;!%1g=`K`U#miG=4AQM25l;%2o:`*_;.Xj#b$C#G%>Tc%2rmcSMcX,PC6>4huI1:D5s84
%KkmKp<T3@fWE&KtiYk;$EjM9P8/u6/!>[Uu<epL2feB9HVnUY"A\t,cMo<m\6jI=p2,kp3BF.7="E"1qci<[Q_".[6*T*&CYoUp"
%c\ra9lV5S6QLPYF5ho2s3JiV+rV8>kL3[k95JM53Nqoc'XB_bes6JpV:8das:92l6XojeaVN2mu[=quM9nk]%%:2*ahr'O1F#S1c
%o-W'9PI[,k/n]>WT'dX,lu/(Z1IrHD_\Y>75f[QI_'p71TkS%5(:RQXlV)\A\(Mk/\VL,;6qJ.Ym\a6<\*r\,ffl]I!5iPpkq=^R
%#d[Y?pK1Amp"/)MrKcV+rQXSFhW&Ma,^^&3:[0,cbB#P+oTmd\%A#Hc?2,*Kep)%^27SU)c-;5850DCUF<HsH\dl*<DR4^nP]@@n
%h>Lh`dF\&RG0BOb0?1E$rCE9?^V%9j>[o(mPK]"])*DQ6e@]e3V,?!d8DUo)JEtUq[$5Vb(>@*VbAe=C`!)&.Go^Y[Ph]'E%'#X)
%VmF#3Pec/KEhk5/jb-^T[B?PtXgR%kiR,:7IN9ZVc/DY1$Pq.f\'9u0+]]R!=;EGM&kk[+P.8oN9'VGrjm7nhZV0E-,5]r,]s\1[
%Z/HPTAg+^;6)YHS!n@4afNg6P%obDEb82PGET,F7;cHkg87S?/iTFsA!,jBRZi_rCA)]?M,p>moCjCfW7!jUK[;,e74S"tQ>N_6n
%eG_2Tr3@EY_"Dk^Yqnb2qSdFfDPVU<]X8b^7MgKPA=IN+kRmSWM>(-I3&e8VD3GT9nggj`Y2HOm.e?At/4Ym0F\43N$n(9Eomh7u
%=;pbtMgBJ(-@6&M*a'C%&D<_].""@>NtjqHB)&\*bBj+1\r_6[-lA]+K-^t`O.h#j^%p=%!qLqIb_93@_CS[_OuQC_V&cJ==Vfd:
%`9U3MLDY7X@X*PiXt5f6QY=icCJMkkRoCnqcrWD'FE9g1]u'MG#<6)L%rI-Niig3GNCP;,?Pi>78cl]16dUI;_Ld6K74]k!_-YOR
%+tU@J?;d,>KOL?&L#+Li6jmCKDu!jFbdO6m])%e>"W3]4%(`=[;cho^m8XX;%5Udon3jsHn4*LSkb&Ec31QE?(OG"fg+7$18YF,I
%a+,fLGt#*?5]3n6a0b(NmRCF*9RO*/k#'s@:$S4Wp[d#VI#iRGq$)?4)bc_oJl`CQ.n;F`D.qs_LOe8CNV&a1pUWHRYq$4:hXl#%
%2bL$f,%@q-eYe3&#^3WZ9/?&b]1(V`ppWB_PjPh`BS(tkaPsF>?-6::0ipm=nZ`*8'/=8-NrUl-K*NO%mEE59h`_s?kKU:J=uK4n
%s&cP]X%bgmmAT'f1,]!h/%lc5H;IIr:K?0KUh]pKF$l#%_'^YqI"RL2LCU'\;D%STFsfI,oWU`Zad,jY2FoHQjI>A#2_#a_9-p_5
%3l]-PmnsPe9'f&?5%Sn[^1H8M<A_nN+"QJt>3o<\\lc+1GVO+%\f>HhqookiZ&nLr5Q0hRs4=H(K`(?ZDdn.t;(5ud;C/ie^P2Af
%/m!r^(.s+g\m3=qEdbX5EPF+&U%V^"TCM1VBAf(a?@<6mRN]Oum8+VBeJU$[D./bum>HI>NCWGVqGt_r%<n0GPpf3S$5nMY?bNTT
%8hCi(7*$g7!oL/Zk&bI>JEBm@AN(7W_5qT9<;+&reJX]B'd0BZkIgXn<5Bqg*U7+E3oe2h/aRMVD=KR:Gk_bu/#.I7*KJKRU_e4l
%cJKs8Mf"T@*5hWPpk;s(f@RVRpY2tqC;4og)6`H^,&fC20-<PtD91UNLUpTjc?M']$bIBn?i8)_4FDq!'lh"I%_kN3O-NKB/A_h-
%jIHK=-AbMNj(H-u61[q4OGf#RrT2WA+U6@X7OdL[ru%DVa>j3H.;Fu)6Lh0X>X2sA+a/tnB16.ORDlup-Fs[pS6@EArni,%fW0I^
%0]hn+5@='oRJX!:g(!C%d8]o+7Zf_=*(VX*9*qf^KLV_OL2q,.?I-B8kY9=rfRZ-AeFQE5O>dmmRoZ=OP=tT",P+.I<B-FG>_ulH
%,=Rf5Rmf+&o4q\sp7C,NS*bT!chI&V\eCCW:?aBAW:E(EKpfI"B#CQ=T$K#H?R=`!<?O9_q<cdp]rCbY:-7@_o1f0+/ea,/#S-Lb
%KL?!oCI$mr2%D"=XX(C#7ET3]BhM^7^O5B"4c<2#>C+#[DgP,=P96NDjP<L0mqHFk*]8HjiF'u.]>_2rS2KlaaiQDX^OGND4_mXP
%RsMfJDp2$>6A6>O:`F28Ot-?BA"8!#Xk*l%LQjl`L1re>IIZ\lmqFd48`tGH^8GnP,h3YA!jm/,[]sh#L"V4ho@.$S(U_)G-[icK
%doK+frq0c>l<-b@hph6lI:Fi8Wn?;!?R2un<dct+Pho@>;(<O$=^,.u1X*Cg0>Du&9g*8`kF6e3WGd)]haUXQb-q^BD]gPHU\LI1
%q=d,Qe*m8iF$W_JQ;<!$cIb))8',)Npr!),q]^>,%t@]e=5.3<phgN$DnWR9b1$sl^mdP_,F%mNnDDDrgI1hNL\WBrni5(ilRhN$
%P.phh?FfD!5A^em%-eU8"m[Th*4b+=$=eS=VO="Eh6m^"(-(/DD@Z)mYr9Yp%7,K`c5MjR4bE8Rk+:igo^=Y2325G#Z8cpdY+;Wu
%R+U=d`)sm$-kef-;9VoTSEshg9k^0.P<P#hZ6*X3aiM<`@qinGe`pWKTTfXA@sh)!"nX+[]C(@$"hJC;__V3"hRcaCRdBLlrh!Ih
%.F!.<A[,U-^6VV6dF"_kZd4DilsmFk*IYeI>>bY]_4_^Tn9M,K)eCLXW#/[]>XDeF[(SLHB!Ih5+)bbr43I3%I5++fA6\dq@U'VL
%mQ=pCj7n)&eLZ5)R7q+FP)0pf#YF-F+Q3q![81q9E!YE?Mo7Ar!W^L`"*)c#gk1N!o!+eH6Z.&b;kWaa'lO;K79fkX4kHYVO_cs:
%PW4>t[T"C(f9e7uHlkKEjFA+3.PZ-&eInF.Rl090;&"c)m0ROdG"[8]#)^d/?V5:?ck]o-3290kk`-K5m3f]?Z6q\DBZZiN$&Q)o
%dJOH8'HTZ@9\8kn><QO'*^iM/1aRLGe#oAeD\r&ZaAcI:-TGskr#QCr!9mDJr>0TrZ9M#P>t]qA8ee.Z+aJS0Yl'9=V4MSpQT]#\
%7=1Ruhp`]45t_F);_3XWU#.8G(!ZDG"*t(R;Y6d(ZW):;"VPrYaK"fi^=:/dXr*:O%sEpQVUJjVYMIuh=mS>Jk*?E-U>@6"2^650
%q2O&FmFM$Kj0=Zib'Pj?"(]=ug(0bU5e]4Gib^:ZcN7n?-.!9lJHFCAQnQtfZXY48D;VC;$k^LW#U#a*-[Wf*Ie^JU5GW$YN6E6Y
%7H`gWdL\&Aq`3k8GPKgKrMUYC[85Hf)//)TTr0=$+C--XS?6uFf$(mN(R(65Fbg0$r!VLfjJT)UlY@N(>"6ADB!-H9D#n[b`8#Eh
%8<pYIoBWj:ZL^!>FEZPM2WD-:R^gA>n19d:NXbHMlYF/HG/uYCIo5:;Gea/923DHoWefSuQN;+dGGJeV*9kpfhXs^<?gk7EG/h-9
%)=RRdC5C'g(u8'O[^:6CB,2.&,"Q0ah9flGcrHJIBm:I$M@5L9Z5'<7;dh'3ARhgQ0t.7r$.]+2AMQZuic8p3'N-/NLj(VL`r\\d
%mAP0##@/GSi^e#?[dLb3_I)k&7\pL<b(>0Q(J;YdMGflTcAl8S%#*\,LN[]d&!@)c[!C=;W]8F`6#)!G]g>J8H\Ftf2!R0b?n?U[
%(Fo?+[p:KQ*2["1T8MJ,Zms!4H6>n`9$ku",tPM:OLu_HL&JcukVpKicNUrZ'PTqX:;F_I>NF@sO$smN4Pbp;VW++Sa2XM!$eZrP
%.2NG-F\U,L`V(M\j3j^AT#2W^>aERF%^^3A@9XG/j[V+Z7f4S[CuJJInlq/'nXE&Vc`3Rl'Z!jMUflH=(O5]U]k`SHmTscn(V;0.
%*_mPegHZFSk[aQ#k^uE,l13D)`FL/C(u&7>rZL@hF</"O3L->*A?brh1-'#9R>9hn6L66j]E\)`1uDH1'>F'_m0U9+*b&^rCNi6k
%hO5%/%os/H,=EHNgt[pA?LkR;67S%^9!!)\CEa?L`Wj1+f@,fa:(iCTDL$\bLEF[Jo'<bYO5\Eb"c@^@L6?32+kK])QjoLs5TW@*
%nA7`Z?l[QPlS6)0AQuh!`Y2<GkR2hdAqel?Rm3DQ9ouLd_kDHPLP=HkCdQapJ0H08/9^1`YD'Y4$J+m=rWaO?n8=Aj*Xi-b`6(fb
%!1_Wf_R#m1f^RO^O?,Ylo%=-!;Z*dIMs;jb*UEI:\9bG.q\.@mB83H;?FHf)`/#M(W9-rGZraptnR<:FWlS$C#qb0$ZahhVX,)%_
%nMK6.ZWN)B=W5&h???>Vb>-m+gO"E$MRh>>rKf1PI?DV1=h$Qr\W7WIIs8\9IN7ae+pV*:JEAe3,MB6F9+`_c;&(5`l6``/K34HD
%DJM/igmrBkUF#hcX:n>ceJ7H2<BE0F*1S^:k_5&R4C57U=YrE^%_i^r35n`Zk!'g?M^ch)>K3E^n.i>mi@7"a*73Y@>_*[FrTO=Q
%GC+mrk[W@1VHC(CT(K:c:\kX6lD$os0Bc6p!V\u_i'p^&&bqFo:@S"D=>CmqQ"HCnEsq91E^5p@-tAAo:i`TG?BB%HK?P]h.agjn
%jFNuu_.#,sEY"CBrG7ALEjW'+R''tFTEmDVOi9Z%-kFfD9fC!$kDr&&bg^6G6(*;9WXH,*dXBuY90D?gmLa\`\tILUI?Y,FJ7,e#
%H:7MNabe$cq5E_?2V/Tl8Xd?)JUWZ-&(52<GQg](Hcn"VH;"SGn_OLK?n;n55ho&Zh1HQ'8LYb#D.4M``(KG$pRk\7k/@B^)i#\%
%jElLf0t=JTr(@Tr8t,O8bUpp\c7t\KUUrQH"iUItTG"@[%b(SdX$Z=tkBCuua#q[2!_H/5F*aF=+l@N_/lloofpb8Z30P/\3]iY@
%aoUB%KkNdZ4]sH>Il_L./ZC?O`_g_/hQ*^@$\e#>kQ]/5`DS9f0.TanA[JQ@]Z8HcN0bkun)RU`oqG-$++bt/*,:PQ0kGMVcF\D?
%0b!M\ijDTRQMViNX/XRg**t_n(/+HLL3^>LVcU%u;#.'Gk=jI1^R\B"dn+t3#l/tapEs!*oa3HnRBLKXUh"Sj+V:NqDb$i0iD9a<
%'59]i$rk'WlX55QFc^gj#Cm=!(Sf\]"*[)t6S=?(81r.a5]S7CF67p,^^'ai`Ac=61rtW6n.*u[j:cVBX@4`NbQtU+o/&1jql(4M
%?)@MNTi_L@JI!Q-NR46C]LJDDFaZ_N;7"<b9m*7hh)k*d2:,bO%X<d^%pQk?1n63QPQ9)ecIB*;T^X,;V4]IEJj/4pQSht7aM'oD
%B_L`c[%e0_oicaASqJ4,gTu.9I6>PTkWMu)c%1?>ec,%0U8Jh+>:,cJ]2lMXY%7V^buP!:k`F5j//Mtp(PbLD#tB2DoBm;?K09^?
%8sVDJqJSn;AO$pk0`lku*+%do2'uD)8;MqSl##43`\%kX<1eKZs&?SZ\CaQOO*6#rlAWT&4ZscYq,+a)Gc.&DS4WKfS9b;8"g^'G
%1.O05Ac_3-(8G_;c742\CPY;W<oBs1Uu7k#Nk+)WWh7ZYl:>c#$phYuYqU0qd$.GGfB!8tQ,p%tqO1VCUX[OSpu*\I;oZd<kRHou
%*.N1B=G4A76Z5us!7]L$U5:ggb4lq@2gmmF4N0Zeg\ib:#g/r=+hH.?rik5'!p-!LMAB;p\G]!ukpTTTnj$Z'6Y-8-!"grJ0XGke
%0JXlo,Blfnn7h^FL,Wi9>QPEF77^uTe"r<\e9gE,6,n(u*N,C+iW8NX1f%7@L^q5&8uUu/i6FomHWr10l2CZl.td&/.")ke)Gr+L
%f'NV^o1Si1=u^TddjP)r\MFDr5#<$Z_8fiib2+BVE?I8:#Ddj$iKVp/oAbQ\PrH7I3js'3l1.mNOj9`A"Tf-'buC'C.gV&qeUkl"
%eNrI=^6-8>dO.uR!e@uj$G3.*"91f]%fW*GK-juZ%C6%0eNSnP,4IeO<To$;&G]IP=uu[O,aT?2DdF$__qHiVr7i-X@mDJ>.0"hs
%,Se.+nS@#GZfZoP50onX8m]$R!8_NL<P-77r2,e'9mq?T:*3)]q`Qi",Yietcq]Ys\'9PN2+NsVMp035bmAR?(=Wn`iM*YdTiG(2
%Y_08nK$!qmO4)6Tf-"L7kWgT"H-<8i.<D4\:,,bGYE130]Op'IeWKcM8@1a(U"JjYR`Ek/+orE9adBbpfs_8>11\=[8_<?Z7#\KL
%JEXFZ[pVUP0fHhrD9[V`Q^]j+"rmdQ=B:N!GIU0r.E[!M^t,[_eCRCHUsiS6\1499A#Xfm)_"@!Uc*r<9[/jFi]&0G`>FAUHi)Hq
%/da6ATb^saWi0'PGB)\'d@Z>#ec[:X_p)p^#G9&LI=B4'c$O9US13sl>^uA[=KPlg.fjQoq6jhf0t:L%?DP0"Y`9Xe&;Hf+!@B,W
%d[1-90s.t0imE;NU<j-WV')=uLs(ll,+L68j#B-\"U1=K-Qfqhn1C(F+_kKn8Y\]lg+WurC,AW?l0?/6bW$#r1;VtC=N&V38JWJ'
%$WF_l0CP90]#W+:R/ij#km'k3)ft?QNbA]r<JN)H,._g&1/$#>I!!X>Wq<*qeEW2JKta];ZK.nB4Qt5g/RCW!c8C_LrOVaO,WFT'
%)[l3WE9JhM'E&&DU.)2JfI^aTh\;m7Lc$DB]B-Xk<Ehkfs"<l!.8C$SKpXo/a=9km,I&nHf=@!B`gTt&KhnPAj)@,=`QWTl0X'"`
%hek1%kf[$3:kMKF1"1m98>@ZaA$-Fc$dI!RFie9rMt[u[Q:kn_2&G>bU"<slc/tI=D%Gr(N6@E0HL:5Bb*p@VFuOk1gW-36r;k>Y
%F*:]B\P=441\^Z+F$S4'k1HFYIWhZe3%.2OrCZf`g_0!/YI%2e"<]eu.B'9^.;EVeQ,(U+=+L?@&KQP-bZTc;Kn:9b=?BX%WSs&h
%^q8P?R<!6RT&F!8Pdm9'BHG'seN%"E.Y*a@LMV`>"H;JMaUdJq/M-PN#@mmm$=F%OBQjUu(@u09Z!_'N>4b!IcknlW)V[l>10K@/
%)%5D](,8QEfeH'0)7F[b);K,[9UIG'\8PQn4Z]K;Tp3?dl;X!!(+gU]'>S6t.kQAn66?ZRR"isDoCcE#d%K-KGUQ0)pXl?'F6D#i
%rnt=Cgg+3M:)7N;8Gq"Npnqa!#Fn##0LT$MC5=GlLn&Kb*TF.X?XI1rac7c@quNOkdAM>p!8++*Gj%/#c.772$'A'))oJ/aU^7EZ
%Ylda]T\a\(h2lTnag$*,1mXF6)5Z3BWq0SS\dQP/l7TiaZsV\=/!kW7'"lQiadGnr:?mU,Vt3BTa2HVr:+&Wk1aaHartL]agN<9*
%MiYFr=S"#.78"HQ_Z5^oU=Qpi+;SX?1)t'`e%nD1(D94[CaL0SSgW\p)7_^d3na&bM38-C83dgpG(^1.3_)bGXTgVi;Kf(69Tt)R
%.=QoEA2*eu$"jiQ++sN+5G@:Ti$s<\Lfc;HV72bnM]M<Lc5[5!m]f@R)gUdgVZT"$fFJm360VCi,6+#t@?uU"%)mMn&,]]>\3OVg
%32J_P#WZI2%n&aUrdb(co,&aP&5neo,\.jn-r@V^($VGr%Dt;p#<luZ-d`la-P^7Bie1PFc9Z%tb+aSi!pSL+&44X+QQ&n7#?F9q
%%%*>'NP3$D@rCPt;Oh(XoL^2H<X#MbMoDe4T>-'`Uoj0B">D)'(66?o$6,5OH&+]2gD2NQ`<9J>&*a)9`t1,G+$)"`hE70dpe1gt
%$Y)Fp-1=OLOcL[1h-u`*8YY,neV?,OoWL(Jr9^F5F/&uW%%+T+&OP+.m/p:Q;Sus6K)*hZitX@6<]ft)7O"!TWu9*:3a[R'S%C@4
%g:%o"i#&+U=9Jbm^I"%!kci\*)WHY?NlM$X5.u!'%qV."*d\@QBfM[BkmTd)6jk0*b9A(0(6<_8AaZb*[KG<U7K!J7QtkKuer$@#
%)0d'6+'VZ6dpCi9_e@<AO_Y_+h_miHoYE!Sm]9/.$c#nE"@6m.%:RYn'g4+eZmsQZ[4beKaNb!*`i:A`o6E-<##?3Kdt4aJa-`#/
%)Opf;f;d<GAqIhZR;a$Hdp'p]75T85hqq\q;9%&[%\@$XhQ[\9K)HY6H%jY_8&$JrqC$E`Ccs'"HjYtlg^F`kdC(1,:NTmdfHRXP
%G1F"aR2"NjY`qO1d*<G^o<VoMHC18.C4X,=K>l]qBmbjQecEul;i/epN7NX>R-Y,9AgWo5mK`%LU2R7(nD/Kt8MA=(iC/;4KY4Mn
%M6ZHNHSPrQUF)F9s%t,Q@8WW#NQH[nM42<uT-+KsJ'ZN&VVZgPXp9=T]K2@?Q4S_:3RgcTVr!i<-,4sm5``.0_(aWbB[k^E_ZhEU
%SXbI!hMA2kY^/SQUp]EARNs4=(O5`C^6`^2=9gX#_?g&\kGhQk<2g-8$np`Ci"?p:h/_XT&aK]j7DrL?7tsZm_pcJgBZW\C]BU;<
%"Y%V'rPh0#8pB?79X%2LDbem1<FY5\Pgn'e0q=>U]M9OiOPeD&_')lMqJ$]Yb@neMiL7h;!O_%UUTQDV[NK_#/FJ$tf>A-Cf$I<:
%[`[lH/r5sKZTq^p\,mq;D$o"tk5e54]XG1o!QgJ"E[^kh'$q93b+TPIJoc7!W:SsdZ:!p$Fa@UP$?B'aZeh*(T:,qKTfLo)MZGh)
%>9nN7=^ZO.TA\16O7cTtGE4cOg!`&N\K<Jh"'V0-hP,.bNr&%\&f$Y!]*8"'h_HnA73iK(F.m0D5qsp!7,Q\ALJ._"0IE$,6qo96
%7p>lnGoMU9fGQ2nY:iP3Vb[i6Ea\M?_?'%SN%N9AB5B@aZnF_9pLSJ*r'M?J]V66!H*CE$3PDu?K3Mdoho[H6AkPPC85gkDKab17
%?em[e_$&t!*6<i&lL_3VWklO`a9Fbs>Q/Mh4"HDFRQeMPRYVrSR4";,*[hM#%'__Bm_*1jWN?C<LuQCk>SQT[SPk1l#*\_d:Y-3%
%eg-j8-\<k(_.;e:3Dg8bN=`NrC7luJ@R(iQ.lGOEH_uZ3ChR6C]4;Mda&rfU_'bFq1HFN[U5Su/fZG&S&[/NhbXFuhV:]mg'Se29
%M'@-5\lL^HN%l\5\mtt`!/fo:kXs5u=Qc,u6tBhAY9s%!=X]BN!&=`9hO@S*Am@KI4iO>N*po),d=UM%><KC6F'JQXCl8jKL$&BC
%fRMZ_;n=5M:sof#d(HU/]tsA6)+-8iND5?0eIsVV7T@hAIn*3KT4i#?.l5N-]k!PVPETs8?eg'6:@??T;gbp8g^sOKH/V>5NADp'
%P@,8RESofZ(`]@OKn9emY8W=0.T,5j2qN;!@sgcnNk.fFrX'Ncp,e41F`AZ.W^q+AT*qf)fMf"kL`ENqS:TB59[ssBjdgu4<)qLX
%!$A/0D_/P1l5e6Y\`ueJWAuUboKFZ'0K0!N)i&0-rC+WI(5(=MpY%a_;"-+JArFZ2`4Q^EA1Skur0&6/\!M@7#/;B#YNQLOknX31
%^qhdL2Hbrq`^JZ:9(=UH\.]RLE't/[q'T,YVTV+kh@HW%(hiu+T8=SN6T+$(AH=d7)'d$1?X1T'eD`Q.K0P&W28HnaL"S!)FN,Xq
%#F;X";Gg'Ga,glGAaD5Tkm5#*%l?jrYOV*&r`6&pQ=?![W*GQ96P8q?D9fJX'SBB4)FWOo#Z]7ddNG[qaKTVL?X.+hC'lRbp;]L&
%O\P_8Rf1ZGa@1XiK>/o:m[A0>G*n$2+N(qq?Y:XA(nKpA$N_.F-@a]n)Z\*4M+1^7@2NZme2Ad:5MTN#d<chi&N:NF>K"!2_WU-X
%M+-pR,t-mOE@(gD%hoLcGlUbId;PMN>?n;2[;[b^i\47G"5BDirFnc\pGK^Q,qS5.Pi?X/bG!6XZD+TH6,DqYBRYapfW1/,,/>iL
%]_#Co-%_@K^K$*:F@F%JcsPf_DQiU"*I^eX3MQ?'S=jOl9E+4r+tZZLpIIXXa]2WM08Jm?Zr&^m4h@-*h^kEp_i9eY'BlS)acU7e
%)i7Z2s,kUYl2oNE!u=%CO6RBFUa/8=7c$^!3+56/AduTRmh\hR@.tKMXCC9@Fi-"-IJNU5%c?+:Ci:$)<E<bL!6'_sbLjep7$861
%#>q<KOdjtaa[qe"2+pJuc<Xs[F)ae5U(!rV*"V3<2k\m=U\G-G-2T>j+)fnIoNTqfOMGhaFKbX.]>YPW&4VGjFRh_g0Q0)J$-7$c
%AlPUcL/^oo\@oVoGP<,)gY:f,C]$BeiFqL[N;+hgV/NX"q"0?b+0Y\"KtI@=/C1-Vd6:"RRQqOOmjoli'0`KTjG,tdJ(jp>?\Cj1
%&&,2`0t)`6Q"A`&Jc6_:_1$7??Kf%4h"SQeN/1k^X.PK>bW5IkNqn+l]$Ao6Q#U12Zn2DG8R8Cdfq+;^U#Z.'S,BD%i7LbAV%-.&
%[[Xr.(%5nH[uF2-iPmV(jn8(iPBFUkDmKDl[ZL=#6InqZbgbNiL]=[3l2EuA7<>P:WXFNO4+Nl^;Xk1X6nM`?E&T3Ci(QEEJR4;n
%(R7/[>EdWBP6[;mn6dCu?5J?Yes7TD!D0$F_'H:-\jL\@o*bdq&[ZLBTAW^)G(<?%#f;BEHHpJ-Es)\hkppAu>cR1TR?geEM;rE7
%;M?qgX/BYA>O([aS</F@`#<L%@b["C!Ql>tba-mD\WoT>QKdHZn7.&7.n_L9qQrfS<`tSQ0mLgAdja=ji3d5:1U0(PAr*O59L08p
%:QA6c<VUMi\R'2[G9EX4<n,CD)7(o[F;A*r'g\'q@EK?]NV)D\[7:Cf&:-)=bpE\A/<E^7A0Zfm9Ja(.M/HF87p8M_&FTTPaIo$,
%FF&ctgL_bsUl7/^f($g5nJj9l77V.>g/cqHUf2EUMI%$L.s^ZlTu&j`d,E$=.I=p;97rVD>61>4jVIGiFjLm>_-?IGZW(:f5!.(*
%A3M,<<R.#b*Ye"@;cZD_17^D1LKD0F;hL<;i=uB"p419QnIR0.YHQ>ZoWSbW^V1$dN!'F\hco`76GuA"q'P9mP]2UCkPXP]F?*:C
%3:hG*-p0_D1&Ucoo<K>cOf!IF1-1>H+0Bia/IoQ,HHdT@N"2'F'M^e=3,a<u,nsA?PXFQ)B^eM^7#AH=\r'Ekpe[rWK)sn#*UnE?
%4u2T8q@V5b:spp`CqN3R@6Q]pFk-4S>!9eMgMp7sGQaub5j^_7l;_7Fo`RB0ah2_q./uSR4V<J/Mht3cm7NGTc"jo:.@>/\k4C2H
%T_`2]1Ss77@r"pL_KK.PY=MbB$YF)N/j4IVE/.W5IF.W^(BP$+]8?6-o$ENO,c'O&>.9"C]oNjlaP/]l%O;:)("`i@ng`2`El''k
%(e0[QA:Yr4CBt%p-ks!p;An7V_&;RaD&iTc&c*2n#>"enDFKMj%n'Q,0(b.bJE9f!&b'jfQ.)d]Lf[/j>""?+)(dZX<=:86L8M[G
%En@hW/<QUEZFSVEB.QP\r83,AMpmSF>D&'lj]+8K8YG/e@15.2$cG3BYBa0f.MLJpM+PQd\mgrXIF)QP?c:2WNL8(WZWol&8tp6T
%\&dD$T5c@CH^5&-Y'EF5eiRg`'=h9/dqak+PT]%6S.RbEc08q+`m^Gld2Uoa4[QJM[rT'FNtK8=$,nOp$gh2h8SNJF'Q/_*1!Qs&
%0?/Ms<$6=5dTr25[FFGo`>D5e*kCnYVu%.mhXV_H-6WS];:WJqlW/ZZQEsEK*@UdV,e)7Ibp^(MZRl>N@)s+mpc.!-(H2kE&E@(,
%V9s+V&8YFp+)[Ekbb<g%+nKe(VaL87lRZG7/GVkPElHFl$4k0Kdu98f\@KlcPissFU'`IX/(UR)8ji5Zq3=P;+u<bqP35^l`Mk1T
%BJXsgL+-85ol^HS)[&8qLEpENC:`uQ_J1F]0+k[t0P+ph4tO00mq@$*WS!(Gc=@,;e&_^lM(lr\_Rs0Jc_90"p9A/n*fIj2O.>8(
%VjI8Ml8C'1FIW=?qqfo./@?=?,f6P=.QLGL<,5=aP"`j8&L\/70Jh`q%3A[B$,tq.jH=-'PRW`=QBb1pdN#/CC0M=PJD$Eu/kq(9
%,]$SXZV>'(B(8c%m:I1iQUH%c$&H8n-'c]Y()S@qUTu`Y[bFG;(,aoX*VjeJVaL;8b<&-4)C.h3V_A8QePS;#AK&rI_Ke;b,I1A8
%1A0W*W(515qN@"r0PH>1M7LkXDj6F_dr;NQhC+`L;gJaXqsm41,.$2\:&^3K-_H<JW=f`p6?;hM2Y(jJ+hp#S0<J4_(VQaic(G+]
%e'6tpE^o.39?j@j3h=Y/<YQa8W+e`sQ\t8,\mkc=pRKUe,;*^uaLk+Jk0<<`<'ppj(cRXG+`hCY_c)pL+m7.E!4k#oNlK+"1`jjd
%:\55)1gBL3$t<;2Wq(h!p*hWBe2FHX2':_Y/aqBIK(*"$(lF)E_87Ko+>#[&\@omlY36qMe#+]W?."^::4c;m[*@Tqa52_eC,IR[
%:!kpKJkOA$*9H=79SeoqqpM*,F0CY=M)l<bA;I7_fY<:`T_u^CQ&0^ceDbO11%-hlc.P[*,rI08YT03n0o+7`XE9?>Rr80;#j<Cl
%X$_";&R#e1H"Q:PFS!upQ0H^87H+;Id&/aoVjT+@UW##gRHU^^.&r4Thqji4Y3[2;j'R92jd4G_S\FG\/39Ik7uN9sMpPLb=0q]+
%=DEchbGnfMMnj??6f?/n+;pj33O9lWH*RG_N`*bW`=J=R$MQ0@ASZA35q(G:Q@3VH,6FgS4IO.f#%Ip4/HcC,=*ZRuN-hj0^%K_@
%oaDE%`PE+,F\u&6A=sTn,&q#S@rUpjG(<B%T^PiQ>`pT-F-W/'c.Pec./UpLXa,6[IN9o;Qb+fJTC2)gDa.nA.mkB>/O#(kqW?TX
%FB81B4JgFpP7BhYI#XAnUa^4p<2$n1<E'k\Q`>'<5qZ^]1=dVm;J5i3`H$s69s=_>O76aoG)N(0;tEt`#&J!]'IJ9b]%C,9g,;D)
%P=2H+C-9ZpAFjkq=U`dr$&"I81?c`2*/nViLUan(/cl4ADI>MFDc,P"Y^dGlC+jJLdjqonQufm_o).b-:?V>GQ,G6I0^gag164FJ
%4NBc?2(2/VNhml%H!L2a,*T=*D,.p<3[5rR1H,Y.[o9^1$kkR>>k,gAJi[Yf@[V%2KGJ>R>I^"^LoN)#Jm/UZoP)<Er$(8?@uKd,
%@Z>Y+5XSTSg71AFR[`/j&"*f"D=_l6@B&2\OK3Z)TF'1EVkGLic'f:MeLijq^GYV'CS"kE?\eP_]us%Jl.8\Fp5uG(.4n;Kg8@TJ
%i7>Ps"tO&5G6SG^Hjcc>1o9bgV<d:o/7&%)Ueo0\Q]K'X8mP[gOXLGA\"q^KL`$"5\Yk;q[l8tNSH^74pQ@$2Ibo'C5Y@_sVh@88
%G^f0:D`$"p/?R2Ad8,Er6UV29=c>f/R68\4Unp/n(P9][/1=3;CEVL'&=3a]bp=FmeZ&#qKQ7iepX_WN&_!--BZ6A/eVPR((dr>i
%i2Pp:(sql.m='pg0r!W'<=mCoDBr+)YdE3M+;C4ZgNB5!!Nmj9N\cP766%p73(Bs:66lD@,0-Um$@s:iQ7P1"gAs_k.j_F*WY?!J
%MZGD0&1dIETK`Z=>XUlCQ^An[N_kYY>aMZE\UShrkn(H3q/(;Q_l>LPDoYDj).IZ+AMT]RWJIj2@d8WN,/QD#LdAYhe;0aS;l<d.
%\^AGUY.H6^rqbq6^RdO=\T@_"ePol@crS>82Wm2VO,)H+J8;al%/""O8Z:F?.KJufmGH?9<C0(o+tW+!n\SFJ48H/-7?_6\B8RcC
%EZ!(`(<TalP"h>*:A:3U+(k32=<$!-l1[lL]>cKNGA[lhn"dO/;>J\2@R0qrD`:Z1agR+%3Tr*KC\^B<1uY?`*AM@lU.^*_9CXrV
%-`/K0k^s/[;jgC"4#;O\(!'j.p:F4hQb:&'LH8$"/k`=Eo/iN#7le>.elkKbL<pP5i&FWl`*=*is(nE,#&6gZ>>eO[M(B::FX+c/
%>/mH6/<rS-5U%s>hj4mQ_@U]+-pc<>7uCbaQ\k'@md>'5r?q2Xkkn8t!;(o-96#mA7eQfr/KY*"E.&M*iqb.VjeT/X8-K67,<8'@
%?q9)kcn)19$<UO$0%(=&8jq*L0"!FcKL_[&U"KFG8#7+tbA."1JUBe-i,imUjtZ%CQ_i?`q45h"K:LhK\e`JFH"I*ck.J-#i@0oT
%^8AZr9RCn&l"VrFPbNa$Li?1L`ZBe%KXKb-BnUec9GqPGqWqg.GXNMnd1Z;%@:ce\M*"Ksbs?8sN`h=?q:6nO\4Pg6.d+NDB\3hq
%:kb,RSp\sl$gFPf&ES04-WOBpo@[d"k5"#(Y1t?)=_5%AjJ"aP74AX`G&Tq8Ll0'5D[0!m,?r/%gLM,daHVGg@1DVe.BjJ01cfX7
%bM.Cm&T2eq_*qDdFGHbUr/jU]nD/8%1F<n\rT_4hH)2oAdaX):U3%3Xpi61M5t68H=]EHZlPC@b*'L%-LjE0EXY7kjU]/W?+tlnX
%n8B_B!BCcQ5Mes`EJl#6?QB'a:D^;N-W+X;,8!iR<VXh'H*^"Z2:Go)J/P<tip_Uk]",VO"l/g3!q,f]h:`mmKYR`KXn\,hc:EMf
%52%!%eQr9]C)Vjt7Er7PBPWe]NX,dlQ!fb&"ASq1`1J!Y5nm=!]+jFDVT`f&GV)PuN+p5o&uo)s2$d1oaAVZS_+A@=,i0Fu5Ai]C
%$.FNuXkEfa]qeIeVCtpe"_`bRAbWHsF\)U3@r;p)%V6+cpT(ekHZV*SP@*)a^VlT\G&6KTdi.RkVeGn:oDFCj=Aj=Ub`1SMjE0a"
%Tbd-9Kg#jb<`Hr+O.DtYePM+0[3l[oR*%oQ]VCcg':'gEQ&k@1;K_-f3Q60uWJ1&j^U4-;^5,RtY/$Fb(J/C'k;J[JDDq'aRriUJ
%=X5KB?/>uL#E`qZad[;;Stctl`>[mYj";*jr;dT;oouC9YUUsGZKp)C46$dIS%Ege\_UtZp".['S^-Um/?ps61ih8[m)nJG/22-S
%LP^q"oHmK(1tR:n0!No(P)Jo=-7.90(AUYLK[)+<QL9,DA++lbU3N)\I9YOo8W3q0Tl_*(;hiU(-*AhWk^`^u&Ar'.KJ24Pr)]5j
%/CRBg?JDT$L;-3urq6\k?G#Q6?Kt:DTr4)8S^\0M$8&!YEpd7TAtE1l[!K5QT>;g+q%e*_,+*T6R+bfb)H;&#hN3JE/#]Ga7,\]c
%`cB:s5V%3%7bo@*'M<ME[3o$7CQX8]s.o?L"-soJpQW"^o9nP^NZIZl^Is]P.Y2f>LA."RFOneOLV'JM9AJ@PoBSU$T)*jN-\)*V
%FAJf]q>mM'<QN>!HdN.r,2<l"6)kg!8<p)uSI!hVs&+EQ8-M2W2\OMMnsBXF%\X:W9^cpflBdo@1q-E'FCLaATN&5Dh*n:KI8UL!
%&=B2HDQ8`t$,2e#ZFF'%TdF`n93R-)B@q;%Pn3@7s-[a0n@R%PA?Db(`AiI%p4CU]Wd@6o>G;Y;,Xg[gCYYs$m0+2/^GrjBB^.WT
%O.H`2=(TKu&?hBIUd4a7IF%d2LubO.JP(hkZ7:,tn]&_EHH$a+.AtA)FdM8C(>iYa0C$n4JZG(cb(9VpWpqaGnS#h8^I)YC=JhHB
%O_A'A`8UZjfhi/QY"Mlk'=Z8M4gBZ:#7@)lK\-N=dp-o5p@q47R0":!K%1_J"hQ4B2i7Bd=TQ0[(chKf8B03!#M;7HGVG,^&="12
%Cl^^`-P9h3gF7b)iMMZ57GVU2hW<,O%n2l2RgV?+Hf$%lO.>/C5-'fS45VqubMgh?">Bj?llH;dlGu16bat6F?i?_GW[kY*5ZF;O
%[e!_@@LjVsZ>@f),tBW)D(G]VBmnBP2^g&)D2FEIrO;!l!E*PU?<?e7>t=r1?[VCPDu/t*]sC`(N+#(VBE9cin*nSMLOT.?KjDan
%;9uYW$0gYLJ)JY33ooqt`?4aZQW1B=0hYra-B:ma173&VhcirZ-[aP_o^M2XrbpO8/D*P.Z>D2TYH;7r^5KdENWES9\HI*M^IH%L
%iiJcXfNOWWDA_:*T)8=)?5(sss0OH?JV@p@Qsoos!kT&4gG3&.Fb1Vk0,9C*Jrq^pQo7i"C')21,(8_p*=Wok<'r#gE:7UZ[!U$M
%6pR,KX(6%tI!W/]hL;A"SWj7m[XAZ_4&A_-N<41q@Q(42D-Q4k_ZlIX!2!'mk\S+ed;=J2giap^Bqke1#;t>Z^mHGLMCZ@0SaPN&
%;@KEJb^+$i/ur2.*j@.n'OW;d1YuE\24A=JKhW,t?j<W?P,r\*?TV<[LG;@oG\IF:M5SFr'C77&DIJUgeSS).mP%G.QuB8U.i-MD
%gI`-u?_?,2#l.N@KG+F\fbW-i:*JT=FKZetNnb(`!!BB`%d(((lELEAi/E<D/M^*<Jc#TMkn_Ip<bRs.=)D`/fjV^ZaT*qA;4"_.
%-aILh)TZXH:2W]q[Y'><%9Lj#dq@Q2YfJ)5(e2]IW[DsD?$,f9ie60jn,X6<UHa[TU1a"RqOI7`8dVA<VnFNe&e[/,m5_:hmDZhQ
%)kW=iH6jWMPk6^efjNMn["'M*o(aaeHn.l,mZV]-OkRRtS7H)tBo-@^g5r\$s/;]"*irc)4m"#_\;@F)C8c$K1iETf):d7<42P76
%S^:55Qe!!IBLMC4YA"a:pFfl;s2Ed+ObX9MiuT?UB6s:1._b%NX8;fI,h+K`#Rl;N0EOCN?b'-bp-3f]`kE'1n9i(CR=B7!RY;rE
%.?085I`s6npKA1c'bBUGn@)g'EC0]15),hsmWQPIfK1(l]Y[-B/Z&61NtKDZVk=t'oTW`;B\n-CFJ7o3E4TR>%kJAfj>ABdW&4bT
%*AG<KZm_d<,\F+*m+N'Ulc..L_bJkhg<n+RQs1s2'A[$8a[5_lJ\)5GTX@5[2:25WVu\/LC]GuS3(]=i`J:)<D(1Z1#FB_q#T,nX
%ccfJS-jds075$Wm)d=#q0/;^Q>++P`8Yd-CmYDaCNKGU:aXE%6GAQAa0N:#^51:5hs$5Y0;EK\m^g*8/#V$ng&D5^X<fe(I^bY7'
%>$d=OOG(Q@,<@U7$tV9Md2a\@kqko9UDIt5J.A;6nt@n[nJ76=6F/1bjcVbTB5reu-'!tQn!?6jScAEXG0Eb=-+`*ZDqG$fm4@Cj
%]>aO$/VK0o::?>noSB!/`'HRF0rrV29Eo=.X8UP4b6(0Q@`\rmC*^I0KQ*Ru7HehAUP2lKK5%.gQsgbW[it)^E$X,kK(75g_M>i,
%:C#Rg,YfVB-fUAC0NYaS!t2+RX,>>F-B>iIlH:\=k"+nQ!.jb:Em?n>ro55l!MpEBJG$*59u_!8S<kqr5L2Cm@fpK=9*o)`b=YT&
%G":bO$Yk?L8JQh`SV;rQF\0sc^/BEIjEZ:#.hP-FKG)87Q('gfUhdJrR$Esm^-A?^:k:)"[o=0`5*Fq53Ei)hZL$*sE<o[@/1"Hs
%.4;L6%+9XoZ#<r^,`9.H=SG-80C"W8RWjU035*]'Kg*]g`<*l<rkKA_ZqYh,eX>33U=4KbR=\lo656u&nQ=g$0%m/PfU82KnMaY%
%pWj1bbVU&b1mgSu22+(0aS4=bEX--kP>pIUIr$DDoJD@jZY5FV<A2lJ#FNn2$anO0"&2=R.;&9>4V2iAM)#jiSs"FC0_eQVW$gb-
%NaPrcLsMFbo!499T_lYpS.=b)5Tf';^15-AfHNaagh=p]+=(WM/EB3p92.S4.LOVbeY6ZdcK^(Y7WfV%cpjS<,c9eMS"P]I==_;0
%=&bWF8[6XtMZ&if1!BpN>L(>6=V51u"B:emVs:%_2SBQJ&XWg:+oGWBc3$O"WVdM4OcJEm>IBPghWj5aO*RULXGE?UqX&AuVdoRr
%q/iXuO_GOK\!h^AlA[_1(d+JU5YifL#;t%HHOOLaV*._h#p,EIaN"pn&l#1kQ-#<b5[Qc&(\9Mt>3bk$)f<P-07ktE^'s-!m-sX6
%4r*noqi<87;Le]Dg1l[/Lq>2ATDmgA%mOb+#.IIgq%CE:GBY\7#^,g(\W8]Q)CT(OYs9HT1\qd1V3&Yi9b^[YCf5odZ'CUH9_ju&
%>ae1u*!SnL06h3.!^%9^+cfX)Jc8]Q,pVq;4SfoJSI=em;cP*Z$6;+QC@[gR7;hMuY:h;ALkB>AH-@_nAQehN8uGVadE4HUi-5hE
%FEZ2E\Kg6@aH%Gj0rO^F14X'uC,_i^iSFjDP'tESN7&F*TI%Ls946UE-j->]EEGi#G0&2*)KU\]Rc(+,V41DVa8+DZedUAeSQJ%X
%\R"V8^XBu)(5bo&Er)%CZq<\F1'd9Z`"pAJE)BoJ!,t%$hG7&JS-iGGZ)@p%'#\)8i7*S2B[hunW[N!mOHYenHqmH5-gW"?(+QEd
%!hOp4&Q^+8JnMYamuSc+j(7=iX([O=\lnJVs)OHKi7#H2roHXEVL[;0391p&7AK.K)b&S\1athJDU/C:VH>A]8oY[mnBAjBLQW[f
%`i`nfgdNq[o.Rsi(\]Su\-;]R9Q,K!Au\C%?ilbUe_I>,Q1rk!`@C:_?EX$iJ%=$Cmce(Rs71g(72D#ALICLM9I.]aW4g\dU6k+<
%MR9')D`Wf-P,:-N(*n_cYI$iI#n6?g?9:#Sg=ue]p9I\Bj4L7V*6AF5>dEBoRZjF9_(ssUO_<p]<J5#,k"4@7]Njq\cZ5>&:X='-
%Q8a,U-$T(Nn3u/I&]S!@'2/!>2S?l4/_(be"iZhhMA9]InO6@fXa&e`RM4(BhPf71I<q[/bQ+(#_f2e8DFb:"M_%U*I`gn+CO/[u
%L(M#IXqnGmnYQAXM4uZ\1RH^O`nE9&DC8u%:mu0o3f9tn%=.KD'FcN\T3o.QA$5&kMnu<03doHf(A.q;6PCBg(rhBH\u3ZH3/^V>
%QpmUD",V#RT(t.IW<<MH*3s&:B&&;iWB+=KZ0H]'EA2G\Q*HVp)O!V2lNCmdETp$f"g9Lq.kt%Y;e\C@>gsY-_BBM2+_2aL%\.C`
%7qk,`ZA`QZ,UT>k4/AH**J=:\3Y+6HGc+R&dik7ll,P>"o+G8P;D&&N?eqYkWV4AI+cp#H3K`Q[Sd[tPA3p=U<R"11/G#)&N]8/>
%J^GSq_+Mmcik?N=J.X[@;[-?_V;!riXkIm6-27WVPV`u$feL,fh%J(#dPJ,I_@eoU/-E2kW@^@$0&Ra3NV]S(!`JgbCKGf*/_t".
%g&9@`Q;4p]j&M]TfIbKXifTas(5F[n".BrFY#*q-ji>B:\b)k2K(l&A]ij@EV&&eu[(;\^X\<iTQ"7]<P!K%&rn\dW5fh,"_u,[,
%Tk51:(iUWKM/l7'l#\(!R*;PfW3V&):l+i'$T\jh8%M(+/KnVc?2ZH3^&IV=f6PRph.>.5FA/TBqXG1Xo.%X^lca:E`G!fCR[Q@e
%j?<M/`j2j8V<W[@^#uh'Tp(r7ES!c/o+KRYg)i`e,WJ5u*0TX3dghkrX$tD(C]$hi;0#4DM)e,P:s>YJeu)cI3MtlCo[LLR#SC4!
%"uppL:2d)5\iDot81uXfQp\I.@e],K:5AHr%`td-hdL'=^+qXlAf1)FOsJ0Efk23[CB:86&^-T>b$BWjm&<4OaTn_-ZNI+\$[ASC
%$eLQZ#gG^^f.774d^pqfTnB:j[QNq)n*('3I[].C.]7In<cc$OQToin=/@X2i*9&Aa#3a9m=AruSSDU.<mgUc5mK9AKj59tn!2T%
%_%IXDFLYl()HL(<*R<:(a,4=dno`.b"'^GaQblh!o\VfU"O^RWq_*hI"=P!:7oWlQk^F.[?kKQJ,<0=;#u.(CQQ>7(J+&>oA`kb;
%5+3)fSq(&Wrh<#>Hh/A0IdQA@o>u2ZjZi!c:=&ijkHM245m`#-PUX*iS0^;M,Dj,hfuGAPN.aGIU4uV![X[hhn_(IMjX[:<,mcr$
%%X2/iF_iGdi?^."-Fa%8ReZqr!3%d9%0A`_cl.g>.hm#'eb<6d9'Dlen6(VQnY"/9=h/Da)[Wi%D#ppBHj56o/X!31<d3Da1*Ej`
%%*i`\.QjPJ7m!CjPn6<?N^OE)ZuIqBHUmWpGlW#c"-OPb_Z`E)qNDF8cQi^ZL/]4X`mDj/47-EHMJi[V?R>#TCRcgC_,NA(Ntr9;
%gOA4sJ\SL>S9;*+!*Ar+;hVCh1^]h#%-Oa1-$4@gG%\dYNQ;7@S'R`%W]f5:$k@ROFI+SAdsI_Dqo<T50`P3C#7T<C>IaFXTjYPE
%+'%G3b4j/%Ajp\K^,\7d&2\IPc9*[mB(0Gs'H8h*2WI8c4OGLA"BECN_BZ0-0nTR<h<c\PW6)DgT8eab(I*>fpICea$fb.SY[bOP
%oQ<S\H'Q9f?D&g,3*KU_]6.5EaN#k2b=Wa#%#(N#[aFoPb=@]i8lA'1,EN>\W[p?)N9WRIZ59QDkgc"m3u10<B:%QK!iHk0ra)6o
%VboomOahJH\X;.20GCI#GiLM'&l*)D8c9g4c7]VT:F"FEgs#k\]t=#A:d<jnoA0?^lo;Y55d\LSb(0ElIKrhh<%ELirj*Dt)_,@I
%\-!Xe!cSr>egZWs*"BPbKoH+/FEF;kW213A>*(9"1N=VUZ:ZYm_6s&I(!"2bqlJGA0E(^ps,_q<C6YZ0o^4g;='*_p#;DUekTV8T
%HsN[:[_>A!C;'4=FL$`"i>YCGO&:CL0'HEmM\M>1+IOb'"Hl`h4&UjZW/;c)m.;\l"sg1A:6kAql6XjT9IS_kI$(C/=?\LbocVtA
%:1YNM>p@66,S)=e7cZ:caf=Qt8/P5p)SdY3Q%hbZ)j,.DS?:;7?(M/o+mK^Rc>\2"qmS>HqI5Z@:ukqLDDVq7YMO%fF1?PkCr(1b
%>[W5E3`tbb67qu2X!gH)QL(#*+7"Zg;C5M5kd=-RN0Ce;TUZ-f#W*<:S4(`q^8?`f,fEB"koiqG2WI'X&Y^!hOX$&H;KI/\/qE1c
%lZ:05fbT-d(=L%0":1bfS'@cp;PS<3,V?T!0f3p3`QM4,o*L+U>ig3grp8=koBNI\VJ/BnX]R?k:QgL<42pY$iSlJ-4#hY(])&u9
%a/U!(f.9`_+XRC;f$6:P.hc"%&ic>57kOJZ"2uiaqTXNJKoU`R-^1u(nm?fWcSCD!YH7Jk!0MWu@N=+@npOQAJ*"G[rVF]U^ZggB
%VKQil+,10FM&BsUX;VFF[K0rb(/!/cq`cAm0!lQOoo/ZFJFHp1ioUQ%[$0cbD6C`8-%\'$\g3m&cOPX?@=r`^m&7+W0-<eko3$B'
%?ha/7Is^2O/oW:gG=8]/'1[6"^o93a.V!"V:uHu*#h,NI1qc8J)/AS1dm`jKbUm%8djn:4'o:[+>p;6TABK`oR5kD3J@oVG'!RlF
%<2h*SM(#nTVb;E:N"i,bQ=5UGad$"k>:k#qL1Ho[l(MZ!VbeK1=ZS'2f>]7>(js`e7Xs/&fa%V.dUshIDW+L&G__>J;>\eX:DWOE
%#cFo5g;Qd)gS`"G1Qqnn#ffS;9M)f*VA9.O?WWI0<l<3,[NJ$)Ba]NQO";F]fo%I_TV>dZ,?,2B6XB$la<@qT,3BQW(`gIJoJ&F;
%[u7!T(Ktj;"?sR[TjIkhL+u;b1l?OU$;F>hDP@TB`5+jHS[QI'Mc:m(U=_^>/o%UU<!Z''kY%5':`ih,$UDa+<Pe*R*>R8F!a+JI
%]GG;mh*-S[m%@=0G^DrX0+/W%GQmu-9J:.B<$;<u_HQopHkO=L^%OH#fbU0i!.hSp.Ij[I3,^',[1K\hHoSFPV`jVK+WWqREJ:Y8
%D$p74UP@sjoB:J5$U!:8\)UR1H_9\h1QFUW[f=,#S)54+(>B_N?(7$NY'0[@3;.1(S?Mhc]"]hW[2>ZBcsm*,mD4_O=;pp45lbK7
%eU/g0.NfHt_O.q,lX#&=fUI21:!P]jHrJqrVSYl(8l@42/`GEfl!l2`QLqS.9%^*U_p-9!V_T7_Gk:SqDeci/b4,5(So<m!JJo*4
%&%%I\S;kAN4-hc0Ed#mb*g[(I$W'4\\ea"lrjps6rRgF^Q?(='omC'&oX`Ip:1u?1hMlKVIJ(HZCP>Z#VFducO4JL>C;;XfjKu5%
%?U+7]hIihQHrJ?Mp%uM'$2MnF<"L^r-J.F;PbOB<&>clHTJQQI\d:('DW61"^OGND4j-I\RsMfJDgG>`'cHFn%]V2&d$q&VU"SR"
%___N.9]:!`;0!A`YJX3S*h,)ZJU4.]TqLi&_Y?P3i6Xn\RTrfQFN^m2%&sLI?)@LH:JS!RV1h#S-EL@p20&0qF!%eLLB`/b1"/4h
%7e.=%eUTE]du189dc+cdR*hVG+pJ1+dK-HA*nBD)q64OS#R[9`ar!^WMMrt&Y`s?>mqL'I0bF_fpEahiAsL6c#-fP/ND2l'Wn`Hf
%2#n)YEK*^Lo`4QA:JIu4aRglEnPHj8#e@8r"c#sq:7j/l&h?,tY4"5d%,3'5=ORCYCQ%IEe7VUS7DDMMG?qQ'n7fi7@+Ximg^HrD
%aCoim()^g#)e%@Wb!Z4Z#E@A%b8U5=Rj\4,+ocq^`PciaqK14/M8`4=e,]]a7e:Q8Vo:bS5!$\'_6e;lebEn;Y_1N!^$%<O*QZYM
%JTIXP$>!R-:R^\))"#;gE(U*=.<%97(183bqH7bY]5`@?!Hu-s$=>*)O*/28mpa%l1bAOSLN%SgcsI9i>HZ;]))'1e%WtqNMsL92
%2P9X'?iU&c:OfIJI]IE+s$+0E1Q^":s#95Xc;F]OOpb0F`:p=eVD-Sd!S7[p\G=js2?L9b@l)<I"Y??H1;>q0KFEB!$!0Rr7SM1Y
%$2[7>#8WYN@-i;TQo..7`#$UA9VFJAH%Kl>bY/uB5%:>Rc5S&@N?-dIQanP7V3G5LG64@kQ"i-q"AdtA;3j?@,-PI7p;qm=6c)aj
%l*9oX`,;t@Z4&%:W3IU?dlG;70:FWjfT9rk,7/j0hb2[Z/c8u_g]c)j0Knbiq\Nar(qKI'f)FiCmjTUh_W^DRW",ZGP><;o$3E\A
%+cHaN(>+foncKuQc`CkcNY!O!h;<\=V(3I/@.q9qS1,sG<4PhlctHmBkIi78DR/".9%#c@/E$=3,V;arD's5HP;OJcG9i3@0d&b*
%<RD.j97*$[J*BmaB3I#H0P!R>(!t<kAehmJas>_1O:a7c>0cdrD,L9?9lp2gqL8J(=*l@kWcqUm"N/-,:+X`%\URj"(8gnZW%9LK
%^pi\m>$B<2D)J)3p:9SW)cX4+GkJA["3*,eP?-@jNS31c.jHX(Oj*QO9WWbAGK]S@IP\jajCHL#:lJ]j4Q(\.h=AO3SPcP<q\3c_
%;IA=BZs0\/\/?sc>"?.TrT4HJmdf88ikAif-[go]]`>0,F\EiH2ZI^[Qr(`UO8rbnb+W[m)klUH@_o@#<7RG.!<WPI%]FG)_RMfJ
%7oP=[ZF0%b5a']g3I<Pc%//=HC(L388<X]#>Pf:^bE<sPgYAtrQAHVQSG,BfQ=jjcNVgT$6X:IWF,`[3cF4.)DgOHP<7N[SrPF5@
%ZY./[q?#[4MLaX6[ct%<:(otGJmM)d7h9ll3&rI]>XitYF"UU/\%rUJ@L3U:&-)H4N#!IflD5"3$K1K.nU*R]DNS%$[JY>WIgfn.
%E8?jJ>qB&igl;3J[R4=9IrgT>+3q@$p,>+(s76]_q7g]\h[72<,D)8:hgPIB>k%dmVr%N%bd59W4pCq4q(&]7dRtIMrfCQkbJ2XF
%k@jnfq^WK^msk>uJ,]<%s6\->TDS&kh_uKLrVYQU/DL!LRZJ!;q@Dna[[#&A<oV;Q$HF4`eO'97?iKGbs7d-)r',!>r,90VQ[;2,
%$-,:05G!9#j1kNDs3_s;p\T_qr4h*;bJ+dp*P:Ec9W"-CQ>_6fH@DabWCVOb:;>BMST"970B0#kh#D(ma+Mt%Mm1b(,Bs%(rVap2
%p&0LMW7f&eW4H\o%DdF+NGDAEZ44Wh#<OmEe.MjpCS+sddf)5THCU6@0\ZD1Rfle\[9u(jO2KO<q%N]*7#'1MG^GO<'8#+SmXhgU
%2@[20d$G?QKB:.POm5suI]tB7;Xt5NCH-LSY>TB"0e0A9qBQ;-LcP(IL4@=]=bSAXH/)1pc@]sA'ce1!7JWB`i1\h</17co/+YJn
%;"MHqji7dN-K>AqM=R\GmI5fr=q"\LARn6A%CC&[%'qYN?%"go_B4=T:FC-36gO&UKVuMF%ro'=I^F0cV3B?\Td!)!cjV`Y)??9X
%@i0>Vq`HO05*d)Xn27[g]7#\+Z(hHA([]P$-dEeb8`X@Vh:X$O9Y:eW-7d&=VN1G1oMbQp[f"E'dYsLL;66muX-+r9Fq8)JrKAP_
%Kf*oRHd6pS'iKC-#rP3pbJ7S4VHotQhFLscRAt,:G#'T.*c-FU&_Mt)%t^9S^,^8@k[@9035Zj-BMnfZ-l-KqUpp&^q:M'>Cne"m
%rF\.Lc?o(Koa.&@?gj[&ZJB#g?#q.d+9+E$a>8PJc7.g]0"j@Tm],uM?5\@tZrS<A0`R@h6rmnd/$C@`kpQkd/eWF7>EN/A%(l;.
%hE2c9Q\a3fOr*?hmiEV=W'e;V&u),fBJOC9+fP41Um(tVS\uQ6J@W#5g)CK>blAba>mcb"/oMbbAdR.R"GElmlGg]*$(_bA+FL)S
%i3>g1[\dJ.Yq$p'mjo95r:Ir%>M9pU:95-l+)Wb$NNqsps7E4=rEm<C0\jC-WT5uRM^piMQ@@=Lo@9\rfYfQ['G]%o2U`!A&KMKg
%,Q?7H$0l7$UWk\)oBPa^1MUa7X4k=ma([1V,S83%*rA-`!qf4`G[oJW0tX&Y0tj"fk%m*Z0&Q@(43p.mL!Al$3Y.5E[JT=_SMe43
%JU]oo&2&jnnB\.G6%oC+7^08RHh_7U4@]@p+kXE1AfafQA'2?*fPb4upsk#-[q\+:`+cD08s%GjG@PY!<=HDK_JX_b)oLQ$NC9q/
%r]jt0!KNg..j]pd?YnrWXuNUEP+YrK*Vp*R$0l6>=<dD,@[Y'Ip1!EEK#<&_2k2M^F=D-O.64c@W_j@r#Ls]bk"=;m?%d^q;(NKO
%,eep!E3AV-&8RYNlr=c&$f5p5QQ=Ts3>_<6W]L4h,.kVLJ.h4p%71>FZHUoCD/1;O"_A,pUe4?;iFL$+8V#o\E.#P6VMYD*>petB
%CG[G/gar*^[FHAj.ehT'4>Y72X*fG!q7FChQRoI8#Ae8qabZMi=Ti3kD*ikRl7<Pa)[\$+;+Q9//>]6VS7PR:Z%]8]Gmj:@#V#Se
%&;qbjddib+a5FL3G+BM9;F*i3(a>Yg,\TdYPdD:DWl0[Z/+oXjbLO5>W<j.q4%Y(C0I0H\/0,eY!+B]D[jAuA1);ip@TW*'::j)"
%l@SF8?s1iF[TCf]U-+jgP?VqZ&gD0m)0;YrC:=9Ekc4fa6_CbTYlT,<=5`CDhM<F1T!jtr/fN%EjU5E`M3l@0-OfKZeqBO]6^GkC
%c0Zg':<939$a<hA)+;ce!L%JHYWt2Dgq&h!)_u]o\XKK>'O%?'!eDX)$/,Xt`'d$1)W9-(Sok<u>-J00FoqFa.EGO4`F[j]M$_o=
%iJGRk^VVTA'_KgK%cuYmWI>/'pQhu(g+i$#8-t)ps3J5uS6O$XhDtuH[<OdiI>NKRZ=n\FaYbZOScu3UgW)/d"N:_<(,VV-@9[e4
%?-*Y7NNP4R:=6u!7mb[eka"0tU('MAES'>Toduu\d03AmRrE$jY2P"!<mklb@KIM:,UG"G>!?Ol$:tF$^h;iaP57#'E=)VP]4$t?
%Wj(rnr7\g4:juZ(QQ=,*hDLLa;69l`,-S/(=ZhMCbVW-2"YL'1;\nq>6r#cjVXk<g!1TZcSZ<`t&m*>27IdFH<AF0JE#7CoL-ntS
%IZO)#lH@h0:9Skf]t\8m:G6@]>pVOYAV^.RMd3+\3XU,,H=slhORk`a>Nu@rap(*)&ld5Zo:4Z'd)hs-[Kr6E*SfM]>M9<l\Wm::
%\(kMK/935RcU5A`b'#U^B[\@%d50]s>1tE,pK<Z3kh\lJJW_7"M0'@C9'pAOB1MgY%P;'oGs<p<nD<0=`\\GBK<gq**G8+q3K]E]
%&"lML7oH!*3],`b\VIJpb!n++H.u[$M##+sddkKhl4oH_gH2.`p;(7[L:/lf_RE>#R%(b/k/Z^5:H/)XDY!fe=L'Ie[I[S_nHQs`
%Y7'_#b9>PL"_U9!3["AlMEGm;6pqqVV*$2Q<4OW>V0_dVAdMk#o&>4sL+ia(.]D#uQL'g*;Z13Z\&(ZB/gofpeMXHoJ&0YD!5`9[
%Yn<H<ac9#Z1p*p&Qd6j^D1n]RWHIf!6)S0g^_p.[e8\J_I9nV;",.(dEpR?0%<Y="CM'rS!VN2oOm0KoBFM`(=AAi+/JRPOH]rd$
%MM@&@5I)n]7^'!0M%:9OZ>$,s4L@rs1)OUhT$]#[qM7/ujKuX;/TqHJlbEPl@`G".$7GP;J>M-c`2D4Ym%JIf\AorD0>IKus8DW"
%?V]L*qVDa]l,N/p+&ZH9[5D>O1N2faV<crAbRsjU"u5&.Qt-`Laf#S%/u@=j'7/;#PJ<+*r$3Ts$qiM(Jf$S`4F5f6d115)/l_(U
%q.8\6A>jp[X/tW+bEqPekRM]t\Zr0q\<V08;8ep9TSiM*\h1kZW``5m2J;n(:^b,A8En6Y<4QQ><"\kdK]8t+7L!3*gH,J46`98'
%dA8g(Bd$C>lqIoWo]s&J!R23ET%]^/mlI9u"DqQiLq<^9]CQI5.U#"3N`t_k$hT_@>kM.D"sLrl#`K/QU9@mhSjhJKN"g]kDUX^j
%U8ZK\L^^qa0-Y>,I>\7td"EF7_D;037F=J!ZY<++%OD+`,nl[_Qc`HJ_*n$ZP"'!YR<0VeW\L5[+-&7.^=98;SXiQI>F2d]]Kiq?
%:2D3`(KcNC-s6uR6g-?r/X;dCQ#=,2:mNgi'?_.2,2]GC3kO!aCs-Ha%8a0QnH`<S_KC$dT9PZ2F6,M4#O+0"V?lUM3ZAQG`g@Gc
%fM>>q$]5`3n)1Yi4g^U1qu-A7N5bCHrd;)i4moR&H5Ya*$f0upqJh4,`Z_8tn@FD-jE!_PNij7&5q^S76e<o7-`[6ZVpO7R`3d=(
%\kj?1c'e<0Xj7<Uh-^kkGl]pWk/=Se16tdf"oJnUlb+/$";tfuT*>,F!FG+CGeK8RP9RJ;I2C:E6IgG`".pUTmU4fB?>*am6mEsb
%:>)'$)Q*RJRn3f6Rj!D5BU)830@GM>dH:/R*3-#tqs:rRP>4>aqOtZ@krBDo%r[e'&G0=XRZ$*u9(h>?,\GAcr'f'?=@)_d3.N0R
%BMp!Mo?!d<nHT):5h8HMp]rrEMF3h39@9YCQclE*,"@f/Hle4:F8CC@4.G*:D'08E$fjP=,r]`bOs2=rgEHe."DA=Z(WLW\(9!G6
%$/-`@^@T!)BfBA1=OfkZ(r"\0qB.5$3$7V%6R*`YBD/nn'pbTRc9!sV"#4,gMG6660,dAh=_ZE^:^Xle<N--L#]l(r8l3-ENDl*O
%S)d[Na,:MFVE1F%m)mZ*ZH(!7Ng=.LS]9a7q?*9.;/A,;q<)9Oc`AqdWpVV(ffnhI">QKih35#=hrDbq"Brf\V,&$NA?WXPWCG=u
%;<1:A@8@=q1WnFo'lR?n;Ok6b_+cl;Z@2FQA-@"2`#AU0U_+5_;07u\6@,8o=mP14=@>%>b0E<e>WR?D;I5au*?8l^`=V_#YLYbQ
%q2S0l9]eZBJ_)*a+K/#`^bOg*T$6`ZgEsWe]_XTD>9BKc>#/ntM[lkLQ0`u='kWrnr'OoC!`+l@!)ude@oZf0PMH8`OZ9.>?Tf8@
%*%$=D(KI=C<<.F[amo^TPuZC"H#b7+hbY"=KQ.LEjrtXR`66Wk;`>:u-5<J/l+NJ>nXR[@o9#ACRgr=b^I!\Qe7Y-1fu<d":T*QZ
%$M1M\&m%o\6.UAD_I4kK;hgVKh(:ZiYAC!IEZtS0>p<N?W@,^DJ44BC=[;'u&`f(oL=4m-XrjqunJ$<WYLcMYO`H(OY&]FcZ3Dd)
%dB0rX[%7c88")pZ$J<ql6>ICJEbF9Gm%P2"U_jIU3l-Or:V4sj&up:q;3bsfo)jrVdE=8#_4agHa<Yej6mQWUa^@QIp`rB]:qNE*
%Z6Sf=FtqJL6nh3oW<u_g+->cX%WsX:[QVX#h!QVQpp>Bq%\r_%ZRC!06oi*2<h7H7BEa+\862SPpk9u$.i"bpE7&86`_$El0K"'7
%]rL"(EFl2@DX:/uAhkeugG1(4]uX4`UM-R$5_lMB&oDb;EATs)rT#=aeY3,48AS)T_.8?3e8<^E1PAdVY8m4-eXJ@">GC$C8me)c
%U5p04<MLmIS`mI1VDA<j"ULTbA13U[i101/6.e*WXIO#1?@n`Gctp!RqeR=d'Q0@k`uIDO%O>pD48Y$lFupd6J@/=#4";-_gheT%
%.R&^o_)D4jB2"3g6>YIukgVdO!^(&YUND=Ian/UemTi]BEu*BL:IbZD!COSAXE1Dd.1?QR6-N1sBTe<S4)7mU8QLER9]L$)QqEmJ
%"UWJ3PJt+#hrrEQdR-rB&4Y-r?i"bkGr_"Ab)XW)6,c>[)*e^L,n0mlMOc-c"sDA'e8F6%^X5Hl24GI@D,+`RH@>f$^VlJQ=`/(6
%,A(Ln[:Loe@,%6Oa8P])mr^_3D<HBd>NZcM:dPTLILG`*SdY,J1%1c-?+&`Y"C(3>nJj758BYOKPp/_,;JHUqBIH^H$(;22@96.N
%Y.u=:e/Yc\r?un*#;8`1JG9gDN]Nnfk,24bs';D,4O1[$E6A7dm89d,ELLU&fI7se2@J6fZ]KX2;L^D.D_T"J'/ug&>chl2MW^M'
%blJBUr_\bGPb_P^gR*`TOG4(WLYP,\"sGCoU-[4"kD0D=1Kae91`L$>.9`1O;jaL5G;(?L_TE?30,:LuS:-)kGiNc5^ud]#_I9nu
%-(lcV(PHW\6H,:=I8(KU1r>M02"fc`p$ZiP[HJ1D:M71XIHtj=lZ:)BT#]knLPOi.2!<@pk]S\n(i0e!SM%@+5EC8;$:VJZS)(Y\
%7,jYXQl_^L;>8i;+\\Bmo%3He15<AsSP$4!-%0AXbrXWk'Wl]d`@U8<d`eOJs1=!Q0[mf8!ks=+3dp8^ctfd'hTi"_5KtF(<;&an
%e#^@iE^)TZB@8n^F`%b#o$'sBXjr5E2B._%M5(k1r^VLN\cu#4[tCK`_(#"2jq_AORu'Qr?`HX)97?Fo/eV=?f]gFCAJZeC3F$<]
%*8b`O*X4N0l7i!s3Nf.B2/RU\*p'Xlh5gk=-7[!"6lp.p$ci2*VRs[E\Mq).34nbKe0/>#7m]N!m+>#QTR30JK7kNhEVK*%Ag)#Y
%@dl(9/lc_s/pXJ;&#DpB%cCD-X2A@X[qFWFLJ'4^j#bQ'_nbD-*<q!Ka0cH>*rO-UbTdi/K:9K,;MtLbjKq$=%'aNdAb;le+hY?b
%b\D`t<)3\bBM5Z;jV?cpQSs+@`'H0C8[tP'#jFb]5]jQ$/[b!>6l"lH/s;ch*sbP^3"-F%J@E^eB#4$9B%\r>q)X:nT1j4c,74*X
%q8*=MC5i.c'P6/+dII\5`04kDrM>:)NDWISA?bm0V$Q/D&&`j81H"NqX_*+a?WIFnl2?C-[lLWmTK*9.QMSd"n["el$l4H7-M'9.
%[%dtJ>X_X\Z>0O2Ue\3km"Ml6p,I^imFX5l^*OXeYuB#u)#D$!1O5Kj?A>#ZJ:%o0X>k1pQA![%)siOjY'hF:=Y])%OOG?*-nEe2
%@aUos3s;YN6rhDS'Q4mPnMLT^HRp$gmep?sKE\<F%.J_BJhn!SL\-IoA!ZIBd^T=+?Og#K2n$VhB#,kh>D12(jsqI,IPSgK$\".[
%#\R=0iNCF=PuSNMI9/"SDA=c'dS_II)]:;B&N/]g!nIV=FSG[gC)$?5Q@U;B=ERA_)c+_ZbbBTp6XP7OLOK,LrqYZF?X@#e0[G/_
%K',@)^>Am3IJMXdqs.m%]mb2$kC.LJk0;ZTQgaZufMA!gfDBd\hd5b1ms]]^(D9JH:3cd9jU^63qs#93?foi~>
%AI9_PrivateDataEnd
